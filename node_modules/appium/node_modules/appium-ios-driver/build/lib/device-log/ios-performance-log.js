"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.IOSPerformanceLog = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

const MAX_EVENTS = 5000;

class IOSPerformanceLog {
  constructor(remoteDebugger, maxEvents = MAX_EVENTS) {
    this.remoteDebugger = remoteDebugger;
    this.maxEvents = parseInt(maxEvents, 10);
    this.timelineEvents = [];
  }

  startCapture() {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug('Starting performance (Timeline) log capture');

      _this.timelineEvents = [];
      return yield _this.remoteDebugger.startTimeline(_this.onTimelineEvent.bind(_this));
    })();
  }

  stopCapture() {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug('Stopping performance (Timeline) log capture');

      return yield _this2.remoteDebugger.stopTimeline();
    })();
  }

  onTimelineEvent(event) {
    _logger.default.debug(`Received Timeline event: ${_lodash.default.truncate(JSON.stringify(event))}`);

    this.timelineEvents.push(event);

    if (this.timelineEvents.length > this.maxEvents) {
      let removedEvent = this.timelineEvents.shift();

      _logger.default.warn(`Too many Timeline events, removing earliest: ${_lodash.default.truncate(JSON.stringify(removedEvent))}`);
    }
  }

  getLogs() {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let events = _this3.timelineEvents;

      _logger.default.debug('Flushing Timeline events');

      _this3.timelineEvents = [];
      return events;
    })();
  }

  getAllLogs() {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      return _this4.getLogs();
    })();
  }

}

exports.IOSPerformanceLog = IOSPerformanceLog;
var _default = IOSPerformanceLog;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kZXZpY2UtbG9nL2lvcy1wZXJmb3JtYW5jZS1sb2cuanMiXSwibmFtZXMiOlsiTUFYX0VWRU5UUyIsIklPU1BlcmZvcm1hbmNlTG9nIiwiY29uc3RydWN0b3IiLCJyZW1vdGVEZWJ1Z2dlciIsIm1heEV2ZW50cyIsInBhcnNlSW50IiwidGltZWxpbmVFdmVudHMiLCJzdGFydENhcHR1cmUiLCJsb2dnZXIiLCJkZWJ1ZyIsInN0YXJ0VGltZWxpbmUiLCJvblRpbWVsaW5lRXZlbnQiLCJiaW5kIiwic3RvcENhcHR1cmUiLCJzdG9wVGltZWxpbmUiLCJldmVudCIsIl8iLCJ0cnVuY2F0ZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJwdXNoIiwibGVuZ3RoIiwicmVtb3ZlZEV2ZW50Iiwic2hpZnQiLCJ3YXJuIiwiZ2V0TG9ncyIsImV2ZW50cyIsImdldEFsbExvZ3MiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUEsTUFBTUEsVUFBVSxHQUFHLElBQW5COztBQUVBLE1BQU1DLGlCQUFOLENBQXdCO0FBQ3RCQyxFQUFBQSxXQUFXLENBQUVDLGNBQUYsRUFBa0JDLFNBQVMsR0FBR0osVUFBOUIsRUFBMEM7QUFDbkQsU0FBS0csY0FBTCxHQUFzQkEsY0FBdEI7QUFDQSxTQUFLQyxTQUFMLEdBQWlCQyxRQUFRLENBQUNELFNBQUQsRUFBWSxFQUFaLENBQXpCO0FBRUEsU0FBS0UsY0FBTCxHQUFzQixFQUF0QjtBQUNEOztBQUVLQyxFQUFBQSxZQUFOLEdBQXNCO0FBQUE7O0FBQUE7QUFDcEJDLHNCQUFPQyxLQUFQLENBQWEsNkNBQWI7O0FBQ0EsTUFBQSxLQUFJLENBQUNILGNBQUwsR0FBc0IsRUFBdEI7QUFDQSxtQkFBYSxLQUFJLENBQUNILGNBQUwsQ0FBb0JPLGFBQXBCLENBQWtDLEtBQUksQ0FBQ0MsZUFBTCxDQUFxQkMsSUFBckIsQ0FBMEIsS0FBMUIsQ0FBbEMsQ0FBYjtBQUhvQjtBQUlyQjs7QUFFS0MsRUFBQUEsV0FBTixHQUFxQjtBQUFBOztBQUFBO0FBQ25CTCxzQkFBT0MsS0FBUCxDQUFhLDZDQUFiOztBQUNBLG1CQUFhLE1BQUksQ0FBQ04sY0FBTCxDQUFvQlcsWUFBcEIsRUFBYjtBQUZtQjtBQUdwQjs7QUFFREgsRUFBQUEsZUFBZSxDQUFFSSxLQUFGLEVBQVM7QUFDdEJQLG9CQUFPQyxLQUFQLENBQWMsNEJBQTJCTyxnQkFBRUMsUUFBRixDQUFXQyxJQUFJLENBQUNDLFNBQUwsQ0FBZUosS0FBZixDQUFYLENBQWtDLEVBQTNFOztBQUNBLFNBQUtULGNBQUwsQ0FBb0JjLElBQXBCLENBQXlCTCxLQUF6Qjs7QUFHQSxRQUFJLEtBQUtULGNBQUwsQ0FBb0JlLE1BQXBCLEdBQTZCLEtBQUtqQixTQUF0QyxFQUFpRDtBQUMvQyxVQUFJa0IsWUFBWSxHQUFHLEtBQUtoQixjQUFMLENBQW9CaUIsS0FBcEIsRUFBbkI7O0FBQ0FmLHNCQUFPZ0IsSUFBUCxDQUFhLGdEQUErQ1IsZ0JBQUVDLFFBQUYsQ0FBV0MsSUFBSSxDQUFDQyxTQUFMLENBQWVHLFlBQWYsQ0FBWCxDQUF5QyxFQUFyRztBQUNEO0FBQ0Y7O0FBRUtHLEVBQUFBLE9BQU4sR0FBaUI7QUFBQTs7QUFBQTtBQUNmLFVBQUlDLE1BQU0sR0FBRyxNQUFJLENBQUNwQixjQUFsQjs7QUFHQUUsc0JBQU9DLEtBQVAsQ0FBYSwwQkFBYjs7QUFDQSxNQUFBLE1BQUksQ0FBQ0gsY0FBTCxHQUFzQixFQUF0QjtBQUVBLGFBQU9vQixNQUFQO0FBUGU7QUFRaEI7O0FBRUtDLEVBQUFBLFVBQU4sR0FBb0I7QUFBQTs7QUFBQTtBQUNsQixhQUFPLE1BQUksQ0FBQ0YsT0FBTCxFQUFQO0FBRGtCO0FBRW5COztBQTFDcUI7OztlQStDVHhCLGlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZ2dlciBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5jb25zdCBNQVhfRVZFTlRTID0gNTAwMDtcblxuY2xhc3MgSU9TUGVyZm9ybWFuY2VMb2cge1xuICBjb25zdHJ1Y3RvciAocmVtb3RlRGVidWdnZXIsIG1heEV2ZW50cyA9IE1BWF9FVkVOVFMpIHtcbiAgICB0aGlzLnJlbW90ZURlYnVnZ2VyID0gcmVtb3RlRGVidWdnZXI7XG4gICAgdGhpcy5tYXhFdmVudHMgPSBwYXJzZUludChtYXhFdmVudHMsIDEwKTtcblxuICAgIHRoaXMudGltZWxpbmVFdmVudHMgPSBbXTtcbiAgfVxuXG4gIGFzeW5jIHN0YXJ0Q2FwdHVyZSAoKSB7XG4gICAgbG9nZ2VyLmRlYnVnKCdTdGFydGluZyBwZXJmb3JtYW5jZSAoVGltZWxpbmUpIGxvZyBjYXB0dXJlJyk7XG4gICAgdGhpcy50aW1lbGluZUV2ZW50cyA9IFtdO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnJlbW90ZURlYnVnZ2VyLnN0YXJ0VGltZWxpbmUodGhpcy5vblRpbWVsaW5lRXZlbnQuYmluZCh0aGlzKSk7XG4gIH1cblxuICBhc3luYyBzdG9wQ2FwdHVyZSAoKSB7XG4gICAgbG9nZ2VyLmRlYnVnKCdTdG9wcGluZyBwZXJmb3JtYW5jZSAoVGltZWxpbmUpIGxvZyBjYXB0dXJlJyk7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucmVtb3RlRGVidWdnZXIuc3RvcFRpbWVsaW5lKCk7XG4gIH1cblxuICBvblRpbWVsaW5lRXZlbnQgKGV2ZW50KSB7XG4gICAgbG9nZ2VyLmRlYnVnKGBSZWNlaXZlZCBUaW1lbGluZSBldmVudDogJHtfLnRydW5jYXRlKEpTT04uc3RyaW5naWZ5KGV2ZW50KSl9YCk7XG4gICAgdGhpcy50aW1lbGluZUV2ZW50cy5wdXNoKGV2ZW50KTtcblxuICAgIC8vIGlmIHdlIGhhdmUgdG9vIG1hbnksIGdldCByaWQgb2YgdGhlIG9sZGVzdCBsb2cgbGluZVxuICAgIGlmICh0aGlzLnRpbWVsaW5lRXZlbnRzLmxlbmd0aCA+IHRoaXMubWF4RXZlbnRzKSB7XG4gICAgICBsZXQgcmVtb3ZlZEV2ZW50ID0gdGhpcy50aW1lbGluZUV2ZW50cy5zaGlmdCgpO1xuICAgICAgbG9nZ2VyLndhcm4oYFRvbyBtYW55IFRpbWVsaW5lIGV2ZW50cywgcmVtb3ZpbmcgZWFybGllc3Q6ICR7Xy50cnVuY2F0ZShKU09OLnN0cmluZ2lmeShyZW1vdmVkRXZlbnQpKX1gKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRMb2dzICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gICAgbGV0IGV2ZW50cyA9IHRoaXMudGltZWxpbmVFdmVudHM7XG5cbiAgICAvLyBmbHVzaCBldmVudHNcbiAgICBsb2dnZXIuZGVidWcoJ0ZsdXNoaW5nIFRpbWVsaW5lIGV2ZW50cycpO1xuICAgIHRoaXMudGltZWxpbmVFdmVudHMgPSBbXTtcblxuICAgIHJldHVybiBldmVudHM7XG4gIH1cblxuICBhc3luYyBnZXRBbGxMb2dzICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gICAgcmV0dXJuIHRoaXMuZ2V0TG9ncygpO1xuICB9XG59XG5cblxuZXhwb3J0IHsgSU9TUGVyZm9ybWFuY2VMb2cgfTtcbmV4cG9ydCBkZWZhdWx0IElPU1BlcmZvcm1hbmNlTG9nO1xuIl0sImZpbGUiOiJsaWIvZGV2aWNlLWxvZy9pb3MtcGVyZm9ybWFuY2UtbG9nLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
