"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DEVICE_CONSOLE_PATH = exports.IOSLog = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _events = _interopRequireDefault(require("events"));

const EventEmitter = _events.default.EventEmitter;
const START_TIMEOUT = 10000;

const DEVICE_CONSOLE_PATH = _path.default.resolve(__dirname, '..', '..', '..', 'build', 'deviceconsole');

exports.DEVICE_CONSOLE_PATH = DEVICE_CONSOLE_PATH;
const SYSTEM_LOG_PATH = '/var/log/system.log';
const MAX_LOG_ENTRIES_COUNT = 10000;

class IOSLog extends EventEmitter {
  constructor(opts) {
    super();
    this.sim = opts.sim;
    this.udid = opts.udid;
    this.showLogs = !!opts.showLogs;
    this.realDeviceLogger = opts.realDeviceLogger || 'idevicesyslog';
    this.xcodeVersion = opts.xcodeVersion;
    this.proc = null;
    this.logs = [];
    this.logRow = '';
    this.logIdxSinceLastRequest = -1;
    this.maxBufferSize = MAX_LOG_ENTRIES_COUNT;
  }

  startCaptureRealDevice() {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let cmd, args, env;

      if ((_this.realDeviceLogger || '').indexOf('idevicesyslog') !== -1) {
        _logger.default.debug('Attempting iOS device log capture via libimobiledevice idevicesyslog');

        if (_this.realDeviceLogger.toLowerCase() === 'idevicesyslog') {
          cmd = 'idevicesyslog';

          try {
            yield _appiumSupport.fs.which('idevicesyslog');
          } catch (err) {
            throw new Error(`Unable to find system idevicesyslog: ${err.message}`);
          }
        } else {
          if (!(yield _appiumSupport.fs.exists(_this.realDeviceLogger))) {
            throw new Error(`Unable to find idevicesyslog from 'realDeviceLogger' capability '${_this.realDeviceLogger}'`);
          }

          cmd = _this.realDeviceLogger;
        }

        args = ['-u', _this.udid];
        env = process.env;
      } else if ((_this.realDeviceLogger || '').indexOf('deviceconsole') !== -1) {
        _logger.default.debug('Attempting iOS device log capture via deviceconsole');

        let deviceconsole;

        if (_this.realDeviceLogger.toLowerCase() === 'deviceconsole') {
          deviceconsole = DEVICE_CONSOLE_PATH;
        } else {
          let stat;

          try {
            stat = yield _appiumSupport.fs.stat(_this.realDeviceLogger);
          } catch (err) {
            throw new Error(`Unable to find deviceconsole from 'realDeviceLogger' capability '${_this.realDeviceLogger}': ${err.message}`);
          }

          if (stat.isDirectory()) {
            deviceconsole = _this.realDeviceLogger;
          } else {
            if (!_lodash.default.endsWith(_this.realDeviceLogger, 'deviceconsole')) {
              throw new Error(`Unable to parse 'deviceconsole' installation directory from '${_this.realDeviceLogger}'`);
            }

            deviceconsole = _path.default.dirname(_this.realDeviceLogger);
          }
        }

        _logger.default.debug(`Using 'deviceconsole' from '${deviceconsole}'`);

        cmd = `${deviceconsole}/deviceconsole`;
        args = ['-u', _this.udid];
        env = _lodash.default.clone(process.env);
        env.DYLD_LIBRARY_PATH = deviceconsole;

        if (process.env.DYLD_LIBRARY_PATH) {
          env.DYLD_LIBRARY_PATH = `${env.DYLD_LIBRARY_PATH}:${process.env.DYLD_LIBRARY_PATH}`;
        }
      } else {
        _logger.default.errorAndThrow(`Unable to capture device log. Unknown 'realDeviceLogger': '${_this.realDeviceLogger}'`);
      }

      _this.subprocessId = `${cmd}_${_this.udid}`;

      _logger.default.debug(`Starting iOS device log capture with: '${cmd}'`);

      try {
        yield _this.killExistingSysLogProcesses(cmd, args);
      } catch (e) {}

      _this.proc = _this.getIDeviceSysLogProcess(cmd, args, env);
      yield _this.finishStartingLogCapture();
    })();
  }

  startCaptureSimulator() {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug(`Starting iOS ${yield _this2.sim.getPlatformVersion()} simulator log capture`);

      if (_this2.xcodeVersion.major < 5) {
        _this2.proc = new _teen_process.SubProcess('tail', ['-f', '-n', '1', SYSTEM_LOG_PATH]);
        yield _this2.finishStartingLogCapture();
        return;
      }

      if (_lodash.default.isUndefined(_this2.sim.udid)) {
        _logger.default.errorAndThrow(`iOS log capture with Xcode ${_this2.xcodeVersion.versionString} requires a sim udid`);
      }

      let logPath = _this2.sim.getLogDir();

      try {
        if (logPath.indexOf('*') >= 0) {
          _logger.default.error(`Log path has * in it. Unable to start log capture: ${logPath}`);

          return;
        }

        let systemLogPath = _path.default.resolve(logPath, 'system.log');

        _logger.default.debug(`System log path: ${systemLogPath}`);

        yield (0, _appiumSupport.mkdirp)(logPath);
        yield _appiumSupport.fs.writeFile(systemLogPath, 'A new Appium session is about to start!\n', {
          flag: 'a'
        });
        let files;

        try {
          files = yield _appiumSupport.fs.glob(systemLogPath);

          if (files.length < 1) {
            throw new Error('Could not start log capture');
          }
        } catch (e) {
          _logger.default.error(`Could not start log capture because no iOS ` + `simulator logs could be found at ${systemLogPath}. ` + `Logging will not be functional for this run`);
        }

        let lastModifiedLogPath = files[0];
        let lastModifiedLogTime = (yield _appiumSupport.fs.stat(lastModifiedLogPath)).mtime;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            let file = _step.value;

            let _ref = yield _appiumSupport.fs.stat(file),
                mtime = _ref.mtime;

            if (mtime > lastModifiedLogTime) {
              lastModifiedLogPath = file;
              lastModifiedLogTime = mtime;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        const tailArgs = ['-f', '-n', '1', lastModifiedLogPath];

        try {
          yield (0, _teen_process.exec)('pkill', ['-xf', ['tail', ...tailArgs].join(' ')]);
        } catch (e) {}

        _this2.proc = new _teen_process.SubProcess('tail', tailArgs);
        yield _this2.finishStartingLogCapture();
      } catch (err) {
        _logger.default.errorAndThrow(`Simulator log capture failed: ${err.message}`);
      }
    })();
  }

  startCapture() {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (_this3.udid) {
        return yield _this3.startCaptureRealDevice();
      }

      return yield _this3.startCaptureSimulator();
    })();
  }

  finishStartingLogCapture() {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!_this4.proc) {
        _logger.default.errorAndThrow('Could not capture device log');
      }

      let firstLine = true;

      _this4.proc.on('output', (stdout, stderr) => {
        if (stdout) {
          if (firstLine) {
            if (stdout.substr(-1, 1) === '\n') {
              firstLine = false;
            }
          } else {
            _this4.logRow += stdout;

            if (stdout.substr(-1, 1) === '\n') {
              _this4.onOutput();

              _this4.logRow = '';
            }
          }
        }

        if (stderr) {
          _this4.onOutput('STDERR');
        }
      });

      let sd = (stdout, stderr) => {
        if (/execvp\(\)/.test(stderr)) {
          throw new Error('iOS log capture process failed to start');
        }

        return stdout || stderr;
      };

      yield _this4.proc.start(sd, START_TIMEOUT);
    })();
  }

  stopCapture() {
    var _this5 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (_this5.proc) {
        if (_this5.udid) {
          const cachedSysLog = IOSLog.cachedIDeviceSysLogs[_this5.subprocessId];

          if (cachedSysLog) {
            cachedSysLog.count--;

            if (cachedSysLog.count === 0) {
              yield _this5.killLogSubProcess();
              delete IOSLog.cachedIDeviceSysLogs[_this5.subprocessId];
            }
          }
        } else {
          yield _this5.killLogSubProcess();
        }
      }

      _this5.proc = null;
    })();
  }

  killLogSubProcess() {
    var _this6 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (_this6.proc.isRunning) {
        _logger.default.debug('Stopping iOS log capture');

        try {
          yield _this6.proc.stop('SIGTERM', 1000);
        } catch (e) {
          _logger.default.error('Cannot stop log capture process. Sending SIGKILL...');

          yield _this6.proc.stop('SIGKILL');
        }
      }
    })();
  }

  onOutput(prefix = '') {
    let logs = this.logRow.split('\n');
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = logs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        let log = _step2.value;
        if (!log) continue;
        let logObj = {
          timestamp: Date.now(),
          level: 'ALL',
          message: log
        };
        this.logs.push(logObj);
        this.emit('output', logObj);

        if (this.logs.length > this.maxBufferSize) {
          this.logs.shift();

          if (this.logIdxSinceLastRequest > 0) {
            --this.logIdxSinceLastRequest;
          }
        }

        if (this.showLogs) {
          let space = prefix.length > 0 ? ' ' : '';

          _logger.default.info(`[IOS_SYSLOG_ROW${space}${prefix}] ${log}`);
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  }

  getLogs() {
    var _this7 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (_this7.logs.length && _this7.logIdxSinceLastRequest < _this7.logs.length) {
        let result = _this7.logs;

        if (_this7.logIdxSinceLastRequest > 0) {
          result = result.slice(_this7.logIdxSinceLastRequest);
        }

        _this7.logIdxSinceLastRequest = _this7.logs.length;
        return result;
      }

      return [];
    })();
  }

  getAllLogs() {
    var _this8 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      return _this8.logs;
    })();
  }

  killExistingSysLogProcesses(cmd, args) {
    var _this9 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!IOSLog.cachedIDeviceSysLogs[_this9.subprocessId]) {
        yield (0, _teen_process.exec)('pkill', ['-xf', [cmd, ...args].join(' ')]);
      }
    })();
  }

  getIDeviceSysLogProcess(cmd, args, env) {
    if (!IOSLog.cachedIDeviceSysLogs[this.subprocessId]) {
      let _IOSLog$cachedIDevice = IOSLog.cachedIDeviceSysLogs[this.subprocessId] = {
        proc: new _teen_process.SubProcess(cmd, args, {
          env
        }),
        count: 1
      },
          proc = _IOSLog$cachedIDevice.proc;

      proc.on('exit', () => delete IOSLog.cachedIDeviceSysLogs[this.subprocessId]);
    } else {
      IOSLog.cachedIDeviceSysLogs[this.subprocessId].count++;
    }

    return IOSLog.cachedIDeviceSysLogs[this.subprocessId].proc;
  }

}

exports.IOSLog = IOSLog;
IOSLog.cachedIDeviceSysLogs = {};
var _default = IOSLog;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
