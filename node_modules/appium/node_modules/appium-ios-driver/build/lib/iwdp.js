"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.IWDP = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _teen_process = require("teen_process");

var _events = _interopRequireDefault(require("events"));

var _logger = _interopRequireDefault(require("./logger"));

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _asyncbox = require("asyncbox");

var _appiumSupport = require("appium-support");

const IWDP_CMD = 'ios_webkit_debug_proxy';
const MAX_RETRIES = 10;

let iwdpLogger = _appiumSupport.logger.getLogger('IWDP');

class IWDP extends _events.default {
  constructor(webkitDebugProxyPort = 27753, udid = null) {
    super();
    this.udid = udid;
    this.attempts = 0;
    this.port = webkitDebugProxyPort;
    this.process = this.createIWDPProcess();
    this.endpoint = `http://localhost:${this.port}`;
  }

  createIWDPProcess() {
    let process = new _teen_process.SubProcess(IWDP_CMD, ['-c', `${this.udid}:${this.port}`, '-d']);
    process.on('exit', () => this.onExit());
    process.on('lines-stderr', iwdpLogger.error);
    return process;
  }

  onExit() {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!_this.exitRequested) {
        _this.process = _this.createIWDPProcess();
        yield _this.start();
      }
    })();
  }

  start() {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (++_this2.attempts > MAX_RETRIES) {
        return _this2.emit('error', new Error(`Failed to start IWDP server. Max retry attempts ${MAX_RETRIES} reached`));
      }

      _this2.exitRequested = false;

      if (!(yield _this2.isSupported())) {
        _logger.default.errorAndThrow(`'ios_webkit_debug_proxy' not installed on this machine. Try 'brew install ios-webkit-debug-proxy`);
      }

      _logger.default.debug(`Starting ios_webkit_debug_proxy at port ${_this2.port} on device ${_this2.udid}`);

      yield _this2.process.start(0);

      try {
        yield (0, _asyncbox.retryInterval)(20, 500, (0, _asyncToGenerator2.default)(function* () {
          return yield (0, _requestPromise.default)(_this2.endpoint);
        }));

        _this2.emit('start');
      } catch (ign) {
        try {
          yield _this2.process.stop();
        } catch (ign2) {}

        _logger.default.errorAndThrow(`Timed out waiting for ios_webkit_debug_proxy to open`);
      }
    })();
  }

  stop() {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this3.attempts = 0;
      _this3.exitRequested = true;
      return yield _this3.process.stop();
    })();
  }

  isSupported() {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (typeof _this4.supported !== 'undefined') {
        return _this4.supported;
      }

      try {
        yield _appiumSupport.fs.which(IWDP_CMD);
        _this4.supported = true;
      } catch (e) {
        _this4.supported = false;
      }

      return _this4.supported;
    })();
  }

}

exports.IWDP = IWDP;
var _default = IWDP;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9pd2RwLmpzIl0sIm5hbWVzIjpbIklXRFBfQ01EIiwiTUFYX1JFVFJJRVMiLCJpd2RwTG9nZ2VyIiwiYmFzZUxvZ2dlciIsImdldExvZ2dlciIsIklXRFAiLCJFdmVudEVtaXR0ZXIiLCJjb25zdHJ1Y3RvciIsIndlYmtpdERlYnVnUHJveHlQb3J0IiwidWRpZCIsImF0dGVtcHRzIiwicG9ydCIsInByb2Nlc3MiLCJjcmVhdGVJV0RQUHJvY2VzcyIsImVuZHBvaW50IiwiU3ViUHJvY2VzcyIsIm9uIiwib25FeGl0IiwiZXJyb3IiLCJleGl0UmVxdWVzdGVkIiwic3RhcnQiLCJlbWl0IiwiRXJyb3IiLCJpc1N1cHBvcnRlZCIsImxvZ2dlciIsImVycm9yQW5kVGhyb3ciLCJkZWJ1ZyIsImlnbiIsInN0b3AiLCJpZ24yIiwic3VwcG9ydGVkIiwiZnMiLCJ3aGljaCIsImUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTUEsUUFBUSxHQUFHLHdCQUFqQjtBQUNBLE1BQU1DLFdBQVcsR0FBRyxFQUFwQjs7QUFFQSxJQUFJQyxVQUFVLEdBQUdDLHNCQUFXQyxTQUFYLENBQXFCLE1BQXJCLENBQWpCOztBQUVBLE1BQU1DLElBQU4sU0FBbUJDLGVBQW5CLENBQWdDO0FBRTlCQyxFQUFBQSxXQUFXLENBQUVDLG9CQUFvQixHQUFHLEtBQXpCLEVBQWdDQyxJQUFJLEdBQUcsSUFBdkMsRUFBNkM7QUFDdEQ7QUFDQSxTQUFLQSxJQUFMLEdBQVlBLElBQVo7QUFDQSxTQUFLQyxRQUFMLEdBQWdCLENBQWhCO0FBQ0EsU0FBS0MsSUFBTCxHQUFZSCxvQkFBWjtBQUNBLFNBQUtJLE9BQUwsR0FBZSxLQUFLQyxpQkFBTCxFQUFmO0FBQ0EsU0FBS0MsUUFBTCxHQUFpQixvQkFBbUIsS0FBS0gsSUFBSyxFQUE5QztBQUNEOztBQUVERSxFQUFBQSxpQkFBaUIsR0FBSTtBQUNuQixRQUFJRCxPQUFPLEdBQUcsSUFBSUcsd0JBQUosQ0FBZWYsUUFBZixFQUF5QixDQUFDLElBQUQsRUFBUSxHQUFFLEtBQUtTLElBQUssSUFBRyxLQUFLRSxJQUFLLEVBQWpDLEVBQW9DLElBQXBDLENBQXpCLENBQWQ7QUFDQUMsSUFBQUEsT0FBTyxDQUFDSSxFQUFSLENBQVcsTUFBWCxFQUFtQixNQUFNLEtBQUtDLE1BQUwsRUFBekI7QUFDQUwsSUFBQUEsT0FBTyxDQUFDSSxFQUFSLENBQVcsY0FBWCxFQUEyQmQsVUFBVSxDQUFDZ0IsS0FBdEM7QUFDQSxXQUFPTixPQUFQO0FBQ0Q7O0FBRUtLLEVBQUFBLE1BQU4sR0FBZ0I7QUFBQTs7QUFBQTtBQUVkLFVBQUksQ0FBQyxLQUFJLENBQUNFLGFBQVYsRUFBeUI7QUFDdkIsUUFBQSxLQUFJLENBQUNQLE9BQUwsR0FBZSxLQUFJLENBQUNDLGlCQUFMLEVBQWY7QUFDQSxjQUFNLEtBQUksQ0FBQ08sS0FBTCxFQUFOO0FBQ0Q7QUFMYTtBQU1mOztBQUVLQSxFQUFBQSxLQUFOLEdBQWU7QUFBQTs7QUFBQTtBQUNiLFVBQUksRUFBRSxNQUFJLENBQUNWLFFBQVAsR0FBa0JULFdBQXRCLEVBQW1DO0FBQ2pDLGVBQU8sTUFBSSxDQUFDb0IsSUFBTCxDQUFVLE9BQVYsRUFBbUIsSUFBSUMsS0FBSixDQUFXLG1EQUFrRHJCLFdBQVksVUFBekUsQ0FBbkIsQ0FBUDtBQUNEOztBQUNELE1BQUEsTUFBSSxDQUFDa0IsYUFBTCxHQUFxQixLQUFyQjs7QUFHQSxVQUFJLFFBQU8sTUFBSSxDQUFDSSxXQUFMLEVBQVAsQ0FBSixFQUErQjtBQUM3QkMsd0JBQU9DLGFBQVAsQ0FBc0Isa0dBQXRCO0FBQ0Q7O0FBRURELHNCQUFPRSxLQUFQLENBQWMsMkNBQTBDLE1BQUksQ0FBQ2YsSUFBSyxjQUFhLE1BQUksQ0FBQ0YsSUFBSyxFQUF6Rjs7QUFDQSxZQUFNLE1BQUksQ0FBQ0csT0FBTCxDQUFhUSxLQUFiLENBQW1CLENBQW5CLENBQU47O0FBR0EsVUFBSTtBQUNGLGNBQU0sNkJBQWMsRUFBZCxFQUFrQixHQUFsQixrQ0FBdUI7QUFBQSx1QkFBa0IsNkJBQVEsTUFBSSxDQUFDTixRQUFiLENBQWxCO0FBQUEsU0FBdkIsRUFBTjs7QUFDQSxRQUFBLE1BQUksQ0FBQ08sSUFBTCxDQUFVLE9BQVY7QUFDRCxPQUhELENBR0UsT0FBT00sR0FBUCxFQUFZO0FBQ1osWUFBSTtBQUNGLGdCQUFNLE1BQUksQ0FBQ2YsT0FBTCxDQUFhZ0IsSUFBYixFQUFOO0FBQ0QsU0FGRCxDQUVFLE9BQU9DLElBQVAsRUFBYSxDQUFHOztBQUNsQkwsd0JBQU9DLGFBQVAsQ0FBc0Isc0RBQXRCO0FBQ0Q7QUF2Qlk7QUF3QmQ7O0FBRUtHLEVBQUFBLElBQU4sR0FBYztBQUFBOztBQUFBO0FBQ1osTUFBQSxNQUFJLENBQUNsQixRQUFMLEdBQWdCLENBQWhCO0FBQ0EsTUFBQSxNQUFJLENBQUNTLGFBQUwsR0FBcUIsSUFBckI7QUFDQSxtQkFBYSxNQUFJLENBQUNQLE9BQUwsQ0FBYWdCLElBQWIsRUFBYjtBQUhZO0FBSWI7O0FBS0tMLEVBQUFBLFdBQU4sR0FBcUI7QUFBQTs7QUFBQTtBQUNuQixVQUFJLE9BQU8sTUFBSSxDQUFDTyxTQUFaLEtBQTBCLFdBQTlCLEVBQTJDO0FBQ3pDLGVBQU8sTUFBSSxDQUFDQSxTQUFaO0FBQ0Q7O0FBRUQsVUFBSTtBQUNGLGNBQU1DLGtCQUFHQyxLQUFILENBQVNoQyxRQUFULENBQU47QUFDQSxRQUFBLE1BQUksQ0FBQzhCLFNBQUwsR0FBaUIsSUFBakI7QUFDRCxPQUhELENBR0UsT0FBT0csQ0FBUCxFQUFVO0FBQ1YsUUFBQSxNQUFJLENBQUNILFNBQUwsR0FBaUIsS0FBakI7QUFDRDs7QUFDRCxhQUFPLE1BQUksQ0FBQ0EsU0FBWjtBQVhtQjtBQVlwQjs7QUF6RTZCOzs7ZUE2RWpCekIsSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN1YlByb2Nlc3MgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICdldmVudHMnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgcmVxdWVzdCBmcm9tICdyZXF1ZXN0LXByb21pc2UnO1xuaW1wb3J0IHsgcmV0cnlJbnRlcnZhbCB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCB7IGZzLCBsb2dnZXIgYXMgYmFzZUxvZ2dlciB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcblxuY29uc3QgSVdEUF9DTUQgPSAnaW9zX3dlYmtpdF9kZWJ1Z19wcm94eSc7XG5jb25zdCBNQVhfUkVUUklFUyA9IDEwO1xuXG5sZXQgaXdkcExvZ2dlciA9IGJhc2VMb2dnZXIuZ2V0TG9nZ2VyKCdJV0RQJyk7XG5cbmNsYXNzIElXRFAgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuXG4gIGNvbnN0cnVjdG9yICh3ZWJraXREZWJ1Z1Byb3h5UG9ydCA9IDI3NzUzLCB1ZGlkID0gbnVsbCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy51ZGlkID0gdWRpZDtcbiAgICB0aGlzLmF0dGVtcHRzID0gMDtcbiAgICB0aGlzLnBvcnQgPSB3ZWJraXREZWJ1Z1Byb3h5UG9ydDtcbiAgICB0aGlzLnByb2Nlc3MgPSB0aGlzLmNyZWF0ZUlXRFBQcm9jZXNzKCk7XG4gICAgdGhpcy5lbmRwb2ludCA9IGBodHRwOi8vbG9jYWxob3N0OiR7dGhpcy5wb3J0fWA7XG4gIH1cblxuICBjcmVhdGVJV0RQUHJvY2VzcyAoKSB7XG4gICAgbGV0IHByb2Nlc3MgPSBuZXcgU3ViUHJvY2VzcyhJV0RQX0NNRCwgWyctYycsIGAke3RoaXMudWRpZH06JHt0aGlzLnBvcnR9YCwgJy1kJ10pOyAvLyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvaW9zLXdlYmtpdC1kZWJ1Zy1wcm94eSBmb3IgcmVmZXJlbmNlKVxuICAgIHByb2Nlc3Mub24oJ2V4aXQnLCAoKSA9PiB0aGlzLm9uRXhpdCgpKTtcbiAgICBwcm9jZXNzLm9uKCdsaW5lcy1zdGRlcnInLCBpd2RwTG9nZ2VyLmVycm9yKTtcbiAgICByZXR1cm4gcHJvY2VzcztcbiAgfVxuXG4gIGFzeW5jIG9uRXhpdCAoKSB7XG4gICAgLy8gSWYgdGhlIHByb2Nlc3MgZXhpdHMgYW5kIHRoZSBleGl0IHdhc24ndCByZXF1ZXN0ZWQgYnkgdGhlIEFQSSwgcmVzdGFydCBpdFxuICAgIGlmICghdGhpcy5leGl0UmVxdWVzdGVkKSB7XG4gICAgICB0aGlzLnByb2Nlc3MgPSB0aGlzLmNyZWF0ZUlXRFBQcm9jZXNzKCk7XG4gICAgICBhd2FpdCB0aGlzLnN0YXJ0KCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgc3RhcnQgKCkge1xuICAgIGlmICgrK3RoaXMuYXR0ZW1wdHMgPiBNQVhfUkVUUklFUykge1xuICAgICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoYEZhaWxlZCB0byBzdGFydCBJV0RQIHNlcnZlci4gTWF4IHJldHJ5IGF0dGVtcHRzICR7TUFYX1JFVFJJRVN9IHJlYWNoZWRgKSk7XG4gICAgfVxuICAgIHRoaXMuZXhpdFJlcXVlc3RlZCA9IGZhbHNlO1xuXG4gICAgLy8gVGhyb3cgZXJyb3IgaWYgaW9zX3dlYmtpdF9kZWJ1Z19wcm94eSBpcyBub3QgaW5zdGFsbGVkXG4gICAgaWYgKCFhd2FpdCB0aGlzLmlzU3VwcG9ydGVkKCkpIHtcbiAgICAgIGxvZ2dlci5lcnJvckFuZFRocm93KGAnaW9zX3dlYmtpdF9kZWJ1Z19wcm94eScgbm90IGluc3RhbGxlZCBvbiB0aGlzIG1hY2hpbmUuIFRyeSAnYnJldyBpbnN0YWxsIGlvcy13ZWJraXQtZGVidWctcHJveHlgKTtcbiAgICB9XG5cbiAgICBsb2dnZXIuZGVidWcoYFN0YXJ0aW5nIGlvc193ZWJraXRfZGVidWdfcHJveHkgYXQgcG9ydCAke3RoaXMucG9ydH0gb24gZGV2aWNlICR7dGhpcy51ZGlkfWApO1xuICAgIGF3YWl0IHRoaXMucHJvY2Vzcy5zdGFydCgwKTtcblxuICAgIC8vIFJldHJ5IHBpbmdpbmcgdGhlIGl3ZHAgc2VydmVyIHVudGlsIGl0J3MgcmVhZHlcbiAgICB0cnkge1xuICAgICAgYXdhaXQgcmV0cnlJbnRlcnZhbCgyMCwgNTAwLCBhc3luYyAoKSA9PiBhd2FpdCByZXF1ZXN0KHRoaXMuZW5kcG9pbnQpKTtcbiAgICAgIHRoaXMuZW1pdCgnc3RhcnQnKTtcbiAgICB9IGNhdGNoIChpZ24pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHRoaXMucHJvY2Vzcy5zdG9wKCk7XG4gICAgICB9IGNhdGNoIChpZ24yKSB7IH1cbiAgICAgIGxvZ2dlci5lcnJvckFuZFRocm93KGBUaW1lZCBvdXQgd2FpdGluZyBmb3IgaW9zX3dlYmtpdF9kZWJ1Z19wcm94eSB0byBvcGVuYCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgc3RvcCAoKSB7XG4gICAgdGhpcy5hdHRlbXB0cyA9IDA7XG4gICAgdGhpcy5leGl0UmVxdWVzdGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm9jZXNzLnN0b3AoKTtcbiAgfVxuXG4gIC8qKlxuXHQgKiBJcyAnaW9zX3dlYmtpdF9kZWJ1Z19wcm94eScgYXZhaWxhYmxlP1xuXHQgKi9cbiAgYXN5bmMgaXNTdXBwb3J0ZWQgKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5zdXBwb3J0ZWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdXBwb3J0ZWQ7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGZzLndoaWNoKElXRFBfQ01EKTtcbiAgICAgIHRoaXMuc3VwcG9ydGVkID0gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLnN1cHBvcnRlZCA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zdXBwb3J0ZWQ7XG4gIH1cbn1cblxuZXhwb3J0IHsgSVdEUCB9O1xuZXhwb3J0IGRlZmF1bHQgSVdEUDtcbiJdLCJmaWxlIjoibGliL2l3ZHAuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
