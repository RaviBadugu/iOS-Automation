"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _through = require("through");

var _path = _interopRequireDefault(require("path"));

var _appiumSupport = require("appium-support");

var _appiumXcode = _interopRequireDefault(require("appium-xcode"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumIosSimulator = require("appium-ios-simulator");

var _utils = require("./utils");

var _streams = require("./streams");

require("colors");

const ERR_NEVER_CHECKED_IN = 'Instruments never checked in';
const ERR_CRASHED_ON_STARTUP = 'Instruments crashed on startup';
const ERR_AMBIGUOUS_DEVICE = 'Instruments Usage Error : Ambiguous device name/identifier';

class Instruments {
  static quickInstruments(opts) {
    return (0, _asyncToGenerator2.default)(function* () {
      opts = _lodash.default.clone(opts);
      let xcodeTraceTemplatePath = yield _appiumXcode.default.getAutomationTraceTemplatePath();

      _lodash.default.defaults(opts, {
        launchTimeout: 60000,
        template: xcodeTraceTemplatePath,
        withoutDelay: true,
        xcodeVersion: '8.1',
        webSocket: null,
        flakeyRetries: 2
      });

      return new Instruments(opts);
    })();
  }

  constructor(opts) {
    opts = _lodash.default.cloneDeep(opts);

    _lodash.default.defaults(opts, {
      termTimeout: 5000,
      tmpDir: '/tmp/appium-instruments',
      launchTimeout: 90000,
      flakeyRetries: 0,
      realDevice: false
    });

    const props = ['app', 'termTimeout', 'flakeyRetries', 'udid', 'bootstrap', 'template', 'withoutDelay', 'processArguments', 'realDevice', 'simulatorSdkAndDevice', 'tmpDir', 'traceDir', 'locale', 'language'];

    for (var _i = 0; _i < props.length; _i++) {
      const f = props[_i];
      this[f] = opts[f];
    }

    this.traceDir = this.traceDir || this.tmpDir;
    this.launchTimeout = (0, _utils.parseLaunchTimeout)(opts.launchTimeout);
    this.proc = null;
    this.webSocket = opts.webSocket;
    this.instrumentsPath = opts.instrumentsPath;
    this.launchTries = 0;
    this.socketConnectDelays = [];
    this.gotFBSOpenApplicationError = false;
    this.onShutdown = new _bluebird.default((resolve, reject) => {
      this.onShutdownDeferred = {
        resolve,
        reject
      };
    });
    this.onShutdown.catch(() => {}).done();
  }

  configure() {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!_this.xcodeVersion) {
        _this.xcodeVersion = yield _appiumXcode.default.getVersion(true);
      }

      if (_this.xcodeVersion.versionFloat === 6.0 && _this.withoutDelay) {
        _logger.default.info('In xcode 6.0, instruments-without-delay does not work. ' + 'If using Appium, you can disable instruments-without-delay ' + 'with the --native-instruments-lib server flag');
      }

      if (_this.xcodeVersion.versionString === '5.0.1') {
        throw new Error('Xcode 5.0.1 ships with a broken version of ' + 'Instruments. please upgrade to 5.0.2');
      }

      if (_this.xcodeVersion.major > 7) {
        throw new Error(`Instruments-based automation was removed in Xcode 8. ` + `Xcode ${_this.xcodeVersion.versionString} is not supported. ` + `Please try the XCUItest driver.`);
      }

      if (!_this.template) {
        _this.template = yield _appiumXcode.default.getAutomationTraceTemplatePath();
      }

      if (!_this.instrumentsPath) {
        _this.instrumentsPath = yield (0, _utils.getInstrumentsPath)();
      }
    })();
  }

  launchOnce() {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.info('Launching instruments');

      yield _appiumSupport.fs.rimraf(_this2.tmpDir);
      yield (0, _appiumSupport.mkdirp)(_this2.tmpDir);
      yield (0, _appiumSupport.mkdirp)(_this2.traceDir);
      _this2.exitListener = null;
      _this2.proc = yield _this2.spawnInstruments();

      _this2.proc.on('exit', (code, signal) => {
        const msg = code !== null ? `code: ${code}` : `signal: ${signal}`;

        _logger.default.debug(`Instruments exited with ${msg}`);
      });

      let launchResultPromise = new _bluebird.default((resolve, reject) => {
        _this2.launchResultDeferred = {
          resolve,
          reject
        };
      });

      _this2.setExitListener(() => {
        _this2.proc = null;

        _this2.launchResultDeferred.reject(new Error(ERR_CRASHED_ON_STARTUP));
      });

      _this2.proc.on('error', err => {
        _logger.default.debug(`Error with instruments proc: ${err.message}`);

        if (err.message.indexOf('ENOENT') !== -1) {
          _this2.proc = null;

          _logger.default.error(`Unable to spawn instruments: ${err.message}`);

          _this2.launchResultDeferred.reject(err);
        }
      });

      _this2.proc.stdout.setEncoding('utf8');

      _this2.proc.stdout.pipe((0, _streams.outputStream)()).pipe((0, _streams.dumpStream)());

      _this2.proc.stderr.setEncoding('utf8');

      let actOnStderr = output => {
        if (_this2.launchTimeout.afterSimLaunch && output && output.match(/CLTilesManagerClient: initialize/)) {
          _this2.addSocketConnectTimer(_this2.launchTimeout.afterSimLaunch, 'afterLaunch', (0, _asyncToGenerator2.default)(function* () {
            yield _this2.killInstruments();

            _this2.launchResultDeferred.reject(new Error(ERR_NEVER_CHECKED_IN));
          }));
        }

        let fbsErrStr = '(FBSOpenApplicationErrorDomain error 8.)';

        if (output.indexOf(fbsErrStr) !== -1) {
          _this2.gotFBSOpenApplicationError = true;
        }

        if (output.indexOf(ERR_AMBIGUOUS_DEVICE) !== -1) {
          let msg = `${ERR_AMBIGUOUS_DEVICE}: '${_this2.simulatorSdkAndDevice}'`;

          _this2.launchResultDeferred.reject(new Error(msg));
        }
      };

      _this2.proc.stderr.pipe((0, _through.through)(function (output) {
        actOnStderr(output);
        this.queue(output);
      })).pipe((0, _streams.errorStream)()).pipe((0, _streams.webSocketAlertStream)(_this2.webSocket)).pipe((0, _streams.dumpStream)());

      _this2.addSocketConnectTimer(_this2.launchTimeout.global, 'global', (0, _asyncToGenerator2.default)(function* () {
        yield _this2.killInstruments();

        _this2.launchResultDeferred.reject(new Error(ERR_NEVER_CHECKED_IN));
      }));

      try {
        yield launchResultPromise;
      } finally {
        _this2.clearSocketConnectTimers();
      }

      _this2.setExitListener((code, signal) => {
        _this2.proc = null;
        const msg = code !== null ? `code: ${code}` : `signal: ${signal}`;

        _this2.onShutdownDeferred.reject(new Error(`Abnormal exit with ${msg}`));
      });
    })();
  }

  launch() {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield _this3.configure();
      let launchTries = 0;

      do {
        launchTries++;

        _logger.default.debug(`Attempting to launch instruments, this is try #${launchTries}`);

        try {
          yield _this3.launchOnce();
          break;
        } catch (err) {
          _logger.default.error(`Error launching instruments: ${err.message}`);

          let errIsCatchable = err.message === ERR_NEVER_CHECKED_IN || err.message === ERR_CRASHED_ON_STARTUP;

          if (!errIsCatchable) {
            throw err;
          }

          if (launchTries <= _this3.flakeyRetries) {
            if (_this3.gotFBSOpenApplicationError) {
              _logger.default.debug('Got the FBSOpenApplicationError, not killing the ' + 'sim but leaving it open so the app will launch');

              _this3.gotFBSOpenApplicationError = false;
              yield _bluebird.default.delay(1000);
            } else {
              if (!_this3.realDevice) {
                yield (0, _appiumIosSimulator.killAllSimulators)();
              }

              yield _bluebird.default.delay(5000);
            }
          } else {
            _logger.default.errorAndThrow('We exceeded the number of retries allowed for ' + 'instruments to successfully start; failing launch');
          }
        }
      } while (true);
    })();
  }

  registerLaunch() {
    this.launchResultDeferred.resolve();
  }

  spawnInstruments() {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let traceDir;

      for (let i = 0;; i++) {
        traceDir = _path.default.resolve(_this4.traceDir, `instrumentscli${i}.trace`);
        if (!(yield _appiumSupport.fs.exists(traceDir))) break;
      }

      let args = ['-t', _this4.template, '-D', traceDir];

      if (_this4.udid) {
        args = args.concat(['-w', _this4.udid]);

        _logger.default.debug(`Attempting to run app on real device with UDID '${_this4.udid}'`);
      }

      if (!_this4.udid && _this4.simulatorSdkAndDevice) {
        args = args.concat(['-w', _this4.simulatorSdkAndDevice]);

        _logger.default.debug(`Attempting to run app on ${_this4.simulatorSdkAndDevice}`);
      }

      args = args.concat([_this4.app]);

      if (_this4.processArguments) {
        _logger.default.debug(`Attempting to run app with process arguments: ${JSON.stringify(_this4.processArguments)}`);

        if (_lodash.default.isString(_this4.processArguments)) {
          if (_this4.processArguments.indexOf('-e ') === -1) {
            _logger.default.debug('Plain string process arguments being pushed into arguments');

            args.push(_this4.processArguments);
          } else {
            _logger.default.debug('Environment variables being pushed into arguments');

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = _this4.processArguments.split('-e ')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                let arg = _step.value;
                arg = arg.trim();

                if (arg.length) {
                  let space = arg.indexOf(' ');
                  let flag = arg.substring(0, space);
                  let value = arg.substring(space + 1);
                  args.push('-e', flag, value);
                }
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
          }
        } else {
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = _lodash.default.toPairs(_this4.processArguments)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              let _step2$value = (0, _slicedToArray2.default)(_step2.value, 2),
                  flag = _step2$value[0],
                  value = _step2$value[1];

              args.push('-e', flag, value);
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }
      }

      args = args.concat(['-e', 'UIASCRIPT', _this4.bootstrap]);
      args = args.concat(['-e', 'UIARESULTSPATH', _this4.tmpDir]);

      if (_this4.language) {
        args = args.concat([`-AppleLanguages (${_this4.language})`]);
        args = args.concat([`-NSLanguages (${_this4.language})`]);
      }

      if (_this4.locale) {
        args = args.concat([`-AppleLocale ${_this4.locale}`]);
      }

      let env = _lodash.default.clone(process.env);

      if (_this4.xcodeVersion.major >= 7 && !_this4.udid) {
        _logger.default.info("On xcode 7.0+, instruments-without-delay does not work, " + "skipping instruments-without-delay");

        _this4.withoutDelay = false;
      }

      let iwdPath = yield (0, _utils.getIwdPath)(_this4.xcodeVersion.major);
      env.CA_DEBUG_TRANSACTIONS = 1;

      if (_this4.withoutDelay && !_this4.udid) {
        env.DYLD_INSERT_LIBRARIES = _path.default.resolve(iwdPath, 'InstrumentsShim.dylib');
        env.LIB_PATH = iwdPath;
      }

      let instrumentsExecArgs = [_this4.instrumentsPath, ...args];
      instrumentsExecArgs = _lodash.default.map(instrumentsExecArgs, function (arg) {
        if (arg === null) {
          throw new Error('A null value was passed as an arg to execute ' + 'instruments on the command line. A letiable is ' + 'probably not getting set. Array of command args: ' + JSON.stringify(instrumentsExecArgs));
        }

        if (_lodash.default.isString(arg) && arg.indexOf(' ') !== -1) {
          return `"${arg}"`;
        }

        return arg;
      });

      _logger.default.debug(`Spawning instruments with command: '${instrumentsExecArgs.join(' ')}'`);

      if (_this4.withoutDelay) {
        _logger.default.debug('And extra without-delay env: ' + JSON.stringify({
          DYLD_INSERT_LIBRARIES: env.DYLD_INSERT_LIBRARIES,
          LIB_PATH: env.LIB_PATH
        }));
      }

      _logger.default.debug(`And launch timeouts (in ms): ${JSON.stringify(_this4.launchTimeout)}`);

      return yield (0, _teen_process.spawn)(_this4.instrumentsPath, args, {
        env
      });
    })();
  }

  addSocketConnectTimer(delay, type, doAction) {
    let socketConnectDelay = (0, _appiumSupport.cancellableDelay)(delay);
    socketConnectDelay.then(() => {
      _logger.default.warn(`Instruments socket client never checked in; timing out (${type})`);

      return doAction();
    }).catch(_bluebird.default.CancellationError, () => {}).done();
    this.socketConnectDelays.push(socketConnectDelay);
  }

  clearSocketConnectTimers() {
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = this.socketConnectDelays[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        let delay = _step3.value;
        delay.cancel();
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    this.socketConnectDelays = [];
  }

  setExitListener(exitListener) {
    if (!this.proc) return;

    if (this.exitListener) {
      this.proc.removeListener('exit', this.exitListener);
    }

    this.exitListener = exitListener;
    this.proc.on('exit', exitListener);
  }

  killInstruments() {
    var _this5 = this;

    if (!this.proc) return;

    _logger.default.debug(`Kill Instruments process (pid: ${this.proc.pid})`);

    return new _bluebird.default(function () {
      var _ref3 = (0, _asyncToGenerator2.default)(function* (resolve) {
        let wasTerminated = false;
        let termDelay = (0, _appiumSupport.cancellableDelay)(_this5.termTimeout);
        let termPromise = termDelay.catch(_bluebird.default.CancellationError, () => {});

        _this5.setExitListener(() => {
          _this5.proc = null;
          wasTerminated = true;
          termDelay.cancel();
          resolve();
        });

        _logger.default.debug('Sending SIGTERM');

        _this5.proc.kill('SIGTERM');

        yield termPromise;

        if (!wasTerminated) {
          _logger.default.warn(`Instruments did not terminate after ${_this5.termTimeout / 1000} seconds!`);

          _logger.default.debug('Sending SIGKILL');

          _this5.proc.kill('SIGKILL');

          if (_lodash.default.isFunction(_this5.exitListener)) {
            _this5.exitListener();
          }
        }
      });

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
  }

  shutdown() {
    var _this6 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug('Starting shutdown.');

      yield _this6.killInstruments();

      _this6.onShutdownDeferred.resolve();
    })();
  }

}

var _default = Instruments;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
