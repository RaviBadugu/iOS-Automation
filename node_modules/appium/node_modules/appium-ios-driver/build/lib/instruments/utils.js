"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.killAllInstruments = killAllInstruments;
exports.cleanAllTraces = cleanAllTraces;
exports.getInstrumentsPath = getInstrumentsPath;
exports.getAvailableDevices = getAvailableDevices;
exports.parseLaunchTimeout = parseLaunchTimeout;
exports.getIwdPath = getIwdPath;
exports.quickLaunch = quickLaunch;
exports.quickInstruments = quickInstruments;
exports.rootDir = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _path = _interopRequireDefault(require("path"));

var _teen_process = require("teen_process");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("./logger"));

var _appiumXcode = _interopRequireDefault(require("appium-xcode"));

var _lodash = _interopRequireDefault(require("lodash"));

var _instruments = _interopRequireDefault(require("./instruments"));

const rootDir = _path.default.resolve(__dirname, '../..');

exports.rootDir = rootDir;
const INST_STALL_TIMEOUT = 12000;

function getInstrumentsPath() {
  return _getInstrumentsPath.apply(this, arguments);
}

function _getInstrumentsPath() {
  _getInstrumentsPath = (0, _asyncToGenerator2.default)(function* () {
    let instrumentsPath;

    try {
      let _ref = yield (0, _teen_process.exec)('xcrun', ['-find', 'instruments']),
          stdout = _ref.stdout;

      instrumentsPath = (stdout || '').trim().replace('\n$', '');
    } catch (err) {
      if (err) {
        _logger.default.error(err.message);
      }
    }

    if (!instrumentsPath) {
      _logger.default.errorAndThrow('Could not find the instruments binary. Please ensure ' + '`xcrun -find instruments` can locate it.');
    }

    _logger.default.debug(`Instruments is at: ${instrumentsPath}`);

    return instrumentsPath;
  });
  return _getInstrumentsPath.apply(this, arguments);
}

function getAvailableDevices() {
  return _getAvailableDevices.apply(this, arguments);
}

function _getAvailableDevices() {
  _getAvailableDevices = (0, _asyncToGenerator2.default)(function* (timeout = INST_STALL_TIMEOUT) {
    _logger.default.debug('Getting list of devices instruments supports');

    let instrumentsPath = yield getInstrumentsPath();
    let opts = {
      timeout
    };
    let lines;

    try {
      let _ref2 = yield (0, _teen_process.exec)(instrumentsPath, ['-s', 'devices'], opts),
          stdout = _ref2.stdout;

      lines = stdout.split('\n');
    } catch (err) {
      _logger.default.errorAndThrow(`Failed getting devices, err: ${err}.`);
    }

    let devices = lines.filter(line => {
      return /^.+ \(\d+\.(\d+\.)?\d+( Simulator)?\) \[.+\]( \(Simulator\))?$/.test(line);
    });

    _logger.default.debug(`Available devices: ${devices}`);

    return devices;
  });
  return _getAvailableDevices.apply(this, arguments);
}

function killAllInstruments() {
  return _killAllInstruments.apply(this, arguments);
}

function _killAllInstruments() {
  _killAllInstruments = (0, _asyncToGenerator2.default)(function* () {
    _logger.default.debug('Killing all instruments');

    try {
      yield (0, _teen_process.exec)('pkill', ['-f', 'instruments']);
    } catch (ign) {}
  });
  return _killAllInstruments.apply(this, arguments);
}

function cleanAllTraces() {
  return _cleanAllTraces.apply(this, arguments);
}

function _cleanAllTraces() {
  _cleanAllTraces = (0, _asyncToGenerator2.default)(function* () {
    if (process.env.CLEAN_TRACES) {
      try {
        yield _appiumSupport.fs.rimraf('instrumentscli*.trace');
      } catch (ign) {}
    }
  });
  return _cleanAllTraces.apply(this, arguments);
}

function parseLaunchTimeout(launchTimeout) {
  if (_lodash.default.isString(launchTimeout)) {
    try {
      launchTimeout = JSON.parse(launchTimeout);
    } catch (err) {
      _logger.default.warn(`Invalid launch timeout: ${launchTimeout}`);
    }
  }

  if (_lodash.default.isNumber(launchTimeout)) {
    launchTimeout = {
      global: launchTimeout
    };
  }

  return launchTimeout;
}

function getIwdPath(_x) {
  return _getIwdPath.apply(this, arguments);
}

function _getIwdPath() {
  _getIwdPath = (0, _asyncToGenerator2.default)(function* (xcodeMajorVersion) {
    let thirdpartyPath = _path.default.resolve(rootDir, '..', 'instruments-iwd');

    let iwdPath = _path.default.resolve(thirdpartyPath, `iwd${xcodeMajorVersion}`);

    if (!(yield _appiumSupport.fs.exists(iwdPath))) {
      iwdPath = _path.default.resolve(thirdpartyPath, 'iwd');
    }

    _logger.default.debug(`Found Insruments-Without-Delay: ${iwdPath}`);

    return iwdPath;
  });
  return _getIwdPath.apply(this, arguments);
}

function quickLaunch(_x2) {
  return _quickLaunch.apply(this, arguments);
}

function _quickLaunch() {
  _quickLaunch = (0, _asyncToGenerator2.default)(function* (udid, appPath = _path.default.resolve(__dirname, '..', '..', 'assets', 'TestApp.app')) {
    let traceTemplatePath = yield _appiumXcode.default.getAutomationTraceTemplatePath();

    let scriptPath = _path.default.resolve(__dirname, '..', '..', 'assets', 'blank_instruments_test.js');

    let traceDocument = _path.default.resolve('/', 'tmp', 'testTrace.trace');

    let resultsPath = _path.default.resolve('/', 'tmp');

    yield _appiumSupport.fs.rimraf(traceDocument);
    let args = ['instruments', '-D', traceDocument, '-t', traceTemplatePath, '-w', udid, appPath, '-e', 'UIASCRIPT', scriptPath, '-e', 'UIARESULTSPATH', resultsPath];

    _logger.default.debug(`Running command: 'xcrun ${args.join(' ')}'`);

    yield (0, _teen_process.exec)('xcrun', args);
  });
  return _quickLaunch.apply(this, arguments);
}

function quickInstruments() {
  return _quickInstruments.apply(this, arguments);
}

function _quickInstruments() {
  _quickInstruments = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    opts = _lodash.default.cloneDeep(opts);
    let xcodeTraceTemplatePath = opts.xcodeTraceTemplatePath || (yield _appiumXcode.default.getAutomationTraceTemplatePath());

    _lodash.default.defaults(opts, {
      launchTimeout: 60000,
      template: xcodeTraceTemplatePath,
      withoutDelay: true,
      xcodeVersion: '8.1',
      webSocket: null,
      flakeyRetries: true,
      logNoColors: false
    });

    return new _instruments.default(opts);
  });
  return _quickInstruments.apply(this, arguments);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
