"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _path = _interopRequireDefault(require("path"));

var _appiumSupport = require("appium-support");

var _lodash = _interopRequireDefault(require("lodash"));

let rootDir = _path.default.resolve(__dirname, '..', '..', '..', 'uiauto');

if (!__dirname.match(/build\/lib\/uiauto/)) {
  rootDir = _path.default.resolve(__dirname, 'uiauto');
}

const importRe = /^#import ('|")([^('|")]+)('|")$/mg;

function getDepsForFile(_x, _x2) {
  return _getDepsForFile.apply(this, arguments);
}

function _getDepsForFile() {
  _getDepsForFile = (0, _asyncToGenerator2.default)(function* (file, filesExamined, extraImports = []) {
    if (_lodash.default.includes(filesExamined, file)) {
      throw new Error(`Re-examining file ${file}; you need to make sure ` + `the graph is set up so we do not require files twice`);
    }

    filesExamined.push(file);
    let data = yield _appiumSupport.fs.readFile(file, 'utf8');
    let deps = {
      [file]: []
    };
    let imports = [];
    let match = importRe.exec(data);

    while (match) {
      if (match) {
        imports.push(match[2]);
      }

      match = importRe.exec(data);
    }

    imports = extraImports.concat(imports);
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = imports[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        let importedFile = _step.value;

        let importedPath = _path.default.resolve(_path.default.dirname(file), importedFile);

        let importedDeps = yield getDepsForFile(importedPath, filesExamined);
        deps[file].push(importedDeps);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return deps;
  });
  return _getDepsForFile.apply(this, arguments);
}

function buildScriptFromDeps(_x3) {
  return _buildScriptFromDeps.apply(this, arguments);
}

function _buildScriptFromDeps() {
  _buildScriptFromDeps = (0, _asyncToGenerator2.default)(function* (deps) {
    let script = '';
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = _lodash.default.toPairs(deps)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        let _step2$value = (0, _slicedToArray2.default)(_step2.value, 2),
            file = _step2$value[0],
            subDepsArray = _step2$value[1];

        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = subDepsArray[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            let subDeps = _step3.value;
            script += yield buildScriptFromDeps(subDeps);
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        let fileContents = yield _appiumSupport.fs.readFile(file, 'utf8');
        let newFileData = stripImports(fileContents);
        let fileWithoutRoot = file.replace(`${rootDir}/`, '');
        script += `\n/* begin file: ${fileWithoutRoot} */\n`;
        script += newFileData;
        script += `\n/* end file: ${fileWithoutRoot} */\n`;
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return script;
  });
  return _buildScriptFromDeps.apply(this, arguments);
}

function stripImports(data) {
  data = data.replace(importRe, '');
  data = data.trim();
  return data;
}

function buildScript(_x4) {
  return _buildScript.apply(this, arguments);
}

function _buildScript() {
  _buildScript = (0, _asyncToGenerator2.default)(function* (entryPoint, extraImports = []) {
    let filesExamined = [];
    let deps = yield getDepsForFile(entryPoint, filesExamined, extraImports);
    let script = yield buildScriptFromDeps(deps);
    return script;
  });
  return _buildScript.apply(this, arguments);
}

var _default = buildScript;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91aWF1dG8vYnVpbGQtc2NyaXB0LmpzIl0sIm5hbWVzIjpbInJvb3REaXIiLCJwYXRoIiwicmVzb2x2ZSIsIl9fZGlybmFtZSIsIm1hdGNoIiwiaW1wb3J0UmUiLCJnZXREZXBzRm9yRmlsZSIsImZpbGUiLCJmaWxlc0V4YW1pbmVkIiwiZXh0cmFJbXBvcnRzIiwiXyIsImluY2x1ZGVzIiwiRXJyb3IiLCJwdXNoIiwiZGF0YSIsImZzIiwicmVhZEZpbGUiLCJkZXBzIiwiaW1wb3J0cyIsImV4ZWMiLCJjb25jYXQiLCJpbXBvcnRlZEZpbGUiLCJpbXBvcnRlZFBhdGgiLCJkaXJuYW1lIiwiaW1wb3J0ZWREZXBzIiwiYnVpbGRTY3JpcHRGcm9tRGVwcyIsInNjcmlwdCIsInRvUGFpcnMiLCJzdWJEZXBzQXJyYXkiLCJzdWJEZXBzIiwiZmlsZUNvbnRlbnRzIiwibmV3RmlsZURhdGEiLCJzdHJpcEltcG9ydHMiLCJmaWxlV2l0aG91dFJvb3QiLCJyZXBsYWNlIiwidHJpbSIsImJ1aWxkU2NyaXB0IiwiZW50cnlQb2ludCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUdBLElBQUlBLE9BQU8sR0FBR0MsY0FBS0MsT0FBTCxDQUFhQyxTQUFiLEVBQXdCLElBQXhCLEVBQThCLElBQTlCLEVBQW9DLElBQXBDLEVBQTBDLFFBQTFDLENBQWQ7O0FBQ0EsSUFBSSxDQUFDQSxTQUFTLENBQUNDLEtBQVYsQ0FBZ0Isb0JBQWhCLENBQUwsRUFBNEM7QUFDMUNKLEVBQUFBLE9BQU8sR0FBR0MsY0FBS0MsT0FBTCxDQUFhQyxTQUFiLEVBQXdCLFFBQXhCLENBQVY7QUFDRDs7QUFHRCxNQUFNRSxRQUFRLEdBQUcsbUNBQWpCOztTQUVlQyxjOzs7OztvREFBZixXQUErQkMsSUFBL0IsRUFBcUNDLGFBQXJDLEVBQW9EQyxZQUFZLEdBQUcsRUFBbkUsRUFBdUU7QUFFckUsUUFBSUMsZ0JBQUVDLFFBQUYsQ0FBV0gsYUFBWCxFQUEwQkQs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LEVBQXZCLENBQVA7QUFDQVMsRUFBQUEsSUFBSSxHQUFHQSxJQUFJLENBQUNxQixJQUFMLEVBQVA7QUFDQSxTQUFPckIsSUFBUDtBQUNEOztTQUVjc0IsVzs7Ozs7aURBQWYsV0FBNEJDLFVBQTVCLEVBQXdDNUIsWUFBWSxHQUFHLEVBQXZELEVBQTJEO0FBR3pELFFBQUlELGFBQWEsR0FBRyxFQUFwQjtBQUVBLFFBQUlTLElBQUksU0FBU1gsY0FBYyxDQUFDK0IsVUFBRCxFQUFhN0IsYUFBYixFQUE0QkMsWUFBNUIsQ0FBL0I7QUFDQSxRQUFJaUIsTUFBTSxTQUFVRCxtQkFBbUIsQ0FBQ1IsSUFBRCxDQUF2QztBQUNBLFdBQU9TLE1BQVA7QUFDRCxHOzs7O2VBRWNVLFciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGZzIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuXG5sZXQgcm9vdERpciA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICcuLicsICcuLicsICd1aWF1dG8nKTtcbmlmICghX19kaXJuYW1lLm1hdGNoKC9idWlsZFxcL2xpYlxcL3VpYXV0by8pKSB7XG4gIHJvb3REaXIgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAndWlhdXRvJyk7XG59XG5cbi8vIHRoaXMgcmVnZXggaGVscHMgdXMgZ2V0IHRoZSBmaWxlIHBhdGggb2YgYW4gaW1wb3J0XG5jb25zdCBpbXBvcnRSZSA9IC9eI2ltcG9ydCAoJ3xcIikoW14oJ3xcIildKykoJ3xcIikkL21nO1xuXG5hc3luYyBmdW5jdGlvbiBnZXREZXBzRm9yRmlsZSAoZmlsZSwgZmlsZXNFeGFtaW5lZCwgZXh0cmFJbXBvcnRzID0gW10pIHtcbiAgLy8gbWFrZSBzdXJlIHdlIGRvbid0IGhhdmUgYSBjeWNsZSBpbiBvdXIgZGVwZW5kZW5jaWVzXG4gIGlmIChfLmluY2x1ZGVzKGZpbGVzRXhhbWluZWQsIGZpbGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBSZS1leGFtaW5pbmcgZmlsZSAke2ZpbGV9OyB5b3UgbmVlZCB0byBtYWtlIHN1cmUgYCArXG4gICAgICAgICAgICAgICAgICAgIGB0aGUgZ3JhcGggaXMgc2V0IHVwIHNvIHdlIGRvIG5vdCByZXF1aXJlIGZpbGVzIHR3aWNlYCk7XG4gIH1cblxuICAvLyBzYXZlIHRoZSBmaWxlIHNvIHdlIGRvbid0IGxvb2sgYXQgaXQgYWdhaW5cbiAgZmlsZXNFeGFtaW5lZC5wdXNoKGZpbGUpO1xuICBsZXQgZGF0YSA9IGF3YWl0IGZzLnJlYWRGaWxlKGZpbGUsICd1dGY4Jyk7XG4gIGxldCBkZXBzID0ge1xuICAgIFtmaWxlXTogW11cbiAgfTtcblxuICAvLyBjaGVjayBmb3IgaW1wb3J0IHN0YXRlbWVudHMgaW4gdGhlIGZpbGUsIGFuZCBtYWtlIGEgbGlzdCBvZiB0aGVtXG4gIGxldCBpbXBvcnRzID0gW107XG4gIGxldCBtYXRjaCA9IGltcG9ydFJlLmV4ZWMoZGF0YSk7XG4gIHdoaWxlIChtYXRjaCkge1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgaW1wb3J0cy5wdXNoKG1hdGNoWzJdKTtcbiAgICB9XG4gICAgbWF0Y2ggPSBpbXBvcnRSZS5leGVjKGRhdGEpO1xuICB9XG4gIC8vIGFkZCBpbiBhbnkgZXh0cmEgaW1wb3J0cyBzZW50IGluXG4gIGltcG9ydHMgPSBleHRyYUltcG9ydHMuY29uY2F0KGltcG9ydHMpO1xuXG4gIC8vIGdvIHRocm91Z2ggYWxsIHRoZSBpbXBvcnRzIGZvciB0aGUgZmlsZSwgYW5kIGRvIHRoZSBzYW1lIHByb2Nlc3NcbiAgZm9yIChsZXQgaW1wb3J0ZWRGaWxlIG9mIGltcG9ydHMpIHtcbiAgICBsZXQgaW1wb3J0ZWRQYXRoID0gcGF0aC5yZXNvbHZlKHBhdGguZGlybmFtZShmaWxlKSwgaW1wb3J0ZWRGaWxlKTtcbiAgICAvLyByZWN1cnNpdmVseSBnZXQgZGVwZW5kZW5jaWVzIGZvciBpbXBvcnRlZCBmaWxlc1xuICAgIGxldCBpbXBvcnRlZERlcHMgPSBhd2FpdCBnZXREZXBzRm9yRmlsZShpbXBvcnRlZFBhdGgsIGZpbGVzRXhhbWluZWQpO1xuICAgIGRlcHNbZmlsZV0ucHVzaChpbXBvcnRlZERlcHMpO1xuICB9XG5cbiAgcmV0dXJuIGRlcHM7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGJ1aWxkU2NyaXB0RnJvbURlcHMgKGRlcHMpIHtcbiAgbGV0IHNjcmlwdCA9ICcnO1xuICAvLyBnbyB0aHJvdWdoIGFsbCB0aGUgZGVwZW5kZW5jaWVzIGFuZCByZWN1cnNpdmVseVxuICAvLyBhZGQgdGhlbSB0byBvdXIgc2NyaXB0IHN0cmluZ1xuICBmb3IgKGxldCBbZmlsZSwgc3ViRGVwc0FycmF5XSBvZiBfLnRvUGFpcnMoZGVwcykpIHtcbiAgICBmb3IgKGxldCBzdWJEZXBzIG9mIHN1YkRlcHNBcnJheSkge1xuICAgICAgc2NyaXB0ICs9IGF3YWl0IGJ1aWxkU2NyaXB0RnJvbURlcHMoc3ViRGVwcyk7XG4gICAgfVxuICAgIGxldCBmaWxlQ29udGVudHMgPSBhd2FpdCBmcy5yZWFkRmlsZShmaWxlLCAndXRmOCcpO1xuICAgIGxldCBuZXdGaWxlRGF0YSA9IHN0cmlwSW1wb3J0cyhmaWxlQ29udGVudHMpO1xuXG4gICAgbGV0IGZpbGVXaXRob3V0Um9vdCA9IGZpbGUucmVwbGFjZShgJHtyb290RGlyfS9gLCAnJyk7XG4gICAgc2NyaXB0ICs9IGBcXG4vKiBiZWdpbiBmaWxlOiAke2ZpbGVXaXRob3V0Um9vdH0gKi9cXG5gO1xuICAgIHNjcmlwdCArPSBuZXdGaWxlRGF0YTtcbiAgICBzY3JpcHQgKz0gYFxcbi8qIGVuZCBmaWxlOiAke2ZpbGVXaXRob3V0Um9vdH0gKi9cXG5gO1xuICB9XG4gIHJldHVybiBzY3JpcHQ7XG59XG5cbmZ1bmN0aW9uIHN0cmlwSW1wb3J0cyAoZGF0YSkge1xuICAvLyBnZXQgcmlkIG9mIHRoZSBpbXBvcnQgc3RhdGVtZW50cyBmcm9tIHRoZSBzdHJpbmdcbiAgZGF0YSA9IGRhdGEucmVwbGFjZShpbXBvcnRSZSwgJycpO1xuICBkYXRhID0gZGF0YS50cmltKCk7XG4gIHJldHVybiBkYXRhO1xufVxuXG5hc3luYyBmdW5jdGlvbiBidWlsZFNjcmlwdCAoZW50cnlQb2ludCwgZXh0cmFJbXBvcnRzID0gW10pIHtcbiAgLy8ga2VlcCBhIGxpc3Qgb2YgZmlsZXMgd2UgZXhhbWluZSBmb3IgdGhlIHB1cnBvc2VzIG9mIG1ha2luZyBzdXJlIHdlJ3JlXG4gIC8vIG5vdCBhZGRpbmcgdGhlIHNhbWUgZmlsZSB0byB0aGUgY29sbGF0ZWQgdmVyc2lvbiB0d2ljZVxuICBsZXQgZmlsZXNFeGFtaW5lZCA9IFtdO1xuXG4gIGxldCBkZXBzID0gYXdhaXQgZ2V0RGVwc0ZvckZpbGUoZW50cnlQb2ludCwgZmlsZXNFeGFtaW5lZCwgZXh0cmFJbXBvcnRzKTtcbiAgbGV0IHNjcmlwdCA9ICBhd2FpdCBidWlsZFNjcmlwdEZyb21EZXBzKGRlcHMpO1xuICByZXR1cm4gc2NyaXB0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBidWlsZFNjcmlwdDtcbiJdLCJmaWxlIjoibGliL3VpYXV0by9idWlsZC1zY3JpcHQuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
