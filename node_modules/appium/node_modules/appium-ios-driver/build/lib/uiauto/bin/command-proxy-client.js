#!/usr/bin/env node
"use strict";

var net = require('net');

var output = '';

function exit(status) {
  console.log('----- OUTPUT -----');
  console.log(output);
  process.nextTick(function () {
    process.exit(status);
  });
}

function connect(sock, dataFromInstruments) {
  var client = net.connect({
    path: sock
  }, function () {
    if (dataFromInstruments && dataFromInstruments.length > 0) {
      console.log('Data from instruments to command proxy:');
      console.log(dataFromInstruments.substring(0, 100));
    }

    client.end(dataFromInstruments, "utf8");
  });
  client.setEncoding('utf8');
  client.on('data', function (dataFromCommandProxy) {
    console.log('Data from command proxy to instruments: ' + dataFromCommandProxy);
    output += dataFromCommandProxy;
  });
  client.on('error', function (err) {
    console.log('Error from command proxy to instruments: ' + err);
  });
  client.on('end', function () {
    client.end();
    exit(0);
  });
}

try {
  console.log('----- LOGS -----');
  connect(process.argv[2], process.argv[3]);
} catch (err) {
  console.log('An error occured: ' + (err || "").toString());
  exit(1);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91aWF1dG8vYmluL2NvbW1hbmQtcHJveHktY2xpZW50LmpzIl0sIm5hbWVzIjpbIm5ldCIsInJlcXVpcmUiLCJvdXRwdXQiLCJleGl0Iiwic3RhdHVzIiwiY29uc29sZSIsImxvZyIsInByb2Nlc3MiLCJuZXh0VGljayIsImNvbm5lY3QiLCJzb2NrIiwiZGF0YUZyb21JbnN0cnVtZW50cyIsImNsaWVudCIsInBhdGgiLCJsZW5ndGgiLCJzdWJzdHJpbmciLCJlbmQiLCJzZXRFbmNvZGluZyIsIm9uIiwiZGF0YUZyb21Db21tYW5kUHJveHkiLCJlcnIiLCJhcmd2IiwidG9TdHJpbmciXSwibWFwcGluZ3MiOiJBQUFBO0FBZUE7O0FBRUEsSUFBSUEsR0FBRyxHQUFHQyxPQUFPLENBQUMsS0FBRCxDQUFqQjs7QUFFQSxJQUFJQyxNQUFNLEdBQUcsRUFBYjs7QUFFQSxTQUFTQyxJQUFULENBQWVDLE1BQWYsRUFBdUI7QUFDckJDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLG9CQUFaO0FBQ0FELEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSixNQUFaO0FBRUFLLEVBQUFBLE9BQU8sQ0FBQ0MsUUFBUixDQUFpQixZQUFZO0FBQzNCRCxJQUFBQSxPQUFPLENBQUNKLElBQVIsQ0FBYUMsTUFBYjtBQUNELEdBRkQ7QUFHRDs7QUFFRCxTQUFTSyxPQUFULENBQWtCQyxJQUFsQixFQUF3QkMsbUJBQXhCLEVBQTZDO0FBQzNDLE1BQUlDLE1BQU0sR0FBR1osR0FBRyxDQUFDUyxPQUFKLENBQVk7QUFBQ0ksSUFBQUEsSUFBSSxFQUFFSDtBQUFQLEdBQVosRUFBMEIsWUFBWTtBQUNqRCxRQUFJQyxtQkFBbUIsSUFBSUEsbUJBQW1CLENBQUNHLE1BQXBCLEdBQTZCLENBQXhELEVBQTBEO0FBQ3hEVCxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSx5Q0FBWjtBQUNBRCxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUssbUJBQW1CLENBQUNJLFNBQXBCLENBQThCLENBQTlCLEVBQWlDLEdBQWpDLENBQVo7QUFDRDs7QUFDREgsSUFBQUEsTUFBTSxDQUFDSSxHQUFQLENBQVdMLG1CQUFYLEVBQWdDLE1BQWhDO0FBQ0QsR0FOWSxDQUFiO0FBT0FDLEVBQUFBLE1BQU0sQ0FBQ0ssV0FBUCxDQUFtQixNQUFuQjtBQUNBTCxFQUFBQSxNQUFNLENBQUNNLEVBQVAsQ0FBVSxNQUFWLEVBQWtCLFVBQVVDLG9CQUFWLEVBQWdDO0FBQ2hEZCxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSw2Q0FBNkNhLG9CQUF6RDtBQUNBakIsSUFBQUEsTUFBTSxJQUFJaUIsb0JBQVY7QUFDRCxHQUhEO0FBSUFQLEVBQUFBLE1BQU0sQ0FBQ00sRUFBUCxDQUFVLE9BQVYsRUFBbUIsVUFBVUUsR0FBVixFQUFlO0FBQ2hDZixJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSw4Q0FBOENjLEdBQTFEO0FBQ0QsR0FGRDtBQUdBUixFQUFBQSxNQUFNLENBQUNNLEVBQVAsQ0FBVSxLQUFWLEVBQWlCLFlBQVk7QUFDM0JOLElBQUFBLE1BQU0sQ0FBQ0ksR0FBUDtBQUNBYixJQUFBQSxJQUFJLENBQUMsQ0FBRCxDQUFKO0FBQ0QsR0FIRDtBQUlEOztBQUVELElBQUk7QUFDRkUsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksa0JBQVo7QUFDQUcsRUFBQUEsT0FBTyxDQUFDRixPQUFPLENBQUNjLElBQVIsQ0FBYSxDQUFiLENBQUQsRUFBa0JkLE9BQU8sQ0FBQ2MsSUFBUixDQUFhLENBQWIsQ0FBbEIsQ0FBUDtBQUNELENBSEQsQ0FHRSxPQUFPRCxHQUFQLEVBQVk7QUFDWmYsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksdUJBQXVCLENBQUNjLEdBQUcsSUFBSSxFQUFSLEVBQVlFLFFBQVosRUFBbkM7QUFDQW5CLEVBQUFBLElBQUksQ0FBQyxDQUFELENBQUo7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcblxuLy8gVGhpcyBzY3JpcHQgaXMgdXNlZCBieSB0aGUgVUlBdXRvIGpvYiwgcnVubmluZyBvbiBJbnN0cnVtZW50cywgdG8gY29ubmVjdFxuLy8gdG8gdGhlIENvbW1hbmQgUHJveHkuIEl0IHRyYW5zbWl0cyB0aGUgSW5zdHJ1bWVudHMgbWVzc2FnZXMgZXhhY3RseSBhcyB0aGV5XG4vLyBjb21lIGluLiBCZWNhdXNlIHN0ZGVyciBpcyB1bnJlbGlhYmxlLCB3ZSBhcHBlbmQgbG9ncyBhbmQgcHJvZ3JhbSBvdXRwdXRcbi8vIGJlZm9yZSBzZW5kaW5nIHRoZW0gdG8gdGhlIFVJQXV0byBzY3JpcHQgaW4gdGhlIGZvbGxvd2luZyBmb3JtOlxuLy8gLS0tLS0gTE9HUyAtLS0tLVxuLy8gYmxhaCBibGFoIGJsYWguLi5cbi8vIGJsYWggYmxhaCBibGFoLi4uXG4vLyAtLS0tLSBPVVRQVVQgLS0tLS1cbi8vIDxPVVRQVVQ+XG5cbi8vIFRoaXMgc2NyaXB0IGlzIHJ1biBvbiB0aGUgZGV2aWNlLCBhbmQgYXMgc3VjaCBpcyBub3QgRVM2LiBQcm9ibGVtcyBjYW5cbi8vIGVuc3VlIGlmIGl0IGlzIHRyYW5zcGlsZWQuXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgbmV0ID0gcmVxdWlyZSgnbmV0Jyk7XG5cbnZhciBvdXRwdXQgPSAnJztcblxuZnVuY3Rpb24gZXhpdCAoc3RhdHVzKSB7XG4gIGNvbnNvbGUubG9nKCctLS0tLSBPVVRQVVQgLS0tLS0nKTtcbiAgY29uc29sZS5sb2cob3V0cHV0KTtcbiAgLy8gY2hpbGwgb3V0IGJlZm9yZSBleGl0aW5nXG4gIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZXhpdChzdGF0dXMpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY29ubmVjdCAoc29jaywgZGF0YUZyb21JbnN0cnVtZW50cykge1xuICB2YXIgY2xpZW50ID0gbmV0LmNvbm5lY3Qoe3BhdGg6IHNvY2t9LCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGRhdGFGcm9tSW5zdHJ1bWVudHMgJiYgZGF0YUZyb21JbnN0cnVtZW50cy5sZW5ndGggPiAwKXtcbiAgICAgIGNvbnNvbGUubG9nKCdEYXRhIGZyb20gaW5zdHJ1bWVudHMgdG8gY29tbWFuZCBwcm94eTonKTtcbiAgICAgIGNvbnNvbGUubG9nKGRhdGFGcm9tSW5zdHJ1bWVudHMuc3Vic3RyaW5nKDAsIDEwMCkpO1xuICAgIH1cbiAgICBjbGllbnQuZW5kKGRhdGFGcm9tSW5zdHJ1bWVudHMsIFwidXRmOFwiKTtcbiAgfSk7XG4gIGNsaWVudC5zZXRFbmNvZGluZygndXRmOCcpO1xuICBjbGllbnQub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YUZyb21Db21tYW5kUHJveHkpIHtcbiAgICBjb25zb2xlLmxvZygnRGF0YSBmcm9tIGNvbW1hbmQgcHJveHkgdG8gaW5zdHJ1bWVudHM6ICcgKyBkYXRhRnJvbUNvbW1hbmRQcm94eSk7XG4gICAgb3V0cHV0ICs9IGRhdGFGcm9tQ29tbWFuZFByb3h5O1xuICB9KTtcbiAgY2xpZW50Lm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBjb25zb2xlLmxvZygnRXJyb3IgZnJvbSBjb21tYW5kIHByb3h5IHRvIGluc3RydW1lbnRzOiAnICsgZXJyKTtcbiAgfSk7XG4gIGNsaWVudC5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgIGNsaWVudC5lbmQoKTtcbiAgICBleGl0KDApO1xuICB9KTtcbn1cblxudHJ5IHtcbiAgY29uc29sZS5sb2coJy0tLS0tIExPR1MgLS0tLS0nKTtcbiAgY29ubmVjdChwcm9jZXNzLmFyZ3ZbMl0sIHByb2Nlc3MuYXJndlszXSk7XG59IGNhdGNoIChlcnIpIHtcbiAgY29uc29sZS5sb2coJ0FuIGVycm9yIG9jY3VyZWQ6ICcgKyAoZXJyIHx8IFwiXCIpLnRvU3RyaW5nKCkpO1xuICBleGl0KDEpO1xufVxuLy8gfSk7XG5cbiJdLCJmaWxlIjoibGliL3VpYXV0by9iaW4vY29tbWFuZC1wcm94eS1jbGllbnQuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4ifQ==
