"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DEFAULT_INSTRUMENTS_SOCKET = exports.UIAutoClient = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _uiautoResponse = _interopRequireDefault(require("./uiauto-response"));

var _logger = _interopRequireDefault(require("./logger"));

var _through = _interopRequireDefault(require("through"));

var _net = _interopRequireDefault(require("net"));

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

const MORE_COMMAND = '#more';
const DEFAULT_INSTRUMENTS_SOCKET = '/tmp/instruments_sock';
exports.DEFAULT_INSTRUMENTS_SOCKET = DEFAULT_INSTRUMENTS_SOCKET;

class UIAutoClient {
  constructor(sock = '/tmp/instruments_sock') {
    this.curCommand = null;
    this.onReceiveCommand = null;
    this.commandQueue = [];
    this.sock = sock;
    this.socketServer = null;
    this.hasConnected = false;
    this.currentSocket = null;
  }

  sendCommand(cmd) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let cmdPromise = new _bluebird.default((resolve, reject) => {
        let cb = result => {
          if (result.status === 0) {
            resolve(result.value);
          } else if (result.status) {
            let jsonwpError = (0, _appiumBaseDriver.errorFromCode)(result.status, result.value);
            reject(jsonwpError);
          } else {
            reject(new Error(result.value));
          }
        };

        _this.commandQueue.push({
          cmd,
          cb
        });

        if (_lodash.default.isFunction(_this.onReceiveCommand)) {
          _this.onReceiveCommand();
        }
      });
      return yield cmdPromise;
    })();
  }

  start() {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let connectedPromise = new _bluebird.default(resolve => {
        let response = new _uiautoResponse.default();
        _this2.socketServer = _net.default.createServer({
          allowHalfOpen: true
        }, conn => {
          if (!_this2.hasConnected) {
            _this2.hasConnected = true;

            _logger.default.info('Instruments is ready to receive commands');

            resolve(true);
          }

          conn.setEncoding('utf8');
          _this2.currentSocket = conn;
          conn.on('close', () => {
            _this2.currentSocket = null;
          });
          conn.pipe((0, _through.default)(data => {
            _logger.default.debug(`Socket data received (${data.length} bytes)`);

            response.addData(data);
          }));
          conn.on('end', () => {
            if (_this2.curCommand) {
              let result = response.getResult();

              if (result && !result.needsMoreData) {
                _this2.curCommand.cb(result);

                _this2.curCommand = null;
              } else {
                if (result) {
                  _logger.default.debug('Not the last chunk, trying to get more');
                } else {
                  _logger.default.debug('No result received. Continuing to try to get more');
                }

                _this2.commandQueue.unshift({
                  cmd: MORE_COMMAND,
                  cb: _this2.curCommand.cb
                });
              }
            } else {
              _logger.default.debug('Got a result when we were not expecting one! Ignoring it');

              response.resetBuffer();
            }

            let onReceiveCommand = () => {
              _this2.onReceiveCommand = null;
              _this2.curCommand = _this2.commandQueue.shift();

              _logger.default.debug(`Sending command to instruments: ${_this2.curCommand.cmd}`);

              conn.write(JSON.stringify({
                cmd: _this2.curCommand.cmd
              }));
              conn.end();
            };

            if (_this2.commandQueue.length) {
              onReceiveCommand();
            } else {
              _this2.onReceiveCommand = onReceiveCommand;
            }
          });
        });

        _this2.socketServer.on('close', function () {
          _logger.default.debug('Instruments socket server was closed');
        });
      });
      yield _appiumSupport.fs.rimraf(_this2.sock);
      yield (0, _appiumSupport.mkdirp)(_path.default.dirname(_this2.sock));

      _this2.socketServer.listen(_this2.sock);

      _logger.default.debug(`Instruments socket server started at ${_this2.sock}`);

      return yield connectedPromise;
    })();
  }

  shutdown() {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this3.curCommand = null;
      _this3.onReceiveCommand = null;

      if (_this3.currentSocket) {
        _logger.default.debug('Destroying instruments client socket.');

        _this3.currentSocket.end();

        _this3.currentSocket.destroy();

        _this3.currentSocket = null;
      }

      if (_this3.socketServer) {
        _logger.default.debug('Closing socket server.');

        yield _bluebird.default.promisify(_this3.socketServer.close, {
          context: _this3.socketServer
        })();
        _this3.socketServer = null;
      }
    })();
  }

  safeShutdown() {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug('Shutting down command proxy and ignoring any errors');

      try {
        yield _this4.shutdown();
      } catch (err) {
        _logger.default.debug(`Ignoring error: ${err}`);
      }
    })();
  }

}

exports.UIAutoClient = UIAutoClient;
var _default = UIAutoClient;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91aWF1dG8vdWlhdXRvLWNsaWVudC5qcyJdLCJuYW1lcyI6WyJNT1JFX0NPTU1BTkQiLCJERUZBVUxUX0lOU1RSVU1FTlRTX1NPQ0tFVCIsIlVJQXV0b0NsaWVudCIsImNvbnN0cnVjdG9yIiwic29jayIsImN1ckNvbW1hbmQiLCJvblJlY2VpdmVDb21tYW5kIiwiY29tbWFuZFF1ZXVlIiwic29ja2V0U2VydmVyIiwiaGFzQ29ubmVjdGVkIiwiY3VycmVudFNvY2tldCIsInNlbmRDb21tYW5kIiwiY21kIiwiY21kUHJvbWlzZSIsIkIiLCJyZXNvbHZlIiwicmVqZWN0IiwiY2IiLCJyZXN1bHQiLCJzdGF0dXMiLCJ2YWx1ZSIsImpzb253cEVycm9yIiwiRXJyb3IiLCJwdXNoIiwiXyIsImlzRnVuY3Rpb24iLCJzdGFydCIsImNvbm5lY3RlZFByb21pc2UiLCJyZXNwb25zZSIsIlVJQXV0b1Jlc3BvbnNlIiwibmV0IiwiY3JlYXRlU2VydmVyIiwiYWxsb3dIYWxmT3BlbiIsImNvbm4iLCJsb2dnZXIiLCJpbmZvIiwic2V0RW5jb2RpbmciLCJvbiIsInBpcGUiLCJkYXRhIiwiZGVidWciLCJsZW5ndGgiLCJhZGREYXRhIiwiZ2V0UmVzdWx0IiwibmVlZHNNb3JlRGF0YSIsInVuc2hpZnQiLCJyZXNldEJ1ZmZlciIsInNoaWZ0Iiwid3JpdGUiLCJKU09OIiwic3RyaW5naWZ5IiwiZW5kIiwiZnMiLCJyaW1yYWYiLCJwYXRoIiwiZGlybmFtZSIsImxpc3RlbiIsInNodXRkb3duIiwiZGVzdHJveSIsInByb21pc2lmeSIsImNsb3NlIiwiY29udGV4dCIsInNhZmVTaHV0ZG93biIsImVyciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFlQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSxZQUFZLEdBQUcsT0FBckI7QUFDQSxNQUFNQywwQkFBMEIsR0FBRyx1QkFBbkM7OztBQUVBLE1BQU1DLFlB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QUFDQSxjQUFPMUIsa0JBQUU2QyxTQUFGLENBQVksTUFBSSxDQUFDbkQsWUFBTCxDQUFrQm9ELEtBQTlCLEVBQXFDO0FBQUNDLFVBQUFBLE9BQU8sRUFBRSxNQUFJLENBQUNyRDtBQUFmLFNBQXJDLENBQUQsRUFBTjtBQUNBLFFBQUEsTUFBSSxDQUFDQSxZQUFMLEdBQW9CLElBQXBCO0FBQ0Q7QUFoQmU7QUFpQmpCOztBQUVLc0QsRUFBQUEsWUFBTixHQUFzQjtBQUFBOztBQUFBO0FBQ3BCNUIsc0JBQU9NLEtBQVAsQ0FBYSxxREFBYjs7QUFDQSxVQUFJO0FBQ0YsY0FBTSxNQUFJLENBQUNpQixRQUFMLEVBQU47QUFDRCxPQUZELENBRUUsT0FBT00sR0FBUCxFQUFZO0FBQ1o3Qix3QkFBT00sS0FBUCxDQUFjLG1CQUFrQnVCLEdBQUksRUFBcEM7QUFDRDtBQU5tQjtBQU9yQjs7QUFuSmdCOzs7ZUF1Sko3RCxZIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlIENvbW1hbmQgUHJveHkgcmVsYXlzIFVJQXV0byBtZXNzYWdlIHRvIGFuZCBmcm9tIEFwcGl1bS4gSXQgaXMgYWxzbyB0aGVcbi8vIFVJQXV0byBmYWNhZGUgZm9yIEFwcGl1bS5cbi8vXG4vLyBUaGUgbWVzc2FnZSByb3V0ZSBpcyB0aGUgZm9sbG93aW5nOlxuLy8gQXBwaXVtIDwtLT4gQ29tbWFuZCBQcm94eSA8LS0+IEluc3RydW1lbnRzXG4vLyBUaGUgbWVkaXVtIGJldHdlZW4gSW5zdHJ1bWVudHMgYW5kIENvbW1hbmQgUHJveHkgaXMgdGhlIGNvbW1hbmQtcHJveHktY2xpZW50XG4vLyBzY3JpcHQuXG4vL1xuLy8gQ29tbWFuZCBQcm94eSAtLT4gSW5zdHJ1bWVudHMgbWVzc2FnZSBmb3JtYXQ6IHtjbWQ6XCI8Q01EPlwifVxuLy9cbi8vIEluc3RydW1lbnRzIC0tPiBDb21tYW5kIFByb3h5IG1lc3NhZ2UgZm9ybWF0OlxuLy8gPG9uZSBjaGFyIG1lc3NhZ2UgdHlwZT4sPHN0cmluZ2lmaWVkIGpzb24gZGF0YT5cbi8vIDxzdHJpbmdpZmllZCBqc29uIGRhdGE+IGZvcm1hdDpcbi8vIHtzdGF0dXM6PHN0YXR1cz4sIHZhbHVlOjxyZXN1bHQ+fVxuXG5pbXBvcnQgVUlBdXRvUmVzcG9uc2UgZnJvbSAnLi91aWF1dG8tcmVzcG9uc2UnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgdGhyb3VnaCBmcm9tICd0aHJvdWdoJztcbmltcG9ydCBuZXQgZnJvbSAnbmV0JztcbmltcG9ydCB7IG1rZGlycCwgZnMgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBlcnJvckZyb21Db2RlIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcblxuXG5jb25zdCBNT1JFX0NPTU1BTkQgPSAnI21vcmUnO1xuY29uc3QgREVGQVVMVF9JTlNUUlVNRU5UU19TT0NLRVQgPSAnL3RtcC9pbnN0cnVtZW50c19zb2NrJztcblxuY2xhc3MgVUlBdXRvQ2xpZW50IHtcbiAgY29uc3RydWN0b3IgKHNvY2sgPSAnL3RtcC9pbnN0cnVtZW50c19zb2NrJykge1xuICAgIHRoaXMuY3VyQ29tbWFuZCA9IG51bGw7XG4gICAgdGhpcy5vblJlY2VpdmVDb21tYW5kID0gbnVsbDtcbiAgICB0aGlzLmNvbW1hbmRRdWV1ZSA9IFtdO1xuICAgIHRoaXMuc29jayA9IHNvY2s7XG4gICAgdGhpcy5zb2NrZXRTZXJ2ZXIgPSBudWxsO1xuICAgIHRoaXMuaGFzQ29ubmVjdGVkID0gZmFsc2U7XG4gICAgdGhpcy5jdXJyZW50U29ja2V0ID0gbnVsbDtcbiAgfVxuXG4gIGFzeW5jIHNlbmRDb21tYW5kIChjbWQpIHtcbiAgICBsZXQgY21kUHJvbWlzZSA9IG5ldyBCKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGxldCBjYiA9IChyZXN1bHQpID0+IHtcbiAgICAgICAgLy8gZ2V0IGJhY2sgYSBKU09OV1Agb2JqZWN0LCBzbyBkZWNvZGUgYW5kXG4gICAgICAgIC8vIGp1c3QgcmV0dXJuIHRoZSB2YWx1ZVxuICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gMCkge1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IGpzb253cEVycm9yID0gZXJyb3JGcm9tQ29kZShyZXN1bHQuc3RhdHVzLCByZXN1bHQudmFsdWUpO1xuICAgICAgICAgIHJlamVjdChqc29ud3BFcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihyZXN1bHQudmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHRoaXMuY29tbWFuZFF1ZXVlLnB1c2goe2NtZCwgY2J9KTtcbiAgICAgIGlmIChfLmlzRnVuY3Rpb24odGhpcy5vblJlY2VpdmVDb21tYW5kKSkge1xuICAgICAgICB0aGlzLm9uUmVjZWl2ZUNvbW1hbmQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gYXdhaXQgY21kUHJvbWlzZTtcbiAgfVxuXG4gIC8qXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcmVzdWx0aW5nIGNvbm5lY3RpbmcgaXMgdGhlIGZpcnN0XG4gICAqIHNvY2tldCBjb25uZWN0aW9uIGZvciB0aGlzIHByb3h5IHNlc3Npb25cbiAgICovXG4gIGFzeW5jIHN0YXJ0ICgpIHtcbiAgICAvLyBvbmx5IHJlc29sdmUgdGhlIHByb21pc2Ugd2hlbiB0aGUgc2VydmVyIHRoYXQgaXMgY3JlYXRlZCBhY3R1YWxseSBjb25uZWN0c1xuICAgIGxldCBjb25uZWN0ZWRQcm9taXNlID0gbmV3IEIoKHJlc29sdmUpID0+IHtcbiAgICAgIGxldCByZXNwb25zZSA9IG5ldyBVSUF1dG9SZXNwb25zZSgpO1xuICAgICAgdGhpcy5zb2NrZXRTZXJ2ZXIgPSBuZXQuY3JlYXRlU2VydmVyKHthbGxvd0hhbGZPcGVuOiB0cnVlfSwgKGNvbm4pID0+IHtcbiAgICAgICAgaWYgKCF0aGlzLmhhc0Nvbm5lY3RlZCkge1xuICAgICAgICAgIHRoaXMuaGFzQ29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICBsb2dnZXIuaW5mbygnSW5zdHJ1bWVudHMgaXMgcmVhZHkgdG8gcmVjZWl2ZSBjb21tYW5kcycpO1xuICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdXAgd2l0aCBzdHJpbmdzISBkb3duIHdpdGggYnVmZmVycyFcbiAgICAgICAgY29ubi5zZXRFbmNvZGluZygndXRmOCcpO1xuXG4gICAgICAgIC8vIGtlZXAgdHJhY2sgb2YgdGhpcyBzbyB0aGF0IHdlIGNhbiBkZXN0cm95IHRoZSBzb2NrZXRcbiAgICAgICAgLy8gd2hlbiBzaHV0dGluZyBkb3duXG4gICAgICAgIHRoaXMuY3VycmVudFNvY2tldCA9IGNvbm47XG5cbiAgICAgICAgY29ubi5vbignY2xvc2UnLCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5jdXJyZW50U29ja2V0ID0gbnVsbDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gYWxsIGRhdGEgZ29lcyBpbnRvIGJ1ZmZlclxuICAgICAgICBjb25uLnBpcGUodGhyb3VnaCgoZGF0YSkgPT4ge1xuICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhgU29ja2V0IGRhdGEgcmVjZWl2ZWQgKCR7ZGF0YS5sZW5ndGh9IGJ5dGVzKWApO1xuICAgICAgICAgIHJlc3BvbnNlLmFkZERhdGEoZGF0YSk7XG4gICAgICAgIH0pKTtcblxuICAgICAgICAvLyB3aGVuIGFsbCBkYXRhIGlzIGluLCBkZWFsIHdpdGggaXRcbiAgICAgICAgY29ubi5vbignZW5kJywgKCkgPT4ge1xuICAgICAgICAgIC8vIGlmIHdlIGFyZSBtaWR3YXkgdGhyb3VnaCBoYW5kbGluZyBhIGNvbW1hbmRcbiAgICAgICAgICAvLyB3ZSB3YW50IHRvIHRyeSBvdXQgdGhlIGRhdGEsIGdldHRpbmcgbW9yZSBpZiBuZWNlc3NhcnlcbiAgICAgICAgICBpZiAodGhpcy5jdXJDb21tYW5kKSB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gcmVzcG9uc2UuZ2V0UmVzdWx0KCk7XG4gICAgICAgICAgICBpZiAocmVzdWx0ICYmICFyZXN1bHQubmVlZHNNb3JlRGF0YSkge1xuICAgICAgICAgICAgICAvLyBpZiB3ZSdyZSBkb25lIGFsdG9nZXRoZXIsIGNhbGwgdGhlIGNhbGxiYWNrIGFzc29jaWF0ZWQgd2l0aCB0aGUgY29tbWFuZFxuICAgICAgICAgICAgICB0aGlzLmN1ckNvbW1hbmQuY2IocmVzdWx0KTtcbiAgICAgICAgICAgICAgdGhpcy5jdXJDb21tYW5kID0gbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoJ05vdCB0aGUgbGFzdCBjaHVuaywgdHJ5aW5nIHRvIGdldCBtb3JlJyk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdObyByZXN1bHQgcmVjZWl2ZWQuIENvbnRpbnVpbmcgdG8gdHJ5IHRvIGdldCBtb3JlJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gYWRkIGEgY29tbWFuZCB0byB0aGUgcXVldWUsIHRvIHJlcXVlc3QgbW9yZSBkYXRhXG4gICAgICAgICAgICAgIHRoaXMuY29tbWFuZFF1ZXVlLnVuc2hpZnQoe2NtZDogTU9SRV9DT01NQU5ELCBjYjogdGhpcy5jdXJDb21tYW5kLmNifSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnR290IGEgcmVzdWx0IHdoZW4gd2Ugd2VyZSBub3QgZXhwZWN0aW5nIG9uZSEgSWdub3JpbmcgaXQnKTtcbiAgICAgICAgICAgIHJlc3BvbnNlLnJlc2V0QnVmZmVyKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gc2V0IHVwIGEgY2FsbGJhY2sgdG8gaGFuZGxlIHRoZSBuZXh0IGNvbW1hbmRcbiAgICAgICAgICBsZXQgb25SZWNlaXZlQ29tbWFuZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMub25SZWNlaXZlQ29tbWFuZCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmN1ckNvbW1hbmQgPSB0aGlzLmNvbW1hbmRRdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGBTZW5kaW5nIGNvbW1hbmQgdG8gaW5zdHJ1bWVudHM6ICR7dGhpcy5jdXJDb21tYW5kLmNtZH1gKTtcbiAgICAgICAgICAgIGNvbm4ud3JpdGUoSlNPTi5zdHJpbmdpZnkoe2NtZDogdGhpcy5jdXJDb21tYW5kLmNtZH0pKTtcbiAgICAgICAgICAgIGNvbm4uZW5kKCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAodGhpcy5jb21tYW5kUXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgICBvblJlY2VpdmVDb21tYW5kKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub25SZWNlaXZlQ29tbWFuZCA9IG9uUmVjZWl2ZUNvbW1hbmQ7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnNvY2tldFNlcnZlci5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnSW5zdHJ1bWVudHMgc29ja2V0IHNlcnZlciB3YXMgY2xvc2VkJyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIHJlbW92ZSBzb2NrZXQgZmlsZSBpZiBpdCBjdXJyZW50bHkgZXhpc3RzXG4gICAgYXdhaXQgZnMucmltcmFmKHRoaXMuc29jayk7XG5cbiAgICAvLyBjcmVhdGUgdGhlIG5ldyBzb2NrZXQgZmlsZVxuICAgIGF3YWl0IG1rZGlycChwYXRoLmRpcm5hbWUodGhpcy5zb2NrKSk7XG5cbiAgICB0aGlzLnNvY2tldFNlcnZlci5saXN0ZW4odGhpcy5zb2NrKTtcbiAgICBsb2dnZXIuZGVidWcoYEluc3RydW1lbnRzIHNvY2tldCBzZXJ2ZXIgc3RhcnRlZCBhdCAke3RoaXMuc29ja31gKTtcblxuICAgIHJldHVybiBhd2FpdCBjb25uZWN0ZWRQcm9taXNlO1xuICB9XG5cbiAgYXN5bmMgc2h1dGRvd24gKCkge1xuICAgIC8vIG1ha2Ugc3VyZSBjbGVhciBvdXQgY29tbWFuZCBjYnMgc28gd2UgY2FuJ3QgaGF2ZSBhbnkgbGluZ2VyaW5nIGNic1xuICAgIC8vIGlmIGEgc29ja2V0IHJlcXVlc3QgbWFrZXMgaXQgdGhyb3VnaCBhZnRlciBleGl0IHNvbWVob3dcbiAgICB0aGlzLmN1ckNvbW1hbmQgPSBudWxsO1xuICAgIHRoaXMub25SZWNlaXZlQ29tbWFuZCA9IG51bGw7XG5cbiAgICBpZiAodGhpcy5jdXJyZW50U29ja2V0KSB7XG4gICAgICBsb2dnZXIuZGVidWcoJ0Rlc3Ryb3lpbmcgaW5zdHJ1bWVudHMgY2xpZW50IHNvY2tldC4nKTtcbiAgICAgIHRoaXMuY3VycmVudFNvY2tldC5lbmQoKTtcbiAgICAgIHRoaXMuY3VycmVudFNvY2tldC5kZXN0cm95KCk7XG4gICAgICB0aGlzLmN1cnJlbnRTb2NrZXQgPSBudWxsO1xuICAgIH1cbiAgICBpZiAodGhpcy5zb2NrZXRTZXJ2ZXIpIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZygnQ2xvc2luZyBzb2NrZXQgc2VydmVyLicpO1xuICAgICAgYXdhaXQgKEIucHJvbWlzaWZ5KHRoaXMuc29ja2V0U2VydmVyLmNsb3NlLCB7Y29udGV4dDogdGhpcy5zb2NrZXRTZXJ2ZXJ9KSkoKTtcbiAgICAgIHRoaXMuc29ja2V0U2VydmVyID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBhc3luYyBzYWZlU2h1dGRvd24gKCkge1xuICAgIGxvZ2dlci5kZWJ1ZygnU2h1dHRpbmcgZG93biBjb21tYW5kIHByb3h5IGFuZCBpZ25vcmluZyBhbnkgZXJyb3JzJyk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMuc2h1dGRvd24oKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhgSWdub3JpbmcgZXJyb3I6ICR7ZXJyfWApO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgeyBVSUF1dG9DbGllbnQsIERFRkFVTFRfSU5TVFJVTUVOVFNfU09DS0VUIH07XG5leHBvcnQgZGVmYXVsdCBVSUF1dG9DbGllbnQ7XG4iXSwiZmlsZSI6ImxpYi91aWF1dG8vdWlhdXRvLWNsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
