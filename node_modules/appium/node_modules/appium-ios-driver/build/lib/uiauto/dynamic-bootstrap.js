"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prepareBootstrap = prepareBootstrap;
exports.getEnv = getEnv;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _crypto = _interopRequireDefault(require("crypto"));

var _appiumSupport = require("appium-support");

var _buildScript = _interopRequireDefault(require("./build-script"));

var _logger = _interopRequireDefault(require("./logger"));

var _uiautoClient = require("./uiauto-client");

let BOOTSTRAP_JS_PATH = _path.default.resolve(__dirname, '..', '..', '..', 'uiauto', 'bootstrap.js');

let COMMAND_PROXY_CLIENT_PATH = _path.default.resolve(__dirname, 'bin', 'command-proxy-client.js');

if (!__dirname.match(/build\/lib\/uiauto$/)) {
  BOOTSTRAP_JS_PATH = _path.default.resolve(__dirname, '..', 'uiauto', 'bootstrap.js');
  COMMAND_PROXY_CLIENT_PATH = _path.default.resolve(__dirname, 'bin', 'command-proxy-client.js');
}

function getEnv(opts = {}) {
  return {
    nodePath: process.execPath,
    commandProxyClientPath: COMMAND_PROXY_CLIENT_PATH,
    instrumentsSock: opts.sock || _uiautoClient.DEFAULT_INSTRUMENTS_SOCKET,
    interKeyDelay: opts.interKeyDelay || null,
    justLoopInfinitely: opts.justLoopInfinitely,
    autoAcceptAlerts: opts.autoAcceptAlerts,
    autoDismissAlerts: opts.autoDismissAlerts,
    sendKeyStrategy: opts.sendKeyStrategy,
    initialLocation: opts.initialLocation
  };
}

function buildCode(_x) {
  return _buildCode.apply(this, arguments);
}

function _buildCode() {
  _buildCode = (0, _asyncToGenerator2.default)(function* (opts) {
    if (opts.code) return opts.code;
    let env = getEnv(opts);

    _logger.default.debug(`Dynamic env: ${JSON.stringify(env)}`);

    let bootstrapJs = BOOTSTRAP_JS_PATH;
    let imports = opts.imports && opts.imports.pre ? opts.imports.pre : [];
    let bootstrapCode = yield (0, _buildScript.default)(bootstrapJs, imports);
    let lines = [];
    lines.push('// This file is automatically generated. Do not manually modify!');
    lines.push('');
    lines.push(bootstrapCode);
    lines.push('');
    lines.push('bootstrap({');
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = _lodash.default.toPairs(env)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        let _step$value = (0, _slicedToArray2.default)(_step.value, 2),
            key = _step$value[0],
            value = _step$value[1];

        if (!_lodash.default.isUndefined(value)) {
          let quote = _lodash.default.isString(value) ? '\"' : '';
          lines.push(`  "${key}": ${quote}${value}${quote},`);
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    lines[lines.length - 1] = lines[lines.length - 1].replace(/,$/, '');
    lines.push('});');
    return lines.join('\r\n');
  });
  return _buildCode.apply(this, arguments);
}

function computeHash(code) {
  return _crypto.default.createHash('md5').update(code).digest('hex').substring(0, 16);
}

function getDynamicBootstrapDir(opts = {}) {
  let dynamicBootstrapDir;

  if (process.env.APPIUM_BOOTSTRAP_DIR) {
    dynamicBootstrapDir = process.env.APPIUM_BOOTSTRAP_DIR;
  } else if (process.env.HOME) {
    dynamicBootstrapDir = _path.default.resolve(process.env.HOME, 'Library/Application Support/appium/bootstrap');
  } else {
    dynamicBootstrapDir = _path.default.resolve(opts.tmpDir || '/tmp', 'appium/bootstrap');
  }

  return dynamicBootstrapDir;
}

function writeDynamicBootstrapIfNecessary(_x2, _x3, _x4, _x5) {
  return _writeDynamicBootstrapIfNecessary.apply(this, arguments);
}

function _writeDynamicBootstrapIfNecessary() {
  _writeDynamicBootstrapIfNecessary = (0, _asyncToGenerator2.default)(function* (dynamicBootstrapDir, dynamicBootstrapPath, code, hash) {
    yield (0, _appiumSupport.mkdirp)(dynamicBootstrapDir);
    let codeIsGood = true;

    try {
      let existingCode = yield _appiumSupport.fs.readFile(dynamicBootstrapPath);
      codeIsGood = computeHash(existingCode) === hash;
    } catch (err) {
      codeIsGood = false;
    }

    if (codeIsGood) {
      _logger.default.debug(`Reusing dynamic bootstrap: ${dynamicBootstrapPath}`);
    } else {
      _logger.default.debug(`Creating or overwriting dynamic bootstrap: ${dynamicBootstrapPath}`);

      yield _appiumSupport.fs.writeFile(dynamicBootstrapPath, code, {
        flag: 'w+'
      });
    }
  });
  return _writeDynamicBootstrapIfNecessary.apply(this, arguments);
}

function prepareBootstrap() {
  return _prepareBootstrap.apply(this, arguments);
}

function _prepareBootstrap() {
  _prepareBootstrap = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    _logger.default.debug('Preparing bootstrap code');

    let dynamicBootstrapDir = getDynamicBootstrapDir(opts);

    _logger.default.debug(`Dynamic bootstrap dir: ${dynamicBootstrapDir}`);

    let code = yield buildCode(opts);
    let hash = computeHash(code);

    let dynamicBootstrapPath = _path.default.resolve(dynamicBootstrapDir, `bootstrap-${hash}.js`);

    _logger.default.debug(`Dynamic bootstrap code: ${code.split('\n')[0]}...`);

    _logger.default.debug(`Dynamic bootstrap path: ${dynamicBootstrapPath}`);

    yield writeDynamicBootstrapIfNecessary(dynamicBootstrapDir, dynamicBootstrapPath, code, hash);
    return dynamicBootstrapPath;
  });
  return _prepareBootstrap.apply(this, arguments);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
