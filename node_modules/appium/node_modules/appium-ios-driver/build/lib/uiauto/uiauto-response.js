"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

const MESSAGE_TYPES = ['error', 'no data', 'regular', 'chunk', 'last chunk'];
const UNKNOWN_ERROR = {
  status: 13,
  value: 'Error parsing socket data from instruments'
};

class UIAutoResponse {
  constructor() {
    this.bufferedData = '';
    this.resultBuffer = '';
  }

  resetBuffer() {
    this.bufferedData = '';
  }

  addData(data) {
    this.bufferedData += data;
  }

  finalizeData() {
    let data = this.bufferedData;
    this.bufferedData = '';
    let parsedData;

    try {
      parsedData = {
        type: MESSAGE_TYPES[parseInt(data[0], 10)]
      };

      if (parsedData.type !== 'no data') {
        parsedData.result = data.substring(2);
      }
    } catch (err) {
      _logger.default.error(`Could not parse data from socket: ${err}`);

      _logger.default.error(data);

      parsedData = {
        type: 'error',
        error: UNKNOWN_ERROR
      };
    }

    return parsedData;
  }

  getResult() {
    let data = this.finalizeData();

    if (!_lodash.default.isUndefined(data.result) && data.result !== false) {
      if (data.result) {
        _logger.default.debug(`Got result from instruments: ${data.result.slice(0, 300)}`);
      } else {
        _logger.default.debug('Got null result from instruments');
      }

      if (data.type && data.type.indexOf('chunk') !== -1) {
        this.resultBuffer += data.result;

        _logger.default.debug(`Got chunk data, current resultBuffer length: ${this.resultBuffer.length}`);

        if (data.type === 'last chunk') {
          _logger.default.debug(`This is the last data final length: ${this.resultBuffer.length}`);

          let result;

          try {
            result = JSON.parse(this.resultBuffer);
          } catch (err) {
            _logger.default.error(`Could not parse result buffer: ${err}`);

            result = UNKNOWN_ERROR;
          }

          this.resultBuffer = '';
          return result;
        } else {
          _logger.default.debug('Not the last chunk, trying to get more');

          return {
            needsMoreData: true
          };
        }
      } else {
        let result;

        try {
          result = JSON.parse(data.result);
        } catch (err) {
          _logger.default.error(`Could not parse result buffer: ${err}`);

          result = UNKNOWN_ERROR;
        }

        return result;
      }
    } else {
      return null;
    }
  }

}

var _default = UIAutoResponse;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91aWF1dG8vdWlhdXRvLXJlc3BvbnNlLmpzIl0sIm5hbWVzIjpbIk1FU1NBR0VfVFlQRVMiLCJVTktOT1dOX0VSUk9SIiwic3RhdHVzIiwidmFsdWUiLCJVSUF1dG9SZXNwb25zZSIsImNvbnN0cnVjdG9yIiwiYnVmZmVyZWREYXRhIiwicmVzdWx0QnVmZmVyIiwicmVzZXRCdWZmZXIiLCJhZGREYXRhIiwiZGF0YSIsImZpbmFsaXplRGF0YSIsInBhcnNlZERhdGEiLCJ0eXBlIiwicGFyc2VJbnQiLCJyZXN1bHQiLCJzdWJzdHJpbmciLCJlcnIiLCJsb2dnZXIiLCJlcnJvciIsImdldFJlc3VsdCIsIl8iLCJpc1VuZGVmaW5lZCIsImRlYnVnIiwic2xpY2UiLCJpbmRleE9mIiwibGVuZ3RoIiwiSlNPTiIsInBhcnNlIiwibmVlZHNNb3JlRGF0YSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUEsTUFBTUEsYUFBYSxHQUFHLENBQUMsT0FBRCxFQUFVLFNBQVYsRUFBcUIsU0FBckIsRUFBZ0MsT0FBaEMsRUFBeUMsWUFBekMsQ0FBdEI7QUFFQSxNQUFNQyxhQUFhLEdBQUc7QUFDcEJDLEVBQUFBLE1BQU0sRUFBRSxFQURZO0FBRXBCQyxFQUFBQSxLQUFLLEVBQUU7QUFGYSxDQUF0Qjs7QUFTQSxNQUFNQyxjQUFOLENBQXFCO0FBQ25CQyxFQUFBQSxXQUFXLEdBQUk7QUFDYixTQUFLQyxZQUFMLEdBQW9CLEVBQXBCO0FBQ0EsU0FBS0MsWUFBTCxHQUFvQixFQUFwQjtBQUNEOztBQUVEQyxFQUFBQSxXQUFXLEdBQUk7QUFDYixTQUFLRixZQUFMLEdBQW9CLEVBQXBCO0FBQ0Q7O0FBRURHLEVBQUFBLE9BQU8sQ0FBRUMsSUFBRixFQUFRO0FBQ2IsU0FBS0osWUFBTCxJQUFxQkksSUFBckI7QUFDRDs7QUFFREMsRUFBQUEsWUFBWSxHQUFJO0FBQ2QsUUFBSUQsSUFBSSxHQUFHLEtBQUtKLFlBQWhCO0FBQ0EsU0FBS0EsWUFBTCxHQUFv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Li9sb2dnZXInO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuY29uc3QgTUVTU0FHRV9UWVBFUyA9IFsnZXJyb3InLCAnbm8gZGF0YScsICdyZWd1bGFyJywgJ2NodW5rJywgJ2xhc3QgY2h1bmsnXTtcblxuY29uc3QgVU5LTk9XTl9FUlJPUiA9IHtcbiAgc3RhdHVzOiAxMyxcbiAgdmFsdWU6ICdFcnJvciBwYXJzaW5nIHNvY2tldCBkYXRhIGZyb20gaW5zdHJ1bWVudHMnXG59O1xuXG5cbi8qXG4gKiBPYmplY3QgdG8gY29udGFpbiB0aGUgZGF0YSByZWNlaXZlZCBmcm9tIHRoZSBVSSBBdXRvbWF0aW9uIHN5c3RlbS5cbiAqL1xuY2xhc3MgVUlBdXRvUmVzcG9uc2Uge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5idWZmZXJlZERhdGEgPSAnJztcbiAgICB0aGlzLnJlc3VsdEJ1ZmZlciA9ICcnO1xuICB9XG5cbiAgcmVzZXRCdWZmZXIgKCkge1xuICAgIHRoaXMuYnVmZmVyZWREYXRhID0gJyc7XG4gIH1cblxuICBhZGREYXRhIChkYXRhKSB7XG4gICAgdGhpcy5idWZmZXJlZERhdGEgKz0gZGF0YTtcbiAgfVxuXG4gIGZpbmFsaXplRGF0YSAoKSB7XG4gICAgbGV0IGRhdGEgPSB0aGlzLmJ1ZmZlcmVkRGF0YTtcbiAgICB0aGlzLmJ1ZmZlcmVkRGF0YSA9ICcnO1xuXG4gICAgLy8gdHJ5IHRvIGZpZ3VyZSBvdXQgd2hhdCB0eXBlIG9mIGRhdGEgd2UgaGF2ZSwgYW5kIHJldHVybiBpdFxuICAgIGxldCBwYXJzZWREYXRhO1xuICAgIHRyeSB7XG4gICAgICBwYXJzZWREYXRhID0ge1xuICAgICAgICB0eXBlOiBNRVNTQUdFX1RZUEVTW3BhcnNlSW50KGRhdGFbMF0sIDEwKV0sXG4gICAgICB9O1xuICAgICAgaWYgKHBhcnNlZERhdGEudHlwZSAhPT0gJ25vIGRhdGEnKSB7XG4gICAgICAgIC8vIGZvcm1hdCBpcyA8b25lIGNoYXIgbWVzc2FnZSB0eXBlPiw8REFUQT5cbiAgICAgICAgcGFyc2VkRGF0YS5yZXN1bHQgPSBkYXRhLnN1YnN0cmluZygyKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZ2dlci5lcnJvcihgQ291bGQgbm90IHBhcnNlIGRhdGEgZnJvbSBzb2NrZXQ6ICR7ZXJyfWApO1xuICAgICAgbG9nZ2VyLmVycm9yKGRhdGEpO1xuICAgICAgcGFyc2VkRGF0YSA9IHtcbiAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgZXJyb3I6IFVOS05PV05fRVJST1JcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnNlZERhdGE7XG4gIH1cblxuICBnZXRSZXN1bHQgKCkge1xuICAgIGxldCBkYXRhID0gdGhpcy5maW5hbGl6ZURhdGEoKTtcblxuICAgIGlmICghXy5pc1VuZGVmaW5lZChkYXRhLnJlc3VsdCkgJiYgZGF0YS5yZXN1bHQgIT09IGZhbHNlKSB7XG4gICAgICAvLyB3ZSBoYXZlIGEgcmVzdWx0LCB0cnkgdG8gbWFrZSB1c2Ugb2YgaXRcbiAgICAgIGlmIChkYXRhLnJlc3VsdCkge1xuICAgICAgICBsb2dnZXIuZGVidWcoYEdvdCByZXN1bHQgZnJvbSBpbnN0cnVtZW50czogJHtkYXRhLnJlc3VsdC5zbGljZSgwLCAzMDApfWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdHb3QgbnVsbCByZXN1bHQgZnJvbSBpbnN0cnVtZW50cycpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YS50eXBlICYmIGRhdGEudHlwZS5pbmRleE9mKCdjaHVuaycpICE9PSAtMSkge1xuICAgICAgICAvLyBhIFwiY2h1bmtcIiBvZiBkYXRhLCBzbyBhZGQgdG8gb3VyIGJ1ZmZlclxuICAgICAgICB0aGlzLnJlc3VsdEJ1ZmZlciArPSBkYXRhLnJlc3VsdDtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKGBHb3QgY2h1bmsgZGF0YSwgY3VycmVudCByZXN1bHRCdWZmZXIgbGVuZ3RoOiAke3RoaXMucmVzdWx0QnVmZmVyLmxlbmd0aH1gKTtcbiAgICAgICAgaWYgKGRhdGEudHlwZSA9PT0gJ2xhc3QgY2h1bmsnKSB7XG4gICAgICAgICAgbG9nZ2VyLmRlYnVnKGBUaGlzIGlzIHRoZSBsYXN0IGRhdGEgZmluYWwgbGVuZ3RoOiAke3RoaXMucmVzdWx0QnVmZmVyLmxlbmd0aH1gKTtcbiAgICAgICAgICAvLyB0aGlzIGlzIHRoZSBsYXN0IHJvdywgdW5wYWNrIGFuZCByZXR1cm4gcmVzcG9uc2VcbiAgICAgICAgICBsZXQgcmVzdWx0O1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSBKU09OLnBhcnNlKHRoaXMucmVzdWx0QnVmZmVyKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihgQ291bGQgbm90IHBhcnNlIHJlc3VsdCBidWZmZXI6ICR7ZXJyfWApO1xuICAgICAgICAgICAgcmVzdWx0ID0gVU5LTk9XTl9FUlJPUjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5yZXN1bHRCdWZmZXIgPSAnJztcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnTm90IHRoZSBsYXN0IGNodW5rLCB0cnlpbmcgdG8gZ2V0IG1vcmUnKTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmVlZHNNb3JlRGF0YTogdHJ1ZVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIG5vdCBhIFwiY2h1bmtcIiwgc28gcGFyc2UgYW5kIHJldHVyblxuICAgICAgICBsZXQgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJlc3VsdCA9IEpTT04ucGFyc2UoZGF0YS5yZXN1bHQpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBsb2dnZXIuZXJyb3IoYENvdWxkIG5vdCBwYXJzZSByZXN1bHQgYnVmZmVyOiAke2Vycn1gKTtcbiAgICAgICAgICByZXN1bHQgPSBVTktOT1dOX0VSUk9SO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHdlIGhhdmUgbm8gcmVzdWx0XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVUlBdXRvUmVzcG9uc2U7XG4iXSwiZmlsZSI6ImxpYi91aWF1dG8vdWlhdXRvLXJlc3BvbnNlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
