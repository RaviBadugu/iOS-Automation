"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumBaseDriver = require("appium-base-driver");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _utils = require("../utils");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.getAttribute = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (attribute, el) {
    el = (0, _utils.unwrapEl)(el);

    if (this.isWebContext()) {
      let atomsElement = this.getAtomsElement(el);

      if (_lodash.default.isNull(atomsElement)) {
        throw new _appiumBaseDriver.errors.UnknownError(`Error converting element ID for using in WD atoms: '${el}'`);
      } else {
        return yield this.executeAtom('get_attribute_value', [atomsElement, attribute]);
      }
    } else {
      if (attribute === 'contentSize') {
        return yield this.getElementContentSize(el);
      }

      if (_lodash.default.includes(['label', 'name', 'value', 'values', 'hint'], attribute)) {
        let command = `au.getElement('${el}').${attribute}()`;
        return yield this.uiAutoClient.sendCommand(command);
      } else {
        throw new _appiumBaseDriver.errors.UnknownCommandError(`UIAElements don't have the attribute '${attribute}'`);
      }
    }
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

commands.clear = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (el) {
    el = (0, _utils.unwrapEl)(el);

    if (this.isWebContext()) {
      let atomsElement = this.useAtomsElement(el);
      yield this.executeAtom('clear', [atomsElement]);
    } else {
      let command = `au.getElement('${el}').setValue('')`;
      yield this.uiAutoClient.sendCommand(command);
    }
  });

  return function (_x3) {
    return _ref2.apply(this, arguments);
  };
}();

commands.setValueImmediate = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (value, el) {
    el = (0, _utils.unwrapEl)(el);
    value = _appiumSupport.util.escapeSpecialChars(value, "'");
    let command = `au.getElement('${el}').setValue('${value}')`;
    yield this.uiAutoClient.sendCommand(command);
  });

  return function (_x4, _x5) {
    return _ref3.apply(this, arguments);
  };
}();

commands.setValue = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (value, el) {
    el = (0, _utils.unwrapEl)(el);

    if (this.isWebContext()) {
      let atomsElement = this.useAtomsElement(el);
      yield this.executeAtom('click', [atomsElement]);
      yield this.executeAtom('type', [atomsElement, value]);
    } else {
      if (value instanceof Array) {
        value = value.join("");
      }

      if (typeof value !== 'string') {
        value = value.toString();
      }

      value = _appiumSupport.util.escapeSpecialChars(value, "'");
      value = value.replace(/\\\\n/g, "\\n");

      if (this.opts.useRobot) {
        throw new _appiumBaseDriver.errors.NotYetImplementedError();
      } else {
        let command = `au.getElement('${el}').setValueByType('${value}')`;
        yield this.uiAutoClient.sendCommand(command);
      }
    }
  });

  return function (_x6, _x7) {
    return _ref4.apply(this, arguments);
  };
}();

commands.getText = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (el) {
    el = (0, _utils.unwrapEl)(el);

    if (this.isWebContext()) {
      let atomsElement = this.useAtomsElement(el);
      return yield this.executeAtom('get_text', [atomsElement]);
    } else {
      let command = `au.getElement('${el}').text()`;
      let res = yield this.uiAutoClient.sendCommand(command);
      res = res ? res.toString() : '';
      return res;
    }
  });

  return function (_x8) {
    return _ref5.apply(this, arguments);
  };
}();

commands.elementDisplayed = function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (el) {
    el = (0, _utils.unwrapEl)(el);

    if (this.isWebContext()) {
      let atomsElement = this.useAtomsElement(el);
      return yield this.executeAtom('is_displayed', [atomsElement]);
    } else {
      let command = `au.getElement('${el}').isDisplayed()`;
      return yield this.uiAutoClient.sendCommand(command);
    }
  });

  return function (_x9) {
    return _ref6.apply(this, arguments);
  };
}();

commands.elementEnabled = function () {
  var _ref7 = (0, _asyncToGenerator2.default)(function* (el) {
    el = (0, _utils.unwrapEl)(el);

    if (this.isWebContext()) {
      let atomsElement = this.useAtomsElement(el);
      return yield this.executeAtom('is_enabled', [atomsElement]);
    } else {
      let command = `au.getElement('${el}').isEnabled() === 1`;
      return yield this.uiAutoClient.sendCommand(command);
    }
  });

  return function (_x10) {
    return _ref7.apply(this, arguments);
  };
}();

commands.elementSelected = function () {
  var _ref8 = (0, _asyncToGenerator2.default)(function* (el) {
    el = (0, _utils.unwrapEl)(el);

    if (this.isWebContext()) {
      let atomsElement = this.useAtomsElement(el);
      return yield this.executeAtom('is_selected', [atomsElement]);
    } else {
      let command = `au.getElement('${el}').isSelected()`;
      return yield this.uiAutoClient.sendCommand(command);
    }
  });

  return function (_x11) {
    return _ref8.apply(this, arguments);
  };
}();

commands.getName = function () {
  var _ref9 = (0, _asyncToGenerator2.default)(function* (el) {
    el = (0, _utils.unwrapEl)(el);

    if (this.isWebContext()) {
      let atomsElement = this.useAtomsElement(el);
      let script = 'return arguments[0].tagName.toLowerCase()';
      return yield this.executeAtom('execute_script', [script, [atomsElement]]);
    } else {
      let command = `au.getElement('${el}').type()`;
      return yield this.uiAutoClient.sendCommand(command);
    }
  });

  return function (_x12) {
    return _ref9.apply(this, arguments);
  };
}();

commands.getLocation = function () {
  var _ref10 = (0, _asyncToGenerator2.default)(function* (el) {
    el = (0, _utils.unwrapEl)(el);

    if (this.isWebContext()) {
      let atomsElement = yield this.useAtomsElement(el);
      return yield this.executeAtom('get_top_left_coordinates', [atomsElement]);
    } else {
      let command = `au.getElement('${el}').getElementLocation()`;
      return yield this.uiAutoClient.sendCommand(command);
    }
  });

  return function (_x13) {
    return _ref10.apply(this, arguments);
  };
}();

commands.getLocationInView = function () {
  var _ref11 = (0, _asyncToGenerator2.default)(function* (el) {
    return yield this.getLocation(el);
  });

  return function (_x14) {
    return _ref11.apply(this, arguments);
  };
}();

commands.getSize = function () {
  var _ref12 = (0, _asyncToGenerator2.default)(function* (el) {
    el = (0, _utils.unwrapEl)(el);

    if (this.isWebContext()) {
      let atomsElement = this.getAtomsElement(el);

      if (atomsElement === null) {
        throw new _appiumBaseDriver.errors.UnknownError(`Error converting element ID for using in WD atoms: '${el}'`);
      } else {
        return yield this.executeAtom('get_size', [atomsElement]);
      }
    } else {
      let command = `au.getElement('${el}').getElementSize()`;
      return yield this.uiAutoClient.sendCommand(command);
    }
  });

  return function (_x15) {
    return _ref12.apply(this, arguments);
  };
}();

commands.getElementContentSize = function () {
  var _ref13 = (0, _asyncToGenerator2.default)(function* (el) {
    el = (0, _utils.unwrapEl)(el);
    const command = `au.getElement('${el}').childElementsFrames()`;
    const frames = yield this.uiAutoClient.sendCommand(command);
    const type = yield this.getName(el);
    let contentHeight = 0;

    switch (type) {
      case "UIATableView":
        {
          const firstElementFrame = _lodash.default.first(frames);

          const lastElementFrame = _lodash.default.last(frames);

          contentHeight = lastElementFrame.origin.y + lastElementFrame.size.height - firstElementFrame.origin.y;
          break;
        }

      case "UIACollectionView":
        {
          let firstElementFrame = _lodash.default.first(frames);

          let elementsInRow = 0;
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = frames.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              const _step$value = (0, _slicedToArray2.default)(_step.value, 2),
                    i = _step$value[0],
                    frame = _step$value[1];

              if (frame.origin.y !== firstElementFrame.origin.y) {
                elementsInRow = i;
                break;
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          const spaceBetweenElements = frames[elementsInRow].origin.y - frames[elementsInRow - 1].origin.y - frames[elementsInRow - 1].size.height;
          const numberOfRows = Math.ceil(frames.length / elementsInRow);
          contentHeight = numberOfRows * firstElementFrame.size.height + spaceBetweenElements * (numberOfRows - 1);
          break;
        }

      default:
        {
          return null;
        }
    }

    const size = yield this.getSize(el);
    const topLeftCoord = yield this.getLocationInView(el);
    return JSON.stringify({
      width: size.width,
      height: size.height,
      top: topLeftCoord.y,
      left: topLeftCoord.x,
      scrollableOffset: contentHeight
    });
  });

  return function (_x16) {
    return _ref13.apply(this, arguments);
  };
}();

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
