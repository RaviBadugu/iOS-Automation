"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WEBVIEW_BASE = exports.WEBVIEW_WIN = exports.NATIVE_WIN = exports.helpers = exports.commands = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _asyncbox = require("asyncbox");

var _appiumRemoteDebugger = require("appium-remote-debugger");

var _iosPerformanceLog = _interopRequireDefault(require("../device-log/ios-performance-log"));

var _appiumBaseDriver = require("appium-base-driver");

var _logger = _interopRequireDefault(require("../logger"));

var _appiumSupport = require("appium-support");

const NATIVE_WIN = 'NATIVE_APP';
exports.NATIVE_WIN = NATIVE_WIN;
const WEBVIEW_WIN = 'WEBVIEW';
exports.WEBVIEW_WIN = WEBVIEW_WIN;
const WEBVIEW_BASE = `${WEBVIEW_WIN}_`;
exports.WEBVIEW_BASE = WEBVIEW_BASE;
let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;
commands.getCurrentContext = (0, _asyncToGenerator2.default)(function* () {
  if (this.curContext && this.curContext !== NATIVE_WIN) {
    return `${WEBVIEW_BASE}${this.curContext}`;
  } else {
    return NATIVE_WIN;
  }
});
commands.getContexts = (0, _asyncToGenerator2.default)(function* () {
  _logger.default.debug('Getting list of available contexts');

  let contexts = yield this.getContextsAndViews(false);

  let mapFn = context => context.id.toString();

  if (this.opts.fullContextList) {
    mapFn = context => {
      return {
        id: context.id.toString(),
        title: context.view.title,
        url: context.view.url
      };
    };
  }

  return contexts.map(mapFn);
});

commands.setContext = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (name, callback, skipReadyCheck) {
    function alreadyInContext(desired, current) {
      return desired === current || desired === null && current === NATIVE_WIN || desired === NATIVE_WIN && current === null;
    }

    _logger.default.debug(`Attempting to set context to '${name}'`);

    if (alreadyInContext(name, this.curContext)) {} else if (name === NATIVE_WIN || name === null) {
      this.curContext = null;

      if (this.isRealDevice()) {
        this.remote.disconnect();
      }
    } else {
      if (_lodash.default.isUndefined(this.contexts)) {
        yield this.getContexts();
      }

      let contextId = name.replace(WEBVIEW_BASE, '');

      if (contextId === '') {
        contextId = this.contexts[1];
      }

      if (!_lodash.default.includes(this.contexts, contextId)) {
        throw new _appiumBaseDriver.errors.NoSuchContextError();
      }

      if (this.isRealDevice()) {
        if (this.remote) {
          yield this.remote.disconnect();
        }

        this.curContext = contextId;
        yield this.remote.connect(contextId);
      } else {
        let _$map = _lodash.default.map(contextId.split('.'), id => parseInt(id, 10)),
            _$map2 = (0, _slicedToArray2.default)(_$map, 2),
            appIdKey = _$map2[0],
            pageIdKey = _$map2[1];

        yield this.remote.selectPage(appIdKey, pageIdKey, skipReadyCheck);
        this.curContext = contextId;
      }
    }

    if (this.opts.enablePerformanceLogging && this.remote) {
      _logger.default.debug(`Starting performance log on '${this.curContext}'`);

      this.logs.performance = new _iosPerformanceLog.default(this.remote);
      yield this.logs.performance.startCapture();
    }
  });

  return function (_x, _x2, _x3) {
    return _ref3.apply(this, arguments);
  };
}();

commands.getWindowHandle = (0, _asyncToGenerator2.default)(function* () {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  return this.curContext.toString();
});
commands.getWindowHandles = (0, _asyncToGenerator2.default)(function* () {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  this.windowHandleCache = yield this.listWebFrames(false);

  const idArray = _lodash.default.map(this.windowHandleCache, 'id');

  if (!this.contexts) {
    this.contexts = idArray;
  }

  return _lodash.default.map(idArray, id => id.toString());
});

commands.setWindow = function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (name, skipReadyCheck) {
    if (!this.isWebContext()) {
      throw new _appiumBaseDriver.errors.NotImplementedError();
    }

    if (!_lodash.default.includes(_lodash.default.map(this.windowHandleCache, 'id'), name)) {
      throw new _appiumBaseDriver.errors.NoSuchWindowError();
    }

    let pageIdKey = parseInt(name, 10);

    if (!this.isRealDevice()) {
      yield this.remote.selectPage(pageIdKey, skipReadyCheck);
      this.curContext = this.curWindowHandle = name;
    } else {
      if (name === this.curWindowHandle) {
        _logger.default.debug(`Remote debugger is already connected to window '${name}'`);
      } else if (!_lodash.default.includes(_lodash.default.map(this.windowHandleCache, 'id'), name)) {
        throw new _appiumBaseDriver.errors.NoSuchWindowError();
      } else {
        yield this.remote.disconnect();
        this.curContext = this.curWindowHandle = name;
        yield this.remote.connect(name);
      }
    }
  });

  return function (_x4, _x5) {
    return _ref6.apply(this, arguments);
  };
}();

helpers.webContextIndex = function () {
  return this.curContext.replace(WEBVIEW_BASE, '') - 1;
};

extensions.initAutoWebview = (0, _asyncToGenerator2.default)(function* () {
  if (this.opts.autoWebview) {
    _logger.default.debug('Setting auto webview');

    yield this.navToInitialWebview(this);
  }
});

extensions.getContextsAndViews = function () {
  var _ref8 = (0, _asyncToGenerator2.default)(function* (useUrl = true) {
    _logger.default.debug('Retrieving contexts and views');

    let webviews = yield this.listWebFrames(useUrl);
    let ctxs = [{
      id: NATIVE_WIN,
      view: {}
    }];
    this.contexts = [NATIVE_WIN];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = webviews[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        let view = _step.value;
        ctxs.push({
          id: `${WEBVIEW_BASE}${view.id}`,
          view
        });
        this.contexts.push(view.id.toString());
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return ctxs;
  });

  return function () {
    return _ref8.apply(this, arguments);
  };
}();

extensions.getNewRemoteDebugger = (0, _asyncToGenerator2.default)(function* () {
  return new _appiumRemoteDebugger.RemoteDebugger({
    bundleId: this.opts.bundleId,
    useNewSafari: this.useNewSafari(),
    pageLoadMs: this.pageLoadMs,
    platformVersion: this.opts.platformVersion,
    remoteDebugProxy: this.opts.remoteDebugProxy,
    garbageCollectOnExecute: _appiumSupport.util.hasValue(this.opts.safariGarbageCollect) ? !!this.opts.safariGarbageCollect : true
  });
});

extensions.listWebFrames = function () {
  var _ref10 = (0, _asyncToGenerator2.default)(function* (useUrl = true) {
    var _this = this;

    if (!this.opts.bundleId) {
      _logger.default.errorAndThrow('Cannot enter web frame without a bundle ID');
    }

    useUrl = useUrl && !!this.getCurrentUrl();

    _logger.default.debug(`Selecting by url: ${useUrl} ${useUrl ? `(expected url: '${this.getCurrentUrl()}')` : ''}`);

    let currentUrl = useUrl ? this.getCurrentUrl() : undefined;
    let pageArray;

    if (this.isRealDevice() && this.remote && this.opts.bundleId) {
      pageArray = yield this.remote.pageArrayFromJson(this.opts.ignoreAboutBlankUrl);
    } else if (this.remote && this.remote.appIdKey) {
      pageArray = yield this.remote.selectApp(currentUrl, this.opts.webviewConnectRetries, this.opts.ignoreAboutBlankUrl);
    } else if (this.isRealDevice()) {
      try {
        this.remote = new _appiumRemoteDebugger.WebKitRemoteDebugger({
          port: this.opts.webkitDebugProxyPort,
          webkitResponseTimeout: this.opts.webkitResponseTimeout
        });
        pageArray = yield this.remote.pageArrayFromJson(this.opts.ignoreAboutBlankUrl);
      } catch (err) {
        if (!_lodash.default.includes(err.message, 'connect ECONNREFUSED')) throw err;

        _logger.default.warn('Attempted to get a list of webview contexts but could not connect to ' + 'ios-webkit-debug-proxy. If you expect to find webviews, please ensure ' + 'that the proxy is running and accessible');

        this.remote = null;
        pageArray = [];
      }
    } else {
      this.remote = yield this.getNewRemoteDebugger();
      let appInfo = yield this.remote.connect();

      if (!appInfo) {
        _logger.default.debug('Unable to connect to the remote debugger.');

        return [];
      }

      pageArray = yield this.remote.selectApp(currentUrl, this.opts.webviewConnectRetries, this.opts.ignoreAboutBlankUrl);
      this.remote.on(_appiumRemoteDebugger.RemoteDebugger.EVENT_PAGE_CHANGE, this.onPageChange.bind(this));
      this.remote.on(_appiumRemoteDebugger.RemoteDebugger.EVENT_FRAMES_DETACHED, () => {
        if (!_lodash.default.isEmpty(this.curWebFrames)) {
          _logger.default.debug(`Clearing ${this.curWebFrames.length} frames: ${this.curWebFrames.join(', ')}`);
        }

        this.curWebFrames = [];
      });

      let tryClosingAlert = function () {
        var _ref11 = (0, _asyncToGenerator2.default)(function* () {
          let didDismiss = yield _this.closeAlertBeforeTest();

          if (!didDismiss) {
            throw new Error('Close alert failed. Retry.');
          }
        });

        return function tryClosingAlert() {
          return _ref11.apply(this, arguments);
        };
      }();

      try {
        yield (0, _asyncbox.retryInterval)(3, 4000, tryClosingAlert);
      } catch (err) {
        if (err.message !== 'Close alert failed. Retry.') {
          _logger.default.errorAndThrow(err);
        }
      }
    }

    if (pageArray.length === 0) {
      _logger.default.debug('No web frames found.');
    }

    return pageArray;
  });

  return function () {
    return _ref10.apply(this, arguments);
  };
}();

extensions.onPageChange = function () {
  var _ref12 = (0, _asyncToGenerator2.default)(function* (pageChangeNotification) {
    _logger.default.debug(`Remote debugger notified us of a new page listing: ${JSON.stringify(pageChangeNotification)}`);

    if (this.selectingNewPage) {
      _logger.default.debug('We are in the middle of selecting a page, ignoring');

      return;
    }

    if (!this.remote || !this.remote.isConnected()) {
      _logger.default.debug('We have not yet connected, ignoring');

      return;
    }

    const appIdKey = pageChangeNotification.appIdKey,
          pageArray = pageChangeNotification.pageArray;
    let newIds = [];
    let newPages = [];
    let keyId = null;
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = pageArray[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        const page = _step2.value;
        const id = page.id.toString();
        newIds.push(id);

        if (page.isKey) {
          keyId = id;
        }

        const contextId = `${appIdKey}.${id}`;

        if (!_lodash.default.includes(this.contexts, contextId)) {
          newPages.push(id);
          this.contexts.push(contextId);
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    if (!keyId) {
      _logger.default.debug('No key id found. Choosing first id from page array');

      keyId = newIds[0] || null;
    }

    if (!_appiumSupport.util.hasValue(this.curContext)) {
      _logger.default.debug('We do not appear to have window set yet, ignoring');

      return;
    }

    const _this$curContext$spli = this.curContext.split('.'),
          _this$curContext$spli2 = (0, _slicedToArray2.default)(_this$curContext$spli, 2),
          curAppIdKey = _this$curContext$spli2[0],
          curPageIdKey = _this$curContext$spli2[1];

    if (curAppIdKey !== appIdKey) {
      _logger.default.debug('Page change not referring to currently selected app, ignoring.');

      return;
    }

    let newPage = null;

    if (newPages.length) {
      newPage = _lodash.default.last(newPages);

      _logger.default.debug(`We have new pages, selecting page '${newPage}'`);
    } else if (!_lodash.default.includes(newIds, curPageIdKey)) {
      _logger.default.debug('New page listing from remote debugger does not contain ' + 'current window; assuming it is closed');

      if (!_appiumSupport.util.hasValue(keyId)) {
        _logger.default.error('Do not have our current window anymore, and there ' + 'are not any more to load! Doing nothing...');

        this.setCurrentUrl(undefined);
        return;
      }

      _logger.default.debug(`Debugger already selected page '${keyId}', ` + `confirming that choice.`);

      this.curContext = `${appIdKey}.${keyId}`;
      newPage = keyId;
    } else {
      _logger.default.debug('Checking if page needs to load');

      const needsPageLoad = (() => {
        const contextArray = _lodash.default.map(pageArray, page => `${appIdKey}.${page.id}`);

        return !_lodash.default.isEqual(_lodash.default.find(this.contexts, this.curContext), _lodash.default.find(contextArray, this.curContext));
      })();

      if (needsPageLoad) {
        _logger.default.debug('Page load needed. Loading...');

        yield this.remote.pageLoad();
      }

      _logger.default.debug('New page listing is same as old, doing nothing');
    }

    if (_appiumSupport.util.hasValue(this.curContext)) {
      let currentPageId = parseInt(_lodash.default.last(this.curContext.split('.')), 10);

      let page = _lodash.default.find(pageArray, p => parseInt(p.id, 10) === currentPageId);

      if (page && page.url !== this.getCurrentUrl()) {
        _logger.default.debug(`Redirected from '${this.getCurrentUrl()}' to '${page.url}'`);

        this.setCurrentUrl(page.url);
      }
    }

    if (_appiumSupport.util.hasValue(newPage)) {
      this.selectingNewPage = true;
      yield this.remote.selectPage(appIdKey, parseInt(newPage, 10));
      this.selectingNewPage = false;
      this.curContext = `${appIdKey}.${newPage}`;
    }

    this.windowHandleCache = pageArray;
  });

  return function (_x6) {
    return _ref12.apply(this, arguments);
  };
}();

extensions.getLatestWebviewContextForTitle = function () {
  var _ref13 = (0, _asyncToGenerator2.default)(function* (regExp) {
    let contexts = yield this.getContextsAndViews();
    let matchingCtx;
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = contexts[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        let ctx = _step3.value;

        if (ctx.view && (ctx.view.title && ctx.view.title.match(regExp) || ctx.view.url && ctx.view.url.match(regExp))) {
          if (ctx.view.url !== 'about:blank') {
            matchingCtx = ctx;
          } else {
            if (parseFloat(this.iosSdkVersion) < 7 || parseFloat(this.iosSdkVersion) >= 9 || this.opts.platformVersion === '7.1' && this.opts.app && this.opts.app.toLowerCase() !== 'safari') {
              matchingCtx = ctx;
            }
          }

          break;
        }
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    return matchingCtx ? matchingCtx.id : undefined;
  });

  return function (_x7) {
    return _ref13.apply(this, arguments);
  };
}();

extensions.useNewSafari = function () {
  return parseFloat(this.iosSdkVersion) >= 8.1 && parseFloat(this.opts.platformVersion) >= 8.1 && !this.isRealDevice() && this.opts.safari;
};

extensions.navToInitialWebview = (0, _asyncToGenerator2.default)(function* () {
  let timeout = 0;

  if (this.isRealDevice()) {
    timeout = 3000;

    _logger.default.debug(`Waiting for ${timeout} ms before navigating to view.`);
  }

  yield _bluebird.default.delay(timeout);

  if (this.useNewSafari()) {
    yield this.typeAndNavToUrl();
  } else if (parseInt(this.iosSdkVersion, 10) >= 7 && !this.isRealDevice() && this.opts.safari) {
    yield this.navToViewThroughFavorites();
  } else {
    yield this.navToViewWithTitle(/.*/);
  }
});

function openNewPage() {
  return _openNewPage.apply(this, arguments);
}

function _openNewPage() {
  _openNewPage = (0, _asyncToGenerator2.default)(function* () {
    let newPageButton = yield this.findElement('xpath', "//UIAButton[contains(@name,'New page')]");
    yield this.nativeTap(newPageButton.ELEMENT);
  });
  return _openNewPage.apply(this, arguments);
}

extensions.typeAndNavToUrl = (0, _asyncToGenerator2.default)(function* () {
  var _this2 = this;

  let address = this.opts.address ? this.opts.address : '127.0.0.1';
  this.setCurrentUrl(this.caps.safariInitialUrl || `http://${address}:${this.opts.port}/welcome`);
  let tries = 0;
  const MAX_TRIES = 2;

  let navigate = function () {
    var _ref16 = (0, _asyncToGenerator2.default)(function* () {
      let oldImpWait = _this2.implicitWaitMs;
      _this2.implicitWaitMs = 7000;
      let el = yield (0, _asyncbox.retryInterval)(3, 1000, (0, _asyncToGenerator2.default)(function* () {
        return yield _this2.findElement('accessibility id', 'URL');
      }));
      _this2.implicitWaitMs = oldImpWait;

      try {
        yield _this2.nativeTap(el.ELEMENT);
      } catch (err) {
        if (_lodash.default.includes(err.message, 'could not be tapped')) {
          if (tries++ >= MAX_TRIES) throw err;
          yield openNewPage();
          return yield navigate();
        } else {
          throw err;
        }
      }

      try {
        let el = yield _this2.findElement('class name', 'UIATextField');
        yield _this2.setValueImmediate(_this2.getCurrentUrl(), el);
      } catch (err) {
        if (tries++ >= MAX_TRIES) throw err;
        return yield navigate();
      }

      try {
        el = yield _this2.findElement('accessibility id', 'Go');
        yield _this2.nativeTap(el.ELEMENT);
      } catch (err) {
        if (_lodash.default.includes(err.message, 'could not be tapped')) {
          _logger.default.error('Unable to submit URL because \'Go\' button could not be tapped. ' + 'Please make sure your keyboard is toggled on.');
        }

        throw err;
      }

      yield _this2.navToViewWithTitle(undefined, new RegExp(_this2.getCurrentUrl(), 'i'));
      yield _this2.remote.pageUnload();
    });

    return function navigate() {
      return _ref16.apply(this, arguments);
    };
  }();

  yield navigate();
});
extensions.navToViewThroughFavorites = (0, _asyncToGenerator2.default)(function* () {
  _logger.default.debug('We are on iOS7+ simulator: clicking apple button to get into a webview');

  let oldImpWait = this.implicitWaitMs;
  this.implicitWaitMs = 7000;
  let el;

  try {
    el = yield this.findElement('xpath', '//UIAScrollView[1]/UIAButton[1]');
  } catch (err) {
    let msg = 'Could not find button to click to get into webview. ' + 'Proceeding on the assumption we have a working one.';

    _logger.default.error(msg);

    this.implicitWaitMs = oldImpWait;
    return yield this.navToViewWithTitle(/.*/i);
  }

  this.implicitWaitMs = oldImpWait;

  try {
    yield this.nativeTap(el.ELEMENT);
  } catch (err) {
    let msg = 'Could not click button to get into webview. ' + 'Proceeding on the assumption we have a working one.';

    _logger.default.error(msg);
  }

  yield this.navToViewWithTitle(/apple/i);
});

extensions.navToViewWithTitle = function () {
  var _ref19 = (0, _asyncToGenerator2.default)(function* (titleRegex, urlRegExp) {
    var _this3 = this;

    _logger.default.debug('Navigating to most recently opened webview');

    let start = Date.now();
    let spinTime = 500;

    let spinHandles = function () {
      var _ref20 = (0, _asyncToGenerator2.default)(function* () {
        let res;

        try {
          res = yield _this3.getLatestWebviewContextForTitle(titleRegex || urlRegExp);
        } catch (err) {
          if (!err.message.includes('Could not connect to a valid app after')) {
            const error = new Error(`Could not navigate to webview! Err: ${err.message}`);
            error.stack += `\nCaused by: ${err.stack}`;
            throw error;
          }

          _logger.default.debug('Could not navigate to webview. Retrying if possible.');
        }

        if (res) {
          let latestWindow = res;

          _logger.default.debug(`Picking webview '${latestWindow}'`);

          yield _this3.setContext(latestWindow);
          yield _this3.remote.cancelPageLoad();
          return;
        }

        if (Date.now() - start >= 90000) {
          throw new Error('Could not navigate to webview; there are none!');
        }

        _logger.default.warn("Could not find any webviews yet, refreshing/retrying");

        if (_this3.isRealDevice() || !_this3.opts.safari) {
          yield _bluebird.default.delay(spinTime);
          return yield spinHandles();
        }

        let element;

        try {
          _logger.default.debug('Finding and tapping reload button');

          element = yield _this3.findUIElementOrElements('accessibility id', 'ReloadButton', '', false);
          yield _this3.nativeTap(element.ELEMENT);
        } catch (err) {
          _logger.default.warn(`Error finding and tapping reload button: ${err.message}`);

          _logger.default.warn('Retrying.');

          yield _bluebird.default.delay(spinTime);
        }

        return yield spinHandles();
      });

      return function spinHandles() {
        return _ref20.apply(this, arguments);
      };
    }();

    yield spinHandles();
  });

  return function (_x8, _x9) {
    return _ref19.apply(this, arguments);
  };
}();

helpers.closeAlertBeforeTest = (0, _asyncToGenerator2.default)(function* () {
  let present = yield this.uiAutoClient.sendCommand('au.alertIsPresent()');

  if (!present) {
    return false;
  }

  _logger.default.debug('Alert present before starting test, let us banish it');

  yield this.uiAutoClient.sendCommand('au.dismissAlert()');

  _logger.default.debug('Alert banished!');

  return true;
});

helpers.stopRemote = function () {
  var _ref22 = (0, _asyncToGenerator2.default)(function* (closeWindowBeforeDisconnecting = false) {
    if (!this.remote) {
      _logger.default.errorAndThrow('Tried to leave a web frame but were not in one');
    }

    if (closeWindowBeforeDisconnecting) {
      yield this.closeWindow();
    }

    yield this.remote.disconnect();
    this.curContext = null;
    this.curWebFrames = [];
    this.curWebCoords = null;
    this.remote = null;
  });

  return function () {
    return _ref22.apply(this, arguments);
  };
}();

helpers.isWebContext = function () {
  return !!this.curContext && this.curContext !== NATIVE_WIN;
};

helpers.setCurrentUrl = function (url) {
  this._currentUrl = url;
};

helpers.getCurrentUrl = function () {
  return this._currentUrl;
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
