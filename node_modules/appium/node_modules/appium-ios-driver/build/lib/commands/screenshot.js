"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _uuidJs = _interopRequireDefault(require("uuid-js"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _path = _interopRequireDefault(require("path"));

var _asyncbox = require("asyncbox");

var _appiumSupport = require("appium-support");

var _utils = require("../uiauto/utils");

var _logger = _interopRequireDefault(require("../logger"));

var _appiumBaseDriver = require("appium-base-driver");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;
commands.getScreenshot = (0, _asyncToGenerator2.default)(function* () {
  var _this = this;

  let guid = _uuidJs.default.create();

  let shotFile = `screenshot${guid}`;

  let shotFolder = _path.default.resolve(this.opts.tmpDir, 'appium-instruments/Run 1/');

  if (!(yield _appiumSupport.fs.exists(shotFolder))) {
    _logger.default.debug(`Creating folder '${shotFolder}'`);

    yield (0, _appiumSupport.mkdirp)(shotFolder);
  }

  let shotPath = _path.default.resolve(shotFolder, `${shotFile}.png`);

  _logger.default.debug(`Taking screenshot: '${shotPath}'`);

  let takeScreenShot = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      yield _this.uiAutoClient.sendCommand(`au.capture('${shotFile}')`);
      let screenshotWaitTimeout = (_this.opts.screenshotWaitTimeout || 10) * 1000;

      _logger.default.debug(`Waiting ${screenshotWaitTimeout} ms for screenshot to be generated.`);

      let startMs = Date.now();
      let success = false;

      while (Date.now() - startMs < screenshotWaitTimeout) {
        if (yield _appiumSupport.fs.hasAccess(shotPath)) {
          success = true;
          break;
        }

        yield _bluebird.default.delay(300);
      }

      if (!success) {
        throw new _appiumBaseDriver.errors.UnknownError('Timed out waiting for screenshot file');
      }

      if ((yield _this.getOrientation()) === 'LANDSCAPE') {
        _logger.default.debug('Rotating landscape screenshot');

        yield (0, _utils.rotateImage)(shotPath, -90);
      }

      return yield _appiumSupport.fs.readFile(shotPath);
    });

    return function takeScreenShot() {
      return _ref2.apply(this, arguments);
    };
  }();

  let data = yield (0, _asyncbox.retry)(3, takeScreenShot);
  return Buffer.from(data).toString('base64');
});
commands.getViewportScreenshot = (0, _asyncToGenerator2.default)(function* () {
  const windowSize = yield this.getWindowSize();
  const scale = yield this.getDevicePixelRatio();
  const statusBarHeight = (yield this.getStatusBarHeight()) * scale;
  const screenshot = yield this.getScreenshot();
  let rect = {
    left: 0,
    top: statusBarHeight,
    width: windowSize.width * scale,
    height: windowSize.height * scale - statusBarHeight
  };
  let newScreenshot = yield _appiumSupport.imageUtil.cropBase64Image(screenshot, rect);
  return newScreenshot;
});
Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9zY3JlZW5zaG90LmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJnZXRTY3JlZW5zaG90IiwiZ3VpZCIsInV1aWQiLCJjcmVhdGUiLCJzaG90RmlsZSIsInNob3RGb2xkZXIiLCJwYXRoIiwicmVzb2x2ZSIsIm9wdHMiLCJ0bXBEaXIiLCJmcyIsImV4aXN0cyIsImxvZ2dlciIsImRlYnVnIiwic2hvdFBhdGgiLCJ0YWtlU2NyZWVuU2hvdCIsInVpQXV0b0NsaWVudCIsInNlbmRDb21tYW5kIiwic2NyZWVuc2hvdFdhaXRUaW1lb3V0Iiwic3RhcnRNcyIsIkRhdGUiLCJub3ciLCJzdWNjZXNzIiwiaGFzQWNjZXNzIiwiQiIsImRlbGF5IiwiZXJyb3JzIiwiVW5rbm93bkVycm9yIiwiZ2V0T3JpZW50YXRpb24iLCJyZWFkRmlsZSIsImRhdGEiLCJCdWZmZXIiLCJmcm9tIiwidG9TdHJpbmciLCJnZXRWaWV3cG9ydFNjcmVlbnNob3QiLCJ3aW5kb3dTaXplIiwiZ2V0V2luZG93U2l6ZSIsInNjYWxlIiwiZ2V0RGV2aWNlUGl4ZWxSYXRpbyIsInN0YXR1c0JhckhlaWdodCIsImdldFN0YXR1c0JhckhlaWdodCIsInNjcmVlbnNob3QiLCJyZWN0IiwibGVmdCIsInRvcCIsIndpZHRoIiwiaGVpZ2h0IiwibmV3U2NyZWVuc2hvdCIsImltYWdlVXRpbCIsImNyb3BCYXNlNjRJbWFnZSIsIk9iamVjdCIsImFzc2lnbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxJQUFJQSxRQUFRLEdBQUcsRUFBZjtBQUFBLElBQW1CQyxPQUFPLEdBQUcsRUFBN0I7QUFBQSxJQUFpQ0MsVUFBVSxHQUFHLEVBQTlDOzs7QUFFQUYsUUFBUSxDQUFDRyxhQUFULG1DQUF5QixhQUFrQjtBQUFBOztBQUN6QyxNQUFJQyxJQUFJLEdB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QVA7QUFDRCxDQWREO0FBZ0JBRyxNQUFNLENBQUNDLE1BQVAsQ0FBY3BELFVBQWQsRUFBMEJGLFFBQTFCLEVBQW9DQyxPQUFwQztlQUVlQyxVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHV1aWQgZnJvbSAndXVpZC1qcyc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IHJldHJ5IH0gZnJvbSAnYXN5bmNib3gnO1xuaW1wb3J0IHsgZnMsIG1rZGlycCwgaW1hZ2VVdGlsIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IHsgcm90YXRlSW1hZ2UgfSBmcm9tICcuLi91aWF1dG8vdXRpbHMnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcblxuXG5sZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmNvbW1hbmRzLmdldFNjcmVlbnNob3QgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGxldCBndWlkID0gdXVpZC5jcmVhdGUoKTtcbiAgbGV0IHNob3RGaWxlID0gYHNjcmVlbnNob3Qke2d1aWR9YDtcblxuICBsZXQgc2hvdEZvbGRlciA9IHBhdGgucmVzb2x2ZSh0aGlzLm9wdHMudG1wRGlyLCAnYXBwaXVtLWluc3RydW1lbnRzL1J1biAxLycpO1xuICBpZiAoIShhd2FpdCBmcy5leGlzdHMoc2hvdEZvbGRlcikpKSB7XG4gICAgbG9nZ2VyLmRlYnVnKGBDcmVhdGluZyBmb2xkZXIgJyR7c2hvdEZvbGRlcn0nYCk7XG4gICAgYXdhaXQgbWtkaXJwKHNob3RGb2xkZXIpO1xuICB9XG5cbiAgbGV0IHNob3RQYXRoID0gcGF0aC5yZXNvbHZlKHNob3RGb2xkZXIsIGAke3Nob3RGaWxlfS5wbmdgKTtcbiAgbG9nZ2VyLmRlYnVnKGBUYWtpbmcgc2NyZWVuc2hvdDogJyR7c2hvdFBhdGh9J2ApO1xuXG4gIGxldCB0YWtlU2NyZWVuU2hvdCA9IGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCB0aGlzLnVpQXV0b0NsaWVudC5zZW5kQ29tbWFuZChgYXUuY2FwdHVyZSgnJHtzaG90RmlsZX0nKWApO1xuXG4gICAgbGV0IHNjcmVlbnNob3RXYWl0VGltZW91dCA9ICh0aGlzLm9wdHMuc2NyZWVuc2hvdFdhaXRUaW1lb3V0IHx8IDEwKSAqIDEwMDA7XG4gICAgbG9nZ2VyLmRlYnVnKGBXYWl0aW5nICR7c2NyZWVuc2hvdFdhaXRUaW1lb3V0fSBtcyBmb3Igc2NyZWVuc2hvdCB0byBiZSBnZW5lcmF0ZWQuYCk7XG4gICAgbGV0IHN0YXJ0TXMgPSBEYXRlLm5vdygpO1xuXG4gICAgbGV0IHN1Y2Nlc3MgPSBmYWxzZTtcbiAgICB3aGlsZSAoKERhdGUubm93KCkgLSBzdGFydE1zKSA8IHNjcmVlbnNob3RXYWl0VGltZW91dCkge1xuICAgICAgaWYgKGF3YWl0IGZzLmhhc0FjY2VzcyhzaG90UGF0aCkpIHtcbiAgICAgICAgc3VjY2VzcyA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgYXdhaXQgQi5kZWxheSgzMDApO1xuICAgIH1cbiAgICBpZiAoIXN1Y2Nlc3MpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuVW5rbm93bkVycm9yKCdUaW1lZCBvdXQgd2FpdGluZyBmb3Igc2NyZWVuc2hvdCBmaWxlJyk7XG4gICAgfVxuXG4gICAgLy8gY2hlY2sgdGhlIHJvdGF0aW9uLCBhbmQgcm90YXRlIGlmIG5lY2Vzc2FyeVxuICAgIGlmIChhd2FpdCB0aGlzLmdldE9yaWVudGF0aW9uKCkgPT09ICdMQU5EU0NBUEUnKSB7XG4gICAgICBsb2dnZXIuZGVidWcoJ1JvdGF0aW5nIGxhbmRzY2FwZSBzY3JlZW5zaG90Jyk7XG4gICAgICBhd2FpdCByb3RhdGVJbWFnZShzaG90UGF0aCwgLTkwKTtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IGZzLnJlYWRGaWxlKHNob3RQYXRoKTtcbiAgfTtcblxuICAvLyBSZXRyeWluZyB0aGUgd2hvbGUgc2NyZWVuc2hvdCBwcm9jZXNzIGZvciB0aHJlZSB0aW1lcy5cbiAgbGV0IGRhdGEgPSBhd2FpdCByZXRyeSgzLCB0YWtlU2NyZWVuU2hvdCk7XG4gIHJldHVybiBCdWZmZXIuZnJvbShkYXRhKS50b1N0cmluZygnYmFzZTY0Jyk7XG59O1xuXG5jb21tYW5kcy5nZXRWaWV3cG9ydFNjcmVlbnNob3QgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHdpbmRvd1NpemUgPSBhd2FpdCB0aGlzLmdldFdpbmRvd1NpemUoKTtcbiAgY29uc3Qgc2NhbGUgPSBhd2FpdCB0aGlzLmdldERldmljZVBpeGVsUmF0aW8oKTtcbiAgLy8gc3RhdHVzIGJhciBoZWlnaHQgY29tZXMgaW4gdW5zY2FsZWQsIHNvIHNjYWxlIGl0XG4gIGNvbnN0IHN0YXR1c0JhckhlaWdodCA9IGF3YWl0IHRoaXMuZ2V0U3RhdHVzQmFySGVpZ2h0KCkgKiBzY2FsZTtcbiAgY29uc3Qgc2NyZWVuc2hvdCA9IGF3YWl0IHRoaXMuZ2V0U2NyZWVuc2hvdCgpO1xuICBsZXQgcmVjdCA9IHtcbiAgICBsZWZ0OiAwLFxuICAgIHRvcDogc3RhdHVzQmFySGVpZ2h0LFxuICAgIHdpZHRoOiB3aW5kb3dTaXplLndpZHRoICogc2NhbGUsXG4gICAgaGVpZ2h0OiB3aW5kb3dTaXplLmhlaWdodCAqIHNjYWxlIC0gc3RhdHVzQmFySGVpZ2h0XG4gIH07XG4gIGxldCBuZXdTY3JlZW5zaG90ID0gYXdhaXQgaW1hZ2VVdGlsLmNyb3BCYXNlNjRJbWFnZShzY3JlZW5zaG90LCByZWN0KTtcbiAgcmV0dXJuIG5ld1NjcmVlbnNob3Q7XG59O1xuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7Y29tbWFuZHMsIGhlbHBlcnN9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL3NjcmVlbnNob3QuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
