"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumBaseDriver = require("appium-base-driver");

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _utils = require("../utils");

var _logger = _interopRequireDefault(require("../logger"));

var _appiumSupport = require("appium-support");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;
const FLICK_MS = 3000;

commands.nativeTap = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (el) {
    el = (0, _utils.unwrapEl)(el);
    let command = `au.tapById('${el}')`;
    yield this.uiAutoClient.sendCommand(command);
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

commands.click = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (el) {
    el = (0, _utils.unwrapEl)(el);

    if (this.isWebContext()) {
      if (this.opts.nativeWebTap && !this.isRealDevice()) {
        yield this.nativeWebTap(el);
      } else {
        let atomsElement = this.useAtomsElement(el);
        return yield this.executeAtom('click', [atomsElement]);
      }
    } else {
      if (this.opts.useRobot) {
        throw new _appiumBaseDriver.errors.NotYetImplementedError();
      } else {
        yield this.nativeTap(el);
      }
    }
  });

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}();

commands.clickCurrent = (0, _asyncToGenerator2.default)(function* () {
  if (this.isWebContext()) {
    if (_lodash.default.isNull(this.curWebCoords)) {
      throw new _appiumBaseDriver.errors.UnknownError('Cannot call click() before calling moveTo() to set coords');
    }

    yield this.clickWebCoords();
  } else {
    if (this.curCoords === null) {
      throw new _appiumBaseDriver.errors.UnknownError("Cannot call click() before calling moveTo() to set coords");
    }

    yield this.clickCoords(this.curCoords);
  }
});

helpers.clickCoords = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (coords) {
    if (this.opts.useRobot) {
      throw new _appiumBaseDriver.errors.NotYetImplementedError();
    } else {
      let opts = coords;
      opts.tapCount = 1;
      opts.duration = 0.3;
      opts.touchCount = 1;
      let command = `au.complexTap(${JSON.stringify(opts)})`;
      yield this.uiAutoClient.sendCommand(command);
    }
  });

  return function (_x3) {
    return _ref4.apply(this, arguments);
  };
}();

commands.mobileRotation = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (x, y, radius, rotation, touchCount, duration, el) {
    if (this.isWebContext()) {
      throw new _appiumBaseDriver.errors.NotYetImplementedError();
    }

    el = (0, _utils.unwrapEl)(el);
    let location = {
      x,
      y
    };
    let options = {
      duration,
      radius,
      rotation,
      touchCount
    };

    if (el) {
      if (this.isWebContext()) {
        throw new _appiumBaseDriver.errors.NotYetImplementedError();
      }

      yield this.uiAutoClient.sendCommand(`au.getElement('${el}').rotateWithOptions(${JSON.stringify(options)})`);
    } else {
      yield this.uiAutoClient.sendCommand(`target.rotateWithOptions(${JSON.stringify(location)}, ${JSON.stringify(options)})`);
    }
  });

  return function (_x4, _x5, _x6, _x7, _x8, _x9, _x10) {
    return _ref5.apply(this, arguments);
  };
}();

helpers.handleTap = function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (gesture) {
    let options = gesture.options;
    let cmdBase = options.element ? `au.getElement('${options.element}')` : 'UIATarget.localTarget().frontMostApp()';
    let rect = yield this.uiAutoClient.sendCommand(`${cmdBase}.rect()`);
    let offsetX = 0.5;
    let offsetY = 0.5;
    let size = {
      w: rect.size.width,
      h: rect.size.height
    };
    options.x = options.x || size.w / 2;
    options.y = options.y || size.h / 2;
    offsetX = options.x / size.w;
    offsetY = options.y / size.h;
    let opts = {
      tapOffset: {
        x: offsetX,
        y: offsetY
      },
      tapCount: options.count || 1,
      touchCount: 1
    };
    let cmd = `${cmdBase}.tapWithOptions(${JSON.stringify(opts)})`;
    return yield this.uiAutoClient.sendCommand(cmd);
  });

  return function (_x11) {
    return _ref6.apply(this, arguments);
  };
}();

helpers.isDrag = function (gestures) {
  return gestures.length === 4 && gestures[0].action === 'press' && gestures[1].action === 'wait' && gestures[2].action === 'moveTo' && gestures[3].action === 'release';
};

helpers.isPinchAndZoom = function (gestures) {
  return gestures.length === 3 && gestures[0].action === 'press' && gestures[1].action === 'moveTo' && gestures[2].action === 'release';
};

helpers.getCoordinates = function () {
  var _ref7 = (0, _asyncToGenerator2.default)(function* (gesture) {
    let el = gesture.options.element;
    let coordinates = {
      x: 0,
      y: 0,
      areOffsets: false
    };

    if (el) {
      let command = `au.getElement('${el}').rect()`;
      let rect = yield this.uiAutoClient.sendCommand(command);
      let pos = {
        x: rect.origin.x,
        y: rect.origin.y
      };
      let size = {
        w: rect.size.width,
        h: rect.size.height
      };
      let offsetX = 0;
      let offsetY = 0;

      if (gesture.options.x || gesture.options.y) {
        offsetX = gesture.options.x || 0;
        offsetY = gesture.options.y || 0;
      } else {
        offsetX = size.w / 2;
        offsetY = size.h / 2;
      }

      coordinates.x = pos.x + offsetX;
      coordinates.y = pos.y + offsetY;
    } else {
      coordinates.areOffsets = gesture.action === 'moveTo';
      coordinates.x = gesture.options.x || 0;
      coordinates.y = gesture.options.y || 0;
    }

    return coordinates;
  });

  return function (_x12) {
    return _ref7.apply(this, arguments);
  };
}();

helpers.applyMoveToOffset = function (firstCoordinates, secondCoordinates) {
  if (secondCoordinates.areOffsets) {
    return {
      x: firstCoordinates.x + secondCoordinates.x,
      y: firstCoordinates.y + secondCoordinates.y
    };
  } else {
    return secondCoordinates;
  }
};

helpers.handleDrag = function () {
  var _ref8 = (0, _asyncToGenerator2.default)(function* (gestures) {
    let press = gestures[0];
    let wait = gestures[1];
    let moveTo = gestures[2];
    let pressCoordinates = yield this.getCoordinates(press);
    let duration = parseInt(wait.options.ms, 10) / 1000;
    let moveToCoordinates = yield this.getCoordinates(moveTo);
    moveToCoordinates = this.applyMoveToOffset(pressCoordinates, moveToCoordinates);
    let dragCommand = `au.dragApp(` + `${pressCoordinates.x}, ${pressCoordinates.y}, ` + `${moveToCoordinates.x}, ${moveToCoordinates.y}, ` + `${duration})`;
    return yield this.uiAutoClient.sendCommand(dragCommand);
  });

  return function (_x13) {
    return _ref8.apply(this, arguments);
  };
}();

helpers.handlePinchAndZoom = function () {
  var _ref9 = (0, _asyncToGenerator2.default)(function* (gestures) {
    let press = gestures[0];
    let moveTo = gestures[1];
    let pressCoordinates = yield this.getCoordinates(press);
    let moveToCoordinates = yield this.getCoordinates(moveTo);
    moveToCoordinates = this.applyMoveToOffset(pressCoordinates, moveToCoordinates);
    let pinchCommand = `au.dragApp(` + `${pressCoordinates.x}, ${pressCoordinates.y}, ` + `${moveToCoordinates.x}, ${moveToCoordinates.y}`;
    return yield this.uiAutoClient.sendCommand(pinchCommand);
  });

  return function (_x14) {
    return _ref9.apply(this, arguments);
  };
}();

commands.performTouch = function () {
  var _ref10 = (0, _asyncToGenerator2.default)(function* (gestures) {
    if (this.isWebContext()) {
      throw new _appiumBaseDriver.errors.NotYetImplementedError();
    }

    if (gestures.length === 1 && gestures[0].action === 'tap') {
      return yield this.handleTap(gestures[0]);
    } else if (this.isDrag(gestures)) {
      return yield this.handleDrag(gestures);
    }

    let touchStateObjects = yield this.parseTouch(gestures);
    yield this.uiAutoClient.sendCommand(`target.touch(${JSON.stringify(touchStateObjects)})`);
  });

  return function (_x15) {
    return _ref10.apply(this, arguments);
  };
}();

commands.parseTouch = function () {
  var _ref11 = (0, _asyncToGenerator2.default)(function* (gestures) {
    var _this = this;

    if (_lodash.default.last(gestures).action === 'release') {
      gestures.pop();
    }

    let touchStateObjects = [];

    let finishParsing = () => {
      let prevPos = null;
      let time = 0;

      for (var _i = 0; _i < touchStateObjects.length; _i++) {
        let state = touchStateObjects[_i];

        if (state.touch[0] === false) {
          state.touch[0] = prevPos;
        } else if (state.touch[0].offset && prevPos) {
          state.touch[0].x += prevPos.x;
          state.touch[0].y += prevPos.y;
        }

        if (state.touch[0]) {
          delete state.touch[0].offset;
          prevPos = state.touch[0];
        }

        let timeOffset = state.timeOffset;
        time += timeOffset;
        state.time = time;
        delete state.timeOffset;
      }
    };

    let needsPoint = action => {
      return _lodash.default.includes(['press', 'moveTo', 'tap', 'longPress'], action);
    };

    let cycleThroughGestures = function () {
      var _ref12 = (0, _asyncToGenerator2.default)(function* () {
        let gesture = gestures.shift();

        if (typeof gesture === "undefined") {
          return finishParsing();
        }

        let tapPoint = false;

        if (needsPoint(gesture.action)) {
          let el = gesture.options.element;

          if (el) {
            let command = `au.getElement('${el}').rect()`;
            let rect = yield _this.uiAutoClient.sendCommand(command);
            let pos = {
              x: rect.origin.x,
              y: rect.origin.y
            };
            let size = {
              w: rect.size.width,
              h: rect.size.height
            };

            if (gesture.options.x || gesture.options.y) {
              tapPoint = {
                offset: false,
                x: pos.x + (gesture.options.x || 0),
                y: pos.y + (gesture.options.y || 0)
              };
            } else {
              tapPoint = {
                offset: false,
                x: pos.x + size.w / 2,
                y: pos.y + size.h / 2
              };
            }

            let touchStateObject = {
              timeOffset: 0.2,
              touch: [tapPoint]
            };
            touchStateObjects.push(touchStateObject);
            yield cycleThroughGestures();
          } else {
            tapPoint = {
              offset: true,
              x: gesture.options.x || 0,
              y: gesture.options.y || 0
            };
            let touchStateObject = {
              timeOffset: 0.2,
              touch: [tapPoint]
            };
            touchStateObjects.push(touchStateObject);
            yield cycleThroughGestures();
          }
        } else {
          tapPoint = false;
          let offset = 0.2;

          if (gesture.action === 'wait') {
            if (typeof gesture.options.ms !== 'undefined' || gesture.options.ms !== null) {
              offset = parseInt(gesture.options.ms, 10) / 1000;
            }
          }

          let touchStateObject = {
            timeOffset: offset,
            touch: [tapPoint]
          };
          touchStateObjects.push(touchStateObject);
          yield cycleThroughGestures();
        }
      });

      return function cycleThroughGestures() {
        return _ref12.apply(this, arguments);
      };
    }();

    yield cycleThroughGestures();
    return touchStateObjects;
  });

  return function (_x16) {
    return _ref11.apply(this, arguments);
  };
}();

let mergeStates = function mergeStates(states) {
  let getSlice = function getSlice(states, index) {
    let array = [];

    for (let i = 0; i < states.length; i++) {
      array.push(states[i][index]);
    }

    return array;
  };

  let timeSequence = function timeSequence(states) {
    let seq = [];

    _lodash.default.each(states, function (state) {
      let times = _lodash.default.map(state, "time");

      seq = _lodash.default.union(seq, times);
    });

    return seq.sort();
  };

  let merged = [];

  _lodash.default.each(timeSequence(states), function (time, index) {
    let slice = getSlice(states, index);
    let obj = {
      time,
      touch: []
    };

    _lodash.default.each(slice, function (action) {
      obj.touch.push(action.touch[0]);
    });

    merged.push(obj);
  });

  return merged;
};

commands.performMultiAction = function () {
  var _ref13 = (0, _asyncToGenerator2.default)(function* (actions) {
    var _this2 = this;

    if (this.isWebContext()) {
      throw new _appiumBaseDriver.errors.NotYetImplementedError();
    }

    let states = [];

    let cycleThroughActions = function () {
      var _ref14 = (0, _asyncToGenerator2.default)(function* () {
        let action = actions.shift();

        if (typeof action === "undefined") {
          let mergedStates = mergeStates(states);

          if (_this2.isPinchAndZoom(mergedStates)) {
            yield _this2.handlePinchAndZoom(mergedStates);
            return;
          } else {
            yield _this2.uiAutoClient.sendCommand(`target.touch(${JSON.stringify(mergedStates)})`);
            return;
          }
        }

        let val = yield _this2.parseTouch(action);
        states.push(val);
        yield cycleThroughActions();
      });

      return function cycleThroughActions() {
        return _ref14.apply(this, arguments);
      };
    }();

    yield cycleThroughActions();
  });

  return function (_x17) {
    return _ref13.apply(this, arguments);
  };
}();

helpers.mobileScroll = function () {
  var _ref15 = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    let direction = opts.direction;
    let el = opts.element;
    el = (0, _utils.unwrapEl)(el);

    if (this.isWebContext()) {
      throw new _appiumBaseDriver.errors.NotYetImplementedError();
    } else {
      if (_appiumSupport.util.hasValue(el) && !_appiumSupport.util.hasValue(direction)) {
        yield this.scrollToElement(el);
        return;
      }

      direction = _lodash.default.capitalize(direction);
      let command;

      if (_lodash.default.isNull(el) || _lodash.default.isUndefined(el)) {
        command = `au.scrollFirstView('${direction}')`;
      } else {
        command = `au.getElement('${el}').scroll${direction}()`;
      }

      try {
        yield this.uiAutoClient.sendCommand(command);
      } catch (err) {
        if (!_lodash.default.includes(err.message, 'kAXErrorFailure')) throw err;

        _logger.default.warn('Received kAXErrorFailure, generally indicating an attempt ' + 'to scroll past the end of the view. Continuing.');
      }
    }
  });

  return function () {
    return _ref15.apply(this, arguments);
  };
}();

commands.scrollToElement = function () {
  var _ref16 = (0, _asyncToGenerator2.default)(function* (element) {
    element = (0, _utils.unwrapEl)(element);
    const command = `au.getElement('${element}').scrollToVisible()`;
    yield this.uiAutoClient.sendCommand(command);
  });

  return function (_x18) {
    return _ref16.apply(this, arguments);
  };
}();

commands.flick = function () {
  var _ref17 = (0, _asyncToGenerator2.default)(function* (el, xspeed, yspeed, xoffset, yoffset, speed) {
    el = (0, _utils.unwrapEl)(el);

    if (_lodash.default.every([el, xoffset, yoffset, speed], p => {
      return !_lodash.default.isNull(p) && !_lodash.default.isUndefined(p);
    })) {
      yield this.flickElement(el, xoffset, yoffset, speed);
    } else if (_lodash.default.every([xspeed, yspeed], p => {
      return !_lodash.default.isNull(p) && !_lodash.default.isUndefined(p);
    })) {
      yield this.xySpeedFlick(xspeed, yspeed);
    } else {
      throw new _appiumBaseDriver.errors.UnknownError('Bad flick parameters, pass either (xspeed, yspeed) or (element, xoffset, yoffset, speed)!');
    }
  });

  return function (_x19, _x20, _x21, _x22, _x23, _x24) {
    return _ref17.apply(this, arguments);
  };
}();

helpers.xySpeedFlick = function () {
  var _ref18 = (0, _asyncToGenerator2.default)(function* (xSpeed, ySpeed) {
    let command = `au.touchFlickFromSpeed(${xSpeed},${ySpeed})`;
    yield _bluebird.default.all([this.uiAutoClient.sendCommand(command), _bluebird.default.delay(FLICK_MS)]);
  });

  return function (_x25, _x26) {
    return _ref18.apply(this, arguments);
  };
}();

helpers.flickElement = function () {
  var _ref19 = (0, _asyncToGenerator2.default)(function* (el, xoffset, yoffset, speed) {
    el = (0, _utils.unwrapEl)(el);
    let command = "";

    if (this.isWebContext()) {
      yield this.webFlickElement(el, xoffset, yoffset);
    } else {
      command = `au.getElement('${el}').touchFlick(${xoffset},${yoffset},${speed})`;
      yield _bluebird.default.all([this.uiAutoClient.sendCommand(command), _bluebird.default.delay(FLICK_MS)]);
    }
  });

  return function (_x27, _x28, _x29, _x30) {
    return _ref19.apply(this, arguments);
  };
}();

commands.mobileShake = (0, _asyncToGenerator2.default)(function* () {
  yield this.uiAutoClient.sendCommand("au.shake()");
});

commands.moveTo = function () {
  var _ref21 = (0, _asyncToGenerator2.default)(function* (el, xoffset = 0, yoffset = 0) {
    el = (0, _utils.unwrapEl)(el);

    if (this.isWebContext()) {
      let _ref22 = yield this.getLocation(el),
          x = _ref22.x,
          y = _ref22.y;

      let coords = {
        x: x + xoffset,
        y: y + yoffset
      };
      this.curWebCoords = coords;
      let atomsElement = this.useAtomsElement(el);
      let relCoords = {
        x: xoffset,
        y: yoffset
      };
      yield this.executeAtom('move_mouse', [atomsElement, relCoords]);
    } else {
      if (_lodash.default.isNull(el) || _lodash.default.isUndefined(el)) {
        if (!this.curCoords) {
          throw new _appiumBaseDriver.errors.UnknownException('Current cursor position unknown, please use moveTo with an element the first time.');
        }

        this.curCoords = {
          x: this.curCoords.x + xoffset,
          y: this.curCoords.y + yoffset
        };
      } else {
        let elPos = yield this.getLocation(el);
        this.curCoords = {
          x: elPos.x + xoffset,
          y: elPos.y + yoffset
        };
      }
    }
  });

  return function (_x31) {
    return _ref21.apply(this, arguments);
  };
}();

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9nZXN0dXJlLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJGTElDS19NUyIsIm5hdGl2ZVRhcCIsImVsIiwiY29tbWFuZCIsInVpQXV0b0NsaWVudCIsInNlbmRDb21tYW5kIiwiY2xpY2siLCJpc1dlYkNvbnRleHQiLCJvcHRzIiwibmF0aXZlV2ViVGFwIiwiaXNSZWFsRGV2aWNlIiwiYXRvbXNFbGVtZW50IiwidXNlQXRvbXNFbGVtZW50IiwiZXhlY3V0ZUF0b20iLCJ1c2VSb2JvdCIsImVycm9ycyIsIk5vdFlldEltcGxlbWVudGVkRXJyb3IiLCJjbGlja0N1cnJlbnQiLCJfIiwiaXNOdWxsIiwiY3VyV2ViQ29vcmRzIiwiVW5rbm93bkVycm9yIiwiY2xpY2tXZWJDb29yZHMiLCJjdXJDb29yZHMiLCJjbGlja0Nvb3JkcyIsImNvb3JkcyIsInRhcENvdW50IiwiZHVyYXRpb24iLCJ0b3VjaENvdW50IiwiSlNPTiIsInN0cmluZ2lmeSIsIm1vYmlsZVJvdGF0aW9uIiwieCIsInkiLCJyYWRpdXMiLCJyb3RhdGlvbiIsImxvY2F0aW9uIiwib3B0aW9ucyIsImhhbmRsZVRhcCIsImdlc3R1cmUiLCJjbWRCYXNlIiwiZWxlbWVudCIsInJlY3QiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInNpemUiLCJ3Iiwid2lkdGgiLCJoIiwiaGVpZ2h0IiwidGFwT2Zmc2V0IiwiY291bnQiLCJjbWQiLCJpc0RyYWciLCJnZXN0dXJlcyIsImxlbmd0aCIsImFjdGlvbiIsImlzUGluY2hBbmRab29tIiwiZ2V0Q29vcmRpbmF0ZXMiLCJjb29yZGluYXRlcyIsImFyZU9mZnNldHMiLCJwb3MiLCJvcmlnaW4iLCJhcHBseU1vdmVUb09mZnNldCIsImZpcnN0Q29vcmRpbmF0ZXMiLCJzZWNvbmRDb29yZGluYXRlcyIsImhhbmRsZURyYWciLCJwcmVzcyIsIndhaXQiLCJtb3ZlVG8iLCJwcmVzc0Nvb3JkaW5hdGVzIiwicGFyc2VJbnQiLCJtcyIsIm1vdmVUb0Nvb3JkaW5hdGVzIiwiZHJhZ0NvbW1hbmQiLCJoYW5kbGVQaW5jaEFuZFpvb20iLCJwaW5jaENvbW1hbmQiLCJwZXJmb3JtVG91Y2giLCJ0b3VjaFN0YXRlT2JqZWN0cyIsInBhcnNlVG91Y2giLCJsYXN0IiwicG9wIiwiZmluaXNoUGFyc2luZyIsInByZXZQb3MiLCJ0aW1lIiwic3RhdGUiLCJ0b3VjaCIsIm9mZnNldCIsInRpbWVPZmZzZXQiLCJuZWVkc1BvaW50IiwiaW5jbHVkZXMiLCJjeWNsZVRocm91Z2hHZXN0dXJlcyIsInNoaWZ0IiwidGFwUG9pbnQiLCJ0b3VjaFN0YXRlT2JqZWN0IiwicHVzaCIsIm1lcmdlU3RhdGVzIiwic3RhdGVzIiwiZ2V0U2xpY2UiLCJpbmRleCIsImFycmF5IiwiaSIsInRpbWVTZXF1ZW5jZSIsInNlcSIsImVhY2giLCJ0aW1lcyIsIm1hcCIsInVuaW9uIiwic29ydCIsIm1lcmdlZCIsInNsaWNlIiwib2JqIiwicGVyZm9ybU11bHRpQWN0aW9uIiwiYWN0aW9ucyIsImN5Y2xlVGhyb3VnaEFjdGlvbnMiLCJtZXJnZWRTdGF0ZXMiLCJ2YWwiLCJtb2JpbGVTY3JvbGwiLCJkaXJlY3Rpb24iLCJ1dGlsIiwiaGFzVmFsdWUiLCJzY3JvbGxUb0VsZW1lbnQiLCJjYXBpdGFsaXplIiwiaXNVbmRlZmluZWQiLCJlcnIiLCJtZXNzYWdlIiwibG9nZ2VyIiwid2FybiIsImZsaWNrIiwieHNwZWVkIiwieXNwZWVkIiwieG9mZnNldCIsInlvZmZzZXQiLCJzcGVlZCIsImV2ZXJ5IiwicCIsImZsaWNrRWxlbWVudCIsInh5U3BlZWRGbGljayIsInhTcGVlZCIsInlTcGVlZCIsIkIiLCJhbGwiLCJkZWxheSIsIndlYkZsaWNrRWxlbWVudCIsIm1vYmlsZVNoYWtlIiwiZ2V0TG9jYXRpb24iLCJyZWxDb29yZHMiLCJVbmtub3duRXhjZXB0aW9uIiwiZWxQb3MiLCJPYmplY3QiLCJhc3NpZ24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FB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Q0FBaUIvSSxFQUFqQixDQUFsQjtBQUNBLGFBQUtxQixTQUFMLEdBQWlCO0FBQ2ZTLFVBQUFBLENBQUMsRUFBRW9ILEtBQUssQ0FBQ3BILENBQU4sR0FBVW1HLE9BREU7QUFFZmxHLFVBQUFBLENBQUMsRUFBRW1ILEtBQUssQ0FBQ25ILENBQU4sR0FBVW1HO0FBRkUsU0FBakI7QUFJRDtBQUNGO0FBQ0YsR0EvQkQ7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBaUNBaUIsTUFBTSxDQUFDQyxNQUFQLENBQWN2SixVQUFkLEVBQTBCRixRQUExQixFQUFvQ0MsT0FBcEM7ZUFFZUMsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVycm9ycyB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgdW53cmFwRWwgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgeyB1dGlsIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuXG5sZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5jb25zdCBGTElDS19NUyA9IDMwMDA7XG5cbmNvbW1hbmRzLm5hdGl2ZVRhcCA9IGFzeW5jIGZ1bmN0aW9uIChlbCkge1xuICBlbCA9IHVud3JhcEVsKGVsKTtcbiAgbGV0IGNvbW1hbmQgPSBgYXUudGFwQnlJZCgnJHtlbH0nKWA7XG4gIGF3YWl0IHRoaXMudWlBdXRvQ2xpZW50LnNlbmRDb21tYW5kKGNvbW1hbmQpO1xufTtcblxuY29tbWFuZHMuY2xpY2sgPSBhc3luYyBmdW5jdGlvbiAoZWwpIHtcbiAgZWwgPSB1bndyYXBFbChlbCk7XG4gIGlmICh0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgaWYgKHRoaXMub3B0cy5uYXRpdmVXZWJUYXAgJiYgIXRoaXMuaXNSZWFsRGV2aWNlKCkpIHtcbiAgICAgIC8vIGF0b21zLWJhc2VkIGNsaWNrcyBkb24ndCBhbHdheXMgd29yayBpbiBzYWZhcmkgN1xuICAgICAgYXdhaXQgdGhpcy5uYXRpdmVXZWJUYXAoZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgYXRvbXNFbGVtZW50ID0gdGhpcy51c2VBdG9tc0VsZW1lbnQoZWwpO1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZXhlY3V0ZUF0b20oJ2NsaWNrJywgW2F0b21zRWxlbWVudF0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodGhpcy5vcHRzLnVzZVJvYm90KSB7XG4gICAgICAvKiBUT0RPICovdGhyb3cgbmV3IGVycm9ycy5Ob3RZZXRJbXBsZW1lbnRlZEVycm9yKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF3YWl0IHRoaXMubmF0aXZlVGFwKGVsKTtcbiAgICB9XG4gIH1cbn07XG5cbmNvbW1hbmRzLmNsaWNrQ3VycmVudCA9IGFzeW5jIGZ1bmN0aW9uICgvKmJ1dHRvbiovKSB7XG4gIGlmICh0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgaWYgKF8uaXNOdWxsKHRoaXMuY3VyV2ViQ29vcmRzKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Vbmtub3duRXJyb3IoJ0Nhbm5vdCBjYWxsIGNsaWNrKCkgYmVmb3JlIGNhbGxpbmcgbW92ZVRvKCkgdG8gc2V0IGNvb3JkcycpO1xuICAgIH1cbiAgICBhd2FpdCB0aGlzLmNsaWNrV2ViQ29vcmRzKCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRoaXMuY3VyQ29vcmRzID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLlVua25vd25FcnJvcihcIkNhbm5vdCBjYWxsIGNsaWNrKCkgYmVmb3JlIGNhbGxpbmcgbW92ZVRvKCkgdG8gc2V0IGNvb3Jkc1wiKTtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5jbGlja0Nvb3Jkcyh0aGlzLmN1ckNvb3Jkcyk7XG4gIH1cbn07XG5cbmhlbHBlcnMuY2xpY2tDb29yZHMgPSBhc3luYyBmdW5jdGlvbiAoY29vcmRzKSB7XG4gIGlmICh0aGlzLm9wdHMudXNlUm9ib3QpIHtcbiAgICAvKiBUT0RPICovdGhyb3cgbmV3IGVycm9ycy5Ob3RZZXRJbXBsZW1lbnRlZEVycm9yKCk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IG9wdHMgPSBjb29yZHM7XG4gICAgb3B0cy50YXBDb3VudCA9IDE7XG4gICAgb3B0cy5kdXJhdGlvbiA9IDAuMztcbiAgICBvcHRzLnRvdWNoQ291bnQgPSAxO1xuICAgIGxldCBjb21tYW5kID0gYGF1LmNvbXBsZXhUYXAoJHtKU09OLnN0cmluZ2lmeShvcHRzKX0pYDtcbiAgICBhd2FpdCB0aGlzLnVpQXV0b0NsaWVudC5zZW5kQ29tbWFuZChjb21tYW5kKTtcbiAgfVxufTtcblxuY29tbWFuZHMubW9iaWxlUm90YXRpb24gPSBhc3luYyBmdW5jdGlvbiAoeCwgeSwgcmFkaXVzLCByb3RhdGlvbiwgdG91Y2hDb3VudCwgZHVyYXRpb24sIGVsKSB7XG4gIGlmICh0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Ob3RZZXRJbXBsZW1lbnRlZEVycm9yKCk7XG4gIH1cbiAgZWwgPSB1bndyYXBFbChlbCk7XG4gIGxldCBsb2NhdGlvbiA9IHt4LCB5fTtcbiAgbGV0IG9wdGlvbnMgPSB7ZHVyYXRpb24sIHJhZGl1cywgcm90YXRpb24sIHRvdWNoQ291bnR9O1xuICBpZiAoZWwpIHtcbiAgICBpZiAodGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgICAgLy8gbm90IGltcGxlbWVudGVkIHlldCBpbiB0aGUgd2ViXG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLk5vdFlldEltcGxlbWVudGVkRXJyb3IoKTtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy51aUF1dG9DbGllbnQuc2VuZENvbW1hbmQoXG4gICAgICAvLyBVSUFFbGVtZW50LnJvdGF0ZVdpdGhPcHRpb25zIHRha2VzIG9ubHkgb25lIG9wdGlvbnMgcGFyYW0uXG4gICAgICBgYXUuZ2V0RWxlbWVudCgnJHtlbH0nKS5yb3RhdGVXaXRoT3B0aW9ucygke0pTT04uc3RyaW5naWZ5KG9wdGlvbnMpfSlgKTtcbiAgfSBlbHNlIHtcbiAgICBhd2FpdCB0aGlzLnVpQXV0b0NsaWVudC5zZW5kQ29tbWFuZChcbiAgICAgIGB0YXJnZXQucm90YXRlV2l0aE9wdGlvbnMoJHtKU09OLnN0cmluZ2lmeShsb2NhdGlvbil9LCAke0pTT04uc3RyaW5naWZ5KG9wdGlvbnMpfSlgKTtcbiAgfVxufTtcblxuaGVscGVycy5oYW5kbGVUYXAgPSBhc3luYyBmdW5jdGlvbiAoZ2VzdHVyZSkge1xuICBsZXQgb3B0aW9ucyA9IGdlc3R1cmUub3B0aW9ucztcbiAgbGV0IGNtZEJhc2UgPSBvcHRpb25zLmVsZW1lbnQgPyBgYXUuZ2V0RWxlbWVudCgnJHtvcHRpb25zLmVsZW1lbnR9JylgIDpcbiAgICAnVUlBVGFyZ2V0LmxvY2FsVGFyZ2V0KCkuZnJvbnRNb3N0QXBwKCknO1xuXG4gIC8vIHN0YXJ0IGJ5IGdldHRpbmcgdGhlIHNpemUgYW5kIHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50IHdlIGFyZSB0YXBwaW5nXG4gIGxldCByZWN0ID0gYXdhaXQgdGhpcy51aUF1dG9DbGllbnQuc2VuZENvbW1hbmQoYCR7Y21kQmFzZX0ucmVjdCgpYCk7XG5cbiAgLy8gZGVmYXVsdCB0byBjZW50ZXJcbiAgbGV0IG9mZnNldFggPSAwLjU7XG4gIGxldCBvZmZzZXRZID0gMC41O1xuXG4gIGxldCBzaXplID0ge3c6IHJlY3Quc2l6ZS53aWR0aCwgaDogcmVjdC5zaXplLmhlaWdodH07XG5cbiAgLy8gZGVmYXVsdCBvcHRpb25zIHgveSB0byBjZW50ZXIsIG5vIG1hdHRlciB0aGUgY29udGFpbmVyXG4gIG9wdGlvbnMueCA9IChvcHRpb25zLnggfHwgKHNpemUudyAvIDIpKTtcbiAgb3B0aW9ucy55ID0gKG9wdGlvbnMueSB8fCAoc2l6ZS5oIC8gMikpO1xuXG4gIG9mZnNldFggPSBvcHRpb25zLnggLyBzaXplLnc7XG4gIG9mZnNldFkgPSBvcHRpb25zLnkgLyBzaXplLmg7XG5cbiAgbGV0IG9wdHMgPSB7XG4gICAgdGFwT2Zmc2V0OiB7XG4gICAgICB4OiBvZmZzZXRYLFxuICAgICAgeTogb2Zmc2V0WVxuICAgIH0sXG4gICAgdGFwQ291bnQ6IG9wdGlvbnMuY291bnQgfHwgMSxcbiAgICB0b3VjaENvdW50OiAxXG4gIH07XG4gIGxldCBjbWQgPSBgJHtjbWRCYXNlfS50YXBXaXRoT3B0aW9ucygke0pTT04uc3RyaW5naWZ5KG9wdHMpfSlgO1xuICByZXR1cm4gYXdhaXQgdGhpcy51aUF1dG9DbGllbnQuc2VuZENvbW1hbmQoY21kKTtcbn07XG5cbmhlbHBlcnMuaXNEcmFnID0gZnVuY3Rpb24gKGdlc3R1cmVzKSB7XG4gIHJldHVybiAoXG4gICAgZ2VzdHVyZXMubGVuZ3RoID09PSA0ICYmXG4gICAgZ2VzdHVyZXNbMF0uYWN0aW9uID09PSAncHJlc3MnICYmXG4gICAgZ2VzdHVyZXNbMV0uYWN0aW9uID09PSAnd2FpdCcgJiZcbiAgICBnZXN0dXJlc1syXS5hY3Rpb24gPT09ICdtb3ZlVG8nICYmXG4gICAgZ2VzdHVyZXNbM10uYWN0aW9uID09PSAncmVsZWFzZSdcbiAgKTtcbn07XG5cbmhlbHBlcnMuaXNQaW5jaEFuZFpvb20gPSBmdW5jdGlvbiAoZ2VzdHVyZXMpIHtcbiAgcmV0dXJuIChcbiAgICBnZXN0dXJlcy5sZW5ndGggPT09IDMgJiZcbiAgICBnZXN0dXJlc1swXS5hY3Rpb24gPT09ICdwcmVzcycgJiZcbiAgICBnZXN0dXJlc1sxXS5hY3Rpb24gPT09ICdtb3ZlVG8nICYmXG4gICAgZ2VzdHVyZXNbMl0uYWN0aW9uID09PSAncmVsZWFzZSdcbiAgKTtcbn07XG5cbmhlbHBlcnMuZ2V0Q29vcmRpbmF0ZXMgPSBhc3luYyBmdW5jdGlvbiAoZ2VzdHVyZSkge1xuICBsZXQgZWwgPSBnZXN0dXJlLm9wdGlvbnMuZWxlbWVudDtcblxuICAvLyBkZWZhdWx0c1xuICBsZXQgY29vcmRpbmF0ZXMgPSB7eDogMCwgeTogMCwgYXJlT2Zmc2V0czogZmFsc2V9O1xuXG4gIC8vIGZpZ3VyZSBvdXQgdGhlIGVsZW1lbnQgY29vcmRpbmF0ZXMuXG4gIGlmIChlbCkge1xuICAgIGxldCBjb21tYW5kID0gYGF1LmdldEVsZW1lbnQoJyR7ZWx9JykucmVjdCgpYDtcbiAgICBsZXQgcmVjdCA9IGF3YWl0IHRoaXMudWlBdXRvQ2xpZW50LnNlbmRDb21tYW5kKGNvbW1hbmQpO1xuICAgIGxldCBwb3MgPSB7eDogcmVjdC5vcmlnaW4ueCwgeTogcmVjdC5vcmlnaW4ueX07XG4gICAgbGV0IHNpemUgPSB7dzogcmVjdC5zaXplLndpZHRoLCBoOiByZWN0LnNpemUuaGVpZ2h0fTtcblxuICAgIC8vIGRlZmF1bHRzXG4gICAgbGV0IG9mZnNldFggPSAwO1xuICAgIGxldCBvZmZzZXRZID0gMDtcblxuICAgIC8vIGdldCB0aGUgcmVhbCBvZmZzZXRzXG4gICAgaWYgKGdlc3R1cmUub3B0aW9ucy54IHx8IGdlc3R1cmUub3B0aW9ucy55KSB7XG4gICAgICBvZmZzZXRYID0gKGdlc3R1cmUub3B0aW9ucy54IHx8IDApO1xuICAgICAgb2Zmc2V0WSA9IChnZXN0dXJlLm9wdGlvbnMueSB8fCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2Zmc2V0WCA9IChzaXplLncgLyAyKTtcbiAgICAgIG9mZnNldFkgPSAoc2l6ZS5oIC8gMik7XG4gICAgfVxuXG4gICAgLy8gYXBwbHkgdGhlIG9mZnNldHNcbiAgICBjb29yZGluYXRlcy54ID0gcG9zLnggKyBvZmZzZXRYO1xuICAgIGNvb3JkaW5hdGVzLnkgPSBwb3MueSArIG9mZnNldFk7XG4gIH0gZWxzZSB7XG4gICAgLy8gbW92ZVRvIGNvb3JkaW5hdGVzIGFyZSBwYXNzZWQgaW4gYXMgb2Zmc2V0c1xuICAgIGNvb3JkaW5hdGVzLmFyZU9mZnNldHMgPSAoZ2VzdHVyZS5hY3Rpb24gPT09ICdtb3ZlVG8nKTtcbiAgICBjb29yZGluYXRlcy54ID0gKGdlc3R1cmUub3B0aW9ucy54IHx8IDApO1xuICAgIGNvb3JkaW5hdGVzLnkgPSAoZ2VzdHVyZS5vcHRpb25zLnkgfHwgMCk7XG4gIH1cbiAgcmV0dXJuIGNvb3JkaW5hdGVzO1xufTtcblxuaGVscGVycy5hcHBseU1vdmVUb09mZnNldCA9IGZ1bmN0aW9uIChmaXJzdENvb3JkaW5hdGVzLCBzZWNvbmRDb29yZGluYXRlcykge1xuICBpZiAoc2Vjb25kQ29vcmRpbmF0ZXMuYXJlT2Zmc2V0cykge1xuICAgIHJldHVybiB7XG4gICAgICB4OiBmaXJzdENvb3JkaW5hdGVzLnggKyBzZWNvbmRDb29yZGluYXRlcy54LFxuICAgICAgeTogZmlyc3RDb29yZGluYXRlcy55ICsgc2Vjb25kQ29vcmRpbmF0ZXMueSxcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzZWNvbmRDb29yZGluYXRlcztcbiAgfVxufTtcblxuaGVscGVycy5oYW5kbGVEcmFnID0gYXN5bmMgZnVuY3Rpb24gKGdlc3R1cmVzKSB7XG4gIC8vIGdldCBnZXN0dXJlc1xuICBsZXQgcHJlc3MgPSBnZXN0dXJlc1swXTtcbiAgbGV0IHdhaXQgPSBnZXN0dXJlc1sxXTtcbiAgbGV0IG1vdmVUbyA9IGdlc3R1cmVzWzJdO1xuXG4gIC8vIGdldCBkcmFnIGRhdGFcbiAgbGV0IHByZXNzQ29vcmRpbmF0ZXMgPSBhd2FpdCB0aGlzLmdldENvb3JkaW5hdGVzKHByZXNzKTtcbiAgbGV0IGR1cmF0aW9uID0gKHBhcnNlSW50KHdhaXQub3B0aW9ucy5tcywgMTApIC8gMTAwMCk7XG4gIGxldCBtb3ZlVG9Db29yZGluYXRlcyA9IGF3YWl0IHRoaXMuZ2V0Q29vcmRpbmF0ZXMobW92ZVRvKTtcblxuICAvLyB1cGRhdGUgbW92ZVRvIGNvb3JkaW5hdGVzIHdpdGggb2Zmc2V0XG4gIG1vdmVUb0Nvb3JkaW5hdGVzID0gdGhpcy5hcHBseU1vdmVUb09mZnNldChwcmVzc0Nvb3JkaW5hdGVzLCBtb3ZlVG9Db29yZGluYXRlcyk7XG5cbiAgLy8gYnVpbGQgZHJhZyBjb21tYW5kXG4gIGxldCBkcmFnQ29tbWFuZCA9IChgYXUuZHJhZ0FwcChgICtcbiAgICBgJHtwcmVzc0Nvb3JkaW5hdGVzLnh9LCAke3ByZXNzQ29vcmRpbmF0ZXMueX0sIGAgK1xuICAgIGAke21vdmVUb0Nvb3JkaW5hdGVzLnh9LCAke21vdmVUb0Nvb3JkaW5hdGVzLnl9LCBgICtcbiAgICBgJHtkdXJhdGlvbn0pYCk7XG5cbiAgLy8gZXhlY3V0ZSBkcmFnIGNvbW1hbmRcbiAgcmV0dXJuIGF3YWl0IHRoaXMudWlBdXRvQ2xpZW50LnNlbmRDb21tYW5kKGRyYWdDb21tYW5kKTtcbn07XG5cbmhlbHBlcnMuaGFuZGxlUGluY2hBbmRab29tID0gYXN5bmMgZnVuY3Rpb24gKGdlc3R1cmVzKSB7XG4gIC8vIGdldCBnZXN0dXJlc1xuICBsZXQgcHJlc3MgPSBnZXN0dXJlc1swXTtcbiAgbGV0IG1vdmVUbyA9IGdlc3R1cmVzWzFdO1xuXG4gIC8vIGdldCBwaW5jaCBkYXRhXG4gIGxldCBwcmVzc0Nvb3JkaW5hdGVzID0gYXdhaXQgdGhpcy5nZXRDb29yZGluYXRlcyhwcmVzcyk7XG4gIGxldCBtb3ZlVG9Db29yZGluYXRlcyA9IGF3YWl0IHRoaXMuZ2V0Q29vcmRpbmF0ZXMobW92ZVRvKTtcblxuICAvLyB1cGRhdGUgbW92ZVRvIGNvb3JkaW5hdGVzIHdpdGggb2Zmc2V0XG4gIG1vdmVUb0Nvb3JkaW5hdGVzID0gdGhpcy5hcHBseU1vdmVUb09mZnNldChwcmVzc0Nvb3JkaW5hdGVzLCBtb3ZlVG9Db29yZGluYXRlcyk7XG5cbiAgLy8gYnVpbGQgcGluY2ggY29tbWFuZFxuICBsZXQgcGluY2hDb21tYW5kID0gKGBhdS5kcmFnQXBwKGAgK1xuICAgIGAke3ByZXNzQ29vcmRpbmF0ZXMueH0sICR7cHJlc3NDb29yZGluYXRlcy55fSwgYCArXG4gICAgYCR7bW92ZVRvQ29vcmRpbmF0ZXMueH0sICR7bW92ZVRvQ29vcmRpbmF0ZXMueX1gKTtcblxuICByZXR1cm4gYXdhaXQgdGhpcy51aUF1dG9DbGllbnQuc2VuZENvbW1hbmQocGluY2hDb21tYW5kKTtcbn07XG5cbmNvbW1hbmRzLnBlcmZvcm1Ub3VjaCA9IGFzeW5jIGZ1bmN0aW9uIChnZXN0dXJlcykge1xuICBpZiAodGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuTm90WWV0SW1wbGVtZW50ZWRFcnJvcigpO1xuICB9XG5cbiAgaWYgKGdlc3R1cmVzLmxlbmd0aCA9PT0gMSAmJiBnZXN0dXJlc1swXS5hY3Rpb24gPT09ICd0YXAnKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuaGFuZGxlVGFwKGdlc3R1cmVzWzBdKTtcbiAgfSBlbHNlIGlmICh0aGlzLmlzRHJhZyhnZXN0dXJlcykpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5oYW5kbGVEcmFnKGdlc3R1cmVzKTtcbiAgfVxuICBsZXQgdG91Y2hTdGF0ZU9iamVjdHMgPSBhd2FpdCB0aGlzLnBhcnNlVG91Y2goZ2VzdHVyZXMpO1xuICBhd2FpdCB0aGlzLnVpQXV0b0NsaWVudC5zZW5kQ29tbWFuZChgdGFyZ2V0LnRvdWNoKCR7SlNPTi5zdHJpbmdpZnkodG91Y2hTdGF0ZU9iamVjdHMpfSlgKTtcbn07XG5cbmNvbW1hbmRzLnBhcnNlVG91Y2ggPSBhc3luYyBmdW5jdGlvbiAoZ2VzdHVyZXMpIHtcbiAgLy8gYHJlbGVhc2VgIGlzIGF1dG9tYXRpYyBpbiBpT1NcbiAgaWYgKF8ubGFzdChnZXN0dXJlcykuYWN0aW9uID09PSAncmVsZWFzZScpIHtcbiAgICBnZXN0dXJlcy5wb3AoKTtcbiAgfVxuXG4gIGxldCB0b3VjaFN0YXRlT2JqZWN0cyA9IFtdO1xuICBsZXQgZmluaXNoUGFyc2luZyA9ICgpID0+IHtcbiAgICBsZXQgcHJldlBvcyA9IG51bGw7XG5cbiAgICAvLyB3ZSBuZWVkIHRvIGNoYW5nZSB0aGUgdGltZSAod2hpY2ggaXMgbm93IGFuIG9mZnNldClcbiAgICAvLyBhbmQgdGhlIHBvc2l0aW9uICh3aGljaCBtYXkgYmUgYW4gb2Zmc2V0KVxuICAgIGxldCB0aW1lID0gMDtcbiAgICBmb3IgKGxldCBzdGF0ZSBvZiB0b3VjaFN0YXRlT2JqZWN0cykge1xuICAgICAgaWYgKHN0YXRlLnRvdWNoWzBdID09PSBmYWxzZSkge1xuICAgICAgICAvLyBpZiB3ZSBoYXZlIG5vIHBvc2l0aW9uICh0aGlzIGhhcHBlbnMgd2l0aCBgd2FpdGApIHdlIG5lZWQgdGhlIHByZXZpb3VzIG9uZVxuICAgICAgICBzdGF0ZS50b3VjaFswXSA9IHByZXZQb3M7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLnRvdWNoWzBdLm9mZnNldCAmJiBwcmV2UG9zKSB7XG4gICAgICAgIC8vIHRoZSBjdXJyZW50IHBvc2l0aW9uIGlzIGFuIG9mZnNldFxuICAgICAgICBzdGF0ZS50b3VjaFswXS54ICs9IHByZXZQb3MueDtcbiAgICAgICAgc3RhdGUudG91Y2hbMF0ueSArPSBwcmV2UG9zLnk7XG4gICAgICB9XG4gICAgICAvLyBwcmV2ZW50IHdhaXQgPT4gcHJlc3MgPT4gbW92ZXRvIGNyYXNoXG4gICAgICBpZiAoc3RhdGUudG91Y2hbMF0pIHtcbiAgICAgICAgZGVsZXRlIHN0YXRlLnRvdWNoWzBdLm9mZnNldDtcbiAgICAgICAgcHJldlBvcyA9IHN0YXRlLnRvdWNoWzBdO1xuICAgICAgfVxuXG5cbiAgICAgIGxldCB0aW1lT2Zmc2V0ID0gc3RhdGUudGltZU9mZnNldDtcbiAgICAgIHRpbWUgKz0gdGltZU9mZnNldDtcbiAgICAgIHN0YXRlLnRpbWUgPSB0aW1lO1xuXG4gICAgICBkZWxldGUgc3RhdGUudGltZU9mZnNldDtcbiAgICB9XG4gIH07XG5cbiAgbGV0IG5lZWRzUG9pbnQgPSAoYWN0aW9uKSA9PiB7XG4gICAgcmV0dXJuIF8uaW5jbHVkZXMoWydwcmVzcycsICdtb3ZlVG8nLCAndGFwJywgJ2xvbmdQcmVzcyddLCBhY3Rpb24pO1xuICB9O1xuXG4gIGxldCBjeWNsZVRocm91Z2hHZXN0dXJlcyA9IGFzeW5jICgpID0+IHtcbiAgICBsZXQgZ2VzdHVyZSA9IGdlc3R1cmVzLnNoaWZ0KCk7XG4gICAgaWYgKHR5cGVvZiBnZXN0dXJlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gZmluaXNoUGFyc2luZygpO1xuICAgIH1cbiAgICBsZXQgdGFwUG9pbnQgPSBmYWxzZTtcblxuICAgIGlmIChuZWVkc1BvaW50KGdlc3R1cmUuYWN0aW9uKSkgeyAvLyBwcmVzcywgbG9uZ1ByZXNzLCBtb3ZlVG8gYW5kIHRhcCBhbGwgbmVlZCBhIHBvc2l0aW9uXG4gICAgICBsZXQgZWwgPSBnZXN0dXJlLm9wdGlvbnMuZWxlbWVudDtcbiAgICAgIGlmIChlbCkge1xuICAgICAgICBsZXQgY29tbWFuZCA9IGBhdS5nZXRFbGVtZW50KCcke2VsfScpLnJlY3QoKWA7XG4gICAgICAgIGxldCByZWN0ID0gYXdhaXQgdGhpcy51aUF1dG9DbGllbnQuc2VuZENvbW1hbmQoY29tbWFuZCk7XG4gICAgICAgIGxldCBwb3MgPSB7eDogcmVjdC5vcmlnaW4ueCwgeTogcmVjdC5vcmlnaW4ueX07XG4gICAgICAgIGxldCBzaXplID0ge3c6IHJlY3Quc2l6ZS53aWR0aCwgaDogcmVjdC5zaXplLmhlaWdodH07XG5cbiAgICAgICAgaWYgKGdlc3R1cmUub3B0aW9ucy54IHx8IGdlc3R1cmUub3B0aW9ucy55KSB7XG4gICAgICAgICAgdGFwUG9pbnQgPSB7XG4gICAgICAgICAgICBvZmZzZXQ6IGZhbHNlLFxuICAgICAgICAgICAgeDogcG9zLnggKyAoZ2VzdHVyZS5vcHRpb25zLnggfHwgMCksXG4gICAgICAgICAgICB5OiBwb3MueSArIChnZXN0dXJlLm9wdGlvbnMueSB8fCAwKVxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFwUG9pbnQgPSB7XG4gICAgICAgICAgICBvZmZzZXQ6IGZhbHNlLFxuICAgICAgICAgICAgeDogcG9zLnggKyAoc2l6ZS53IC8gMiksXG4gICAgICAgICAgICB5OiBwb3MueSArIChzaXplLmggLyAyKVxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdG91Y2hTdGF0ZU9iamVjdCA9IHtcbiAgICAgICAgICB0aW1lT2Zmc2V0OiAwLjIsXG4gICAgICAgICAgdG91Y2g6IFtcbiAgICAgICAgICAgIHRhcFBvaW50XG4gICAgICAgICAgXVxuICAgICAgICB9O1xuICAgICAgICB0b3VjaFN0YXRlT2JqZWN0cy5wdXNoKHRvdWNoU3RhdGVPYmplY3QpO1xuICAgICAgICBhd2FpdCBjeWNsZVRocm91Z2hHZXN0dXJlcygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaU9TIGV4cGVjdHMgYWJzb2x1dGUgY29vcmRpbmF0ZXMsIHNvIHdlIG5lZWQgdG8gc2F2ZSB0aGVzZSBhcyBvZmZzZXRzXG4gICAgICAgIC8vIGFuZCB0aGVuIHRyYW5zbGF0ZSB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuICAgICAgICB0YXBQb2ludCA9IHtcbiAgICAgICAgICBvZmZzZXQ6IHRydWUsXG4gICAgICAgICAgeDogKGdlc3R1cmUub3B0aW9ucy54IHx8IDApLFxuICAgICAgICAgIHk6IChnZXN0dXJlLm9wdGlvbnMueSB8fCAwKVxuICAgICAgICB9O1xuICAgICAgICBsZXQgdG91Y2hTdGF0ZU9iamVjdCA9IHtcbiAgICAgICAgICB0aW1lT2Zmc2V0OiAwLjIsXG4gICAgICAgICAgdG91Y2g6IFtcbiAgICAgICAgICAgIHRhcFBvaW50XG4gICAgICAgICAgXVxuICAgICAgICB9O1xuICAgICAgICB0b3VjaFN0YXRlT2JqZWN0cy5wdXNoKHRvdWNoU3RhdGVPYmplY3QpO1xuICAgICAgICBhd2FpdCBjeWNsZVRocm91Z2hHZXN0dXJlcygpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbiB0aGlzIGNhc2Ugd2UgbmVlZCB0aGUgcHJldmlvdXMgZW50cnkncyB0YXAgcG9pbnRcbiAgICAgIHRhcFBvaW50ID0gZmFsc2U7IC8vIHRlbXBvcmFyeSBtYXJrZXJcbiAgICAgIGxldCBvZmZzZXQgPSAwLjI7XG4gICAgICBpZiAoZ2VzdHVyZS5hY3Rpb24gPT09ICd3YWl0Jykge1xuICAgICAgICBpZiAodHlwZW9mIGdlc3R1cmUub3B0aW9ucy5tcyAhPT0gJ3VuZGVmaW5lZCcgfHwgZ2VzdHVyZS5vcHRpb25zLm1zICE9PSBudWxsKSB7XG4gICAgICAgICAgb2Zmc2V0ID0gKHBhcnNlSW50KGdlc3R1cmUub3B0aW9ucy5tcywgMTApIC8gMTAwMCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCB0b3VjaFN0YXRlT2JqZWN0ID0ge1xuICAgICAgICB0aW1lT2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgIHRvdWNoOiBbXG4gICAgICAgICAgdGFwUG9pbnRcbiAgICAgICAgXVxuICAgICAgfTtcbiAgICAgIHRvdWNoU3RhdGVPYmplY3RzLnB1c2godG91Y2hTdGF0ZU9iamVjdCk7XG4gICAgICBhd2FpdCBjeWNsZVRocm91Z2hHZXN0dXJlcygpO1xuICAgIH1cbiAgfTtcblxuICBhd2FpdCBjeWNsZVRocm91Z2hHZXN0dXJlcygpO1xuICByZXR1cm4gdG91Y2hTdGF0ZU9iamVjdHM7XG59O1xuXG5sZXQgbWVyZ2VTdGF0ZXMgPSBmdW5jdGlvbiAoc3RhdGVzKSB7XG4gIGxldCBnZXRTbGljZSA9IGZ1bmN0aW9uIChzdGF0ZXMsIGluZGV4KSB7XG4gICAgbGV0IGFycmF5ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFycmF5LnB1c2goc3RhdGVzW2ldW2luZGV4XSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5O1xuICB9O1xuXG4gIGxldCB0aW1lU2VxdWVuY2UgPSBmdW5jdGlvbiAoc3RhdGVzKSB7XG4gICAgbGV0IHNlcSA9IFtdO1xuICAgIF8uZWFjaChzdGF0ZXMsIGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgbGV0IHRpbWVzID0gXy5tYXAoc3RhdGUsIFwidGltZVwiKTtcbiAgICAgIHNlcSA9IF8udW5pb24oc2VxLCB0aW1lcyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2VxLnNvcnQoKTtcbiAgfTtcblxuICAvLyBmb3Igbm93IHdlIHdpbGwganVzdCBhc3N1bWUgdGhhdCB0aGUgdGltZXMgbGluZSB1cFxuICBsZXQgbWVyZ2VkID0gW107XG4gIF8uZWFjaCh0aW1lU2VxdWVuY2Uoc3RhdGVzKSwgZnVuY3Rpb24gKHRpbWUsIGluZGV4KSB7XG4gICAgbGV0IHNsaWNlID0gZ2V0U2xpY2Uoc3RhdGVzLCBpbmRleCk7XG4gICAgbGV0IG9iaiA9IHtcbiAgICAgIHRpbWUsXG4gICAgICB0b3VjaDogW11cbiAgICB9O1xuICAgIF8uZWFjaChzbGljZSwgZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgb2JqLnRvdWNoLnB1c2goYWN0aW9uLnRvdWNoWzBdKTtcbiAgICB9KTtcbiAgICBtZXJnZWQucHVzaChvYmopO1xuICB9KTtcbiAgcmV0dXJuIG1lcmdlZDtcbn07XG5cbmNvbW1hbmRzLnBlcmZvcm1NdWx0aUFjdGlvbiA9IGFzeW5jIGZ1bmN0aW9uIChhY3Rpb25zLCAvKmVsKi8pIHtcbiAgaWYgKHRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vdFlldEltcGxlbWVudGVkRXJyb3IoKTtcbiAgfVxuXG4gIC8vIGVsID0gdW53cmFwRWwoZWwpO1xuICAvLyBUT0RPOiB3aHkgZWxlbWVudElkIGlzIG5vdCB1c2VkXG4gIGxldCBzdGF0ZXMgPSBbXTtcbiAgbGV0IGN5Y2xlVGhyb3VnaEFjdGlvbnMgPSBhc3luYyAoKSA9PiB7XG4gICAgbGV0IGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBsZXQgbWVyZ2VkU3RhdGVzID0gbWVyZ2VTdGF0ZXMoc3RhdGVzKTtcbiAgICAgIGlmICh0aGlzLmlzUGluY2hBbmRab29tKG1lcmdlZFN0YXRlcykpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5oYW5kbGVQaW5jaEFuZFpvb20obWVyZ2VkU3RhdGVzKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXdhaXQgdGhpcy51aUF1dG9DbGllbnQuc2VuZENvbW1hbmQgKGB0YXJnZXQudG91Y2goJHtKU09OLnN0cmluZ2lmeShtZXJnZWRTdGF0ZXMpfSlgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCB2YWwgPSBhd2FpdCB0aGlzLnBhcnNlVG91Y2goYWN0aW9uKTtcbiAgICBzdGF0ZXMucHVzaCh2YWwpO1xuICAgIGF3YWl0IGN5Y2xlVGhyb3VnaEFjdGlvbnMoKTtcbiAgfTtcbiAgYXdhaXQgY3ljbGVUaHJvdWdoQWN0aW9ucygpO1xufTtcblxuaGVscGVycy5tb2JpbGVTY3JvbGwgPSBhc3luYyBmdW5jdGlvbiAob3B0cyA9IHt9KSB7XG4gIGxldCBkaXJlY3Rpb24gPSBvcHRzLmRpcmVjdGlvbjtcbiAgbGV0IGVsID0gb3B0cy5lbGVtZW50O1xuICBlbCA9IHVud3JhcEVsKGVsKTtcbiAgaWYgKHRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICAvLyBub3QgaW1wbGVtZW50ZWQgeWV0IGluIHdlYlxuICAgIHRocm93IG5ldyBlcnJvcnMuTm90WWV0SW1wbGVtZW50ZWRFcnJvcigpO1xuICB9IGVsc2Uge1xuICAgIGlmICh1dGlsLmhhc1ZhbHVlKGVsKSAmJiAhdXRpbC5oYXNWYWx1ZShkaXJlY3Rpb24pKSB7XG4gICAgICBhd2FpdCB0aGlzLnNjcm9sbFRvRWxlbWVudChlbCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRpcmVjdGlvbiA9IF8uY2FwaXRhbGl6ZShkaXJlY3Rpb24pO1xuICAgIGxldCBjb21tYW5kO1xuICAgIGlmIChfLmlzTnVsbChlbCkgfHwgXy5pc1VuZGVmaW5lZChlbCkpIHtcbiAgICAgIC8vIEJ5IGRlZmF1bHQsIHNjcm9sbCB0aGUgZmlyc3Qgc2Nyb2xsdmlldy5cbiAgICAgIGNvbW1hbmQgPSBgYXUuc2Nyb2xsRmlyc3RWaWV3KCcke2RpcmVjdGlvbn0nKWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGlmIGVsZW1lbnQgaXMgZGVmaW5lZCwgY2FsbCBzY3JvbGxMZWZ0LCBzY3JvbGxSaWdodCwgc2Nyb2xsVXAsIGFuZCBzY3JvbGxEb3duIG9uIHRoZSBlbGVtZW50LlxuICAgICAgY29tbWFuZCA9IGBhdS5nZXRFbGVtZW50KCcke2VsfScpLnNjcm9sbCR7ZGlyZWN0aW9ufSgpYDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMudWlBdXRvQ2xpZW50LnNlbmRDb21tYW5kKGNvbW1hbmQpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKCFfLmluY2x1ZGVzKGVyci5tZXNzYWdlLCAna0FYRXJyb3JGYWlsdXJlJykpIHRocm93IGVycjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjdXJseVxuXG4gICAgICBsb2dnZXIud2FybignUmVjZWl2ZWQga0FYRXJyb3JGYWlsdXJlLCBnZW5lcmFsbHkgaW5kaWNhdGluZyBhbiBhdHRlbXB0ICcgK1xuICAgICAgICAgICAgICAgICAgJ3RvIHNjcm9sbCBwYXN0IHRoZSBlbmQgb2YgdGhlIHZpZXcuIENvbnRpbnVpbmcuJyk7XG4gICAgfVxuICB9XG59O1xuXG5jb21tYW5kcy5zY3JvbGxUb0VsZW1lbnQgPSBhc3luYyBmdW5jdGlvbiAoZWxlbWVudCkge1xuICBlbGVtZW50ID0gdW53cmFwRWwoZWxlbWVudCk7XG4gIGNvbnN0IGNvbW1hbmQgPSBgYXUuZ2V0RWxlbWVudCgnJHtlbGVtZW50fScpLnNjcm9sbFRvVmlzaWJsZSgpYDtcbiAgYXdhaXQgdGhpcy51aUF1dG9DbGllbnQuc2VuZENvbW1hbmQoY29tbWFuZCk7XG59O1xuXG5jb21tYW5kcy5mbGljayA9IGFzeW5jIGZ1bmN0aW9uIChlbCwgeHNwZWVkLCB5c3BlZWQsIHhvZmZzZXQsIHlvZmZzZXQsIHNwZWVkKSB7XG4gIGVsID0gdW53cmFwRWwoZWwpO1xuICBpZiAoXy5ldmVyeShbZWwsIHhvZmZzZXQsIHlvZmZzZXQsIHNwZWVkXSwgKHApID0+IHtyZXR1cm4gIV8uaXNOdWxsKHApICYmICFfLmlzVW5kZWZpbmVkKHApO30pKSB7XG4gICAgYXdhaXQgdGhpcy5mbGlja0VsZW1lbnQoZWwsIHhvZmZzZXQsIHlvZmZzZXQsIHNwZWVkKTtcbiAgfSBlbHNlIGlmIChfLmV2ZXJ5KFt4c3BlZWQsIHlzcGVlZF0sIChwKSA9PiB7cmV0dXJuICFfLmlzTnVsbChwKSAmJiAhXy5pc1VuZGVmaW5lZChwKTt9KSkge1xuICAgIGF3YWl0IHRoaXMueHlTcGVlZEZsaWNrKHhzcGVlZCwgeXNwZWVkKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLlVua25vd25FcnJvcihcbiAgICAgICdCYWQgZmxpY2sgcGFyYW1ldGVycywgcGFzcyBlaXRoZXIgKHhzcGVlZCwgeXNwZWVkKSBvciAoZWxlbWVudCwgeG9mZnNldCwgeW9mZnNldCwgc3BlZWQpIScpO1xuICB9XG59O1xuXG5oZWxwZXJzLnh5U3BlZWRGbGljayA9IGFzeW5jIGZ1bmN0aW9uICh4U3BlZWQsIHlTcGVlZCkge1xuICBsZXQgY29tbWFuZCA9IGBhdS50b3VjaEZsaWNrRnJvbVNwZWVkKCR7eFNwZWVkfSwke3lTcGVlZH0pYDtcbiAgYXdhaXQgQi5hbGwoW1xuICAgIHRoaXMudWlBdXRvQ2xpZW50LnNlbmRDb21tYW5kKGNvbW1hbmQpLFxuICAgIEIuZGVsYXkoRkxJQ0tfTVMpXG4gIF0pO1xufTtcblxuaGVscGVycy5mbGlja0VsZW1lbnQgPSBhc3luYyBmdW5jdGlvbiAoZWwsIHhvZmZzZXQsIHlvZmZzZXQsIHNwZWVkKSB7XG4gIGVsID0gdW53cmFwRWwoZWwpO1xuICBsZXQgY29tbWFuZCA9IFwiXCI7XG4gIGlmICh0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgLy8gc3BlZWQgaXMgbm90IHVzZWQgYmVjYXVzZSB1bmRlcmx5aW5nIFVJQVRhcmdldC5mbGlja0Zyb21UbyBkb2Vzbid0IHN1cHBvcnQgaXRcbiAgICBhd2FpdCB0aGlzLndlYkZsaWNrRWxlbWVudChlbCwgeG9mZnNldCwgeW9mZnNldCk7XG4gIH0gZWxzZSB7XG4gICAgY29tbWFuZCA9IGBhdS5nZXRFbGVtZW50KCcke2VsfScpLnRvdWNoRmxpY2soJHt4b2Zmc2V0fSwke3lvZmZzZXR9LCR7c3BlZWR9KWA7XG4gICAgYXdhaXQgQi5hbGwoW1xuICAgICAgdGhpcy51aUF1dG9DbGllbnQuc2VuZENvbW1hbmQoY29tbWFuZCksXG4gICAgICBCLmRlbGF5KEZMSUNLX01TKVxuICAgIF0pO1xuICB9XG59O1xuXG4vLyBUT0RPOiBtYXliZSByZW5hbWUgdGhpcyBpbiBtanNvbndwXG5jb21tYW5kcy5tb2JpbGVTaGFrZSA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgYXdhaXQgdGhpcy51aUF1dG9DbGllbnQuc2VuZENvbW1hbmQoXCJhdS5zaGFrZSgpXCIpO1xufTtcblxuY29tbWFuZHMubW92ZVRvID0gYXN5bmMgZnVuY3Rpb24gKGVsLCB4b2Zmc2V0ID0gMCwgeW9mZnNldCA9IDApIHtcbiAgZWwgPSB1bndyYXBFbChlbCk7XG5cbiAgaWYgKHRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICBsZXQge3gsIHl9ID0gYXdhaXQgdGhpcy5nZXRMb2NhdGlvbihlbCk7XG4gICAgbGV0IGNvb3JkcyA9IHtcbiAgICAgIHg6IHggKyB4b2Zmc2V0LFxuICAgICAgeTogeSArIHlvZmZzZXRcbiAgICB9O1xuICAgIHRoaXMuY3VyV2ViQ29vcmRzID0gY29vcmRzO1xuICAgIGxldCBhdG9tc0VsZW1lbnQgPSB0aGlzLnVzZUF0b21zRWxlbWVudChlbCk7XG4gICAgbGV0IHJlbENvb3JkcyA9IHt4OiB4b2Zmc2V0LCB5OiB5b2Zmc2V0fTtcbiAgICBhd2FpdCB0aGlzLmV4ZWN1dGVBdG9tKCdtb3ZlX21vdXNlJywgW2F0b21zRWxlbWVudCwgcmVsQ29vcmRzXSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKF8uaXNOdWxsKGVsKSB8fCBfLmlzVW5kZWZpbmVkKGVsKSkge1xuICAgICAgaWYgKCF0aGlzLmN1ckNvb3Jkcykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzLlVua25vd25FeGNlcHRpb24oXG4gICAgICAgICAgJ0N1cnJlbnQgY3Vyc29yIHBvc2l0aW9uIHVua25vd24sIHBsZWFzZSB1c2UgbW92ZVRvIHdpdGggYW4gZWxlbWVudCB0aGUgZmlyc3QgdGltZS4nKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY3VyQ29vcmRzID0ge1xuICAgICAgICB4OiB0aGlzLmN1ckNvb3Jkcy54ICsgeG9mZnNldCxcbiAgICAgICAgeTogdGhpcy5jdXJDb29yZHMueSArIHlvZmZzZXRcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBlbFBvcyA9IGF3YWl0IHRoaXMuZ2V0TG9jYXRpb24oZWwpO1xuICAgICAgdGhpcy5jdXJDb29yZHMgPSB7XG4gICAgICAgIHg6IGVsUG9zLnggKyB4b2Zmc2V0LFxuICAgICAgICB5OiBlbFBvcy55ICsgeW9mZnNldFxuICAgICAgfTtcbiAgICB9XG4gIH1cbn07XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuZXhwb3J0IHsgY29tbWFuZHMsIGhlbHBlcnMgfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy9nZXN0dXJlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
