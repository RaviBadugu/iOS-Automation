"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumBaseDriver = require("appium-base-driver");

var _lodash = _interopRequireDefault(require("lodash"));

var _js2xmlparser = _interopRequireDefault(require("js2xmlparser2"));

var _logger = _interopRequireDefault(require("../logger"));

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var utils = _interopRequireWildcard(require("../utils"));

var _nodeSimctl = require("node-simctl");

var _moment = _interopRequireDefault(require("moment"));

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;
const MOMENT_FORMAT_ISO8601 = 'YYYY-MM-DDTHH:mm:ssZ';
commands.active = (0, _asyncToGenerator2.default)(function* () {
  if (this.isWebContext()) {
    return yield this.executeAtom('active_element', []);
  } else {
    return yield this.uiAutoClient.sendCommand("au.getActiveElement()");
  }
});

commands.getDeviceTime = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (format = MOMENT_FORMAT_ISO8601) {
    _logger.default.info('Attempting to capture iOS device date and time');

    let cmd;
    let args;
    let inputFormat;

    if (this.isRealDevice()) {
      try {
        cmd = yield _appiumSupport.fs.which('idevicedate');
      } catch (err) {
        _logger.default.errorAndThrow('Could not capture device date and time using libimobiledevice idevicedate. ' + 'Libimobiledevice is probably not installed');
      }

      _logger.default.info(`Found idevicedate: '${cmd}'`);

      args = ['-u', this.opts.udid];
      inputFormat = 'ddd MMM DD HH:mm:ss z YYYY';
    } else {
      _logger.default.warn('On simulator. Assuming device time is the same as host time');

      cmd = 'date';
      args = ['+%Y-%m-%dT%H:%M:%S%z'];
      inputFormat = MOMENT_FORMAT_ISO8601;
    }

    const stdout = (yield (0, _teen_process.exec)(cmd, args)).stdout.trim();

    _logger.default.debug(`Got the following output out of '${cmd} ${args.join(' ')}': ${stdout}`);

    const parsedTimestamp = (0, _moment.default)(stdout, inputFormat);

    if (!parsedTimestamp.isValid()) {
      _logger.default.warn(`Cannot parse the timestamp '${stdout}' returned by '${cmd}' command. Returning it as is`);

      return stdout;
    }

    return parsedTimestamp.format(format);
  });

  return function () {
    return _ref2.apply(this, arguments);
  };
}();

commands.hideKeyboard = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (strategy, ...possibleKeys) {
    possibleKeys.pop();
    let cmd;

    let key = _lodash.default.find(possibleKeys, k => {
      return k;
    });

    if (key) {
      strategy = strategy || 'pressKey';
      cmd = `au.hideKeyboard('${strategy}', '${key}')`;
    } else {
      strategy = strategy || 'default';
      cmd = `au.hideKeyboard('${strategy}')`;
    }

    yield this.uiAutoClient.sendCommand(cmd);
  });

  return function (_x) {
    return _ref3.apply(this, arguments);
  };
}();

commands.getPageSource = (0, _asyncToGenerator2.default)(function* () {
  if (this.isWebContext()) {
    const script = 'return document.documentElement.outerHTML';
    return yield this.executeAtom('execute_script', [script, []]);
  } else {
    return yield this.getNativePageSource();
  }
});
helpers.getNativePageSource = (0, _asyncToGenerator2.default)(function* () {
  let jsonSource = yield this.getSourceForElementForXML();

  if (typeof jsonSource === "string") {
    jsonSource = JSON.parse(jsonSource);
  }

  let xmlSource = (0, _js2xmlparser.default)("AppiumAUT", jsonSource, {
    wrapArray: {
      enabled: false,
      elementName: "element"
    },
    declaration: {
      include: true
    },
    prettyPrinting: {
      indentString: "    "
    }
  });
  return xmlSource;
});

commands.background = function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (secs) {
    yield this.uiAutoClient.sendCommand(`au.background(${secs})`);
  });

  return function (_x2) {
    return _ref6.apply(this, arguments);
  };
}();

commands.lock = function () {
  var _ref7 = (0, _asyncToGenerator2.default)(function* (secs) {
    if (!secs) {
      _logger.default.debug('No seconds parameter. Using 0 seconds');

      secs = 0;
    }

    yield this.uiAutoClient.sendCommand(`au.lock(${secs})`);
  });

  return function (_x3) {
    return _ref7.apply(this, arguments);
  };
}();

commands.closeApp = (0, _asyncToGenerator2.default)(function* () {
  let appName = this.opts.app || this.opts.bundleId;

  try {
    yield this.stop();

    _logger.default.info(`Successfully closed the '${appName}' app.`);
  } catch (err) {
    _logger.default.warn(`Something went wrong while closing the '${appName}' app.`);

    throw err;
  }
});
commands.launchApp = (0, _asyncToGenerator2.default)(function* () {
  let appName = this.opts.app || this.opts.bundleId;

  try {
    yield this.start();

    _logger.default.info(`Successfully launched the '${appName}' app.`);
  } catch (err) {
    _logger.default.warn(`Something went wrong while launching the '${appName}' app.`);

    throw err;
  }
});

commands.removeApp = function () {
  var _ref10 = (0, _asyncToGenerator2.default)(function* (bundleId) {
    if (this.isRealDevice()) {
      yield this.realDevice.remove(bundleId);
    } else {
      yield this.sim.removeApp(bundleId);
    }
  });

  return function (_x4) {
    return _ref10.apply(this, arguments);
  };
}();

commands.keys = function () {
  var _ref11 = (0, _asyncToGenerator2.default)(function* (keys) {
    if (this.isWebContext()) {
      let el = yield this.active();

      if (_lodash.default.isUndefined(el.ELEMENT)) {
        throw new _appiumBaseDriver.errors.NoSuchElementError();
      }

      yield this.setValue(keys, el.ELEMENT);
    } else {
      if (_lodash.default.isArray(keys)) {
        keys = keys.join('');
      }

      if (!_lodash.default.isString(keys)) {
        keys = keys.toString();
      }

      keys = _appiumSupport.util.escapeSpecialChars(keys, "'");
      let command = `au.sendKeysToActiveElement('${keys}')`;
      yield this.uiAutoClient.sendCommand(command);
    }
  });

  return function (_x5) {
    return _ref11.apply(this, arguments);
  };
}();

commands.setGeoLocation = function () {
  var _ref12 = (0, _asyncToGenerator2.default)(function* (location) {
    yield this.uiAutoClient.sendCommand(`target.setLocation(${JSON.stringify(location)})`);
  });

  return function (_x6) {
    return _ref12.apply(this, arguments);
  };
}();

commands.getWindowSize = function () {
  var _ref13 = (0, _asyncToGenerator2.default)(function* (windowHandle = "current") {
    if (windowHandle !== "current") {
      throw new _appiumBaseDriver.errors.NotYetImplementedError("Currently only getting current window size is supported.");
    }

    if (this.isWebContext()) {
      return yield this.executeAtom('get_window_size', []);
    } else {
      return yield this.uiAutoClient.sendCommand("au.getWindowSize()");
    }
  });

  return function () {
    return _ref13.apply(this, arguments);
  };
}();

commands.getWindowRect = (0, _asyncToGenerator2.default)(function* () {
  const _ref15 = yield this.getWindowSize(),
        width = _ref15.width,
        height = _ref15.height;

  return {
    width,
    height,
    x: 0,
    y: 0
  };
});

commands.getStrings = function () {
  var _ref16 = (0, _asyncToGenerator2.default)(function* (language, stringFile = null) {
    _logger.default.debug(`Gettings strings for language '${language}' and string file '${stringFile}'`);

    return yield utils.parseLocalizableStrings(Object.assign({}, this.opts, {
      language,
      stringFile,
      strictMode: true
    }));
  });

  return function (_x7) {
    return _ref16.apply(this, arguments);
  };
}();

commands.setUrl = function () {
  var _ref17 = (0, _asyncToGenerator2.default)(function* (url) {
    _logger.default.debug(`Attempting to set url '${url}'`);

    if (!this.isWebContext()) {
      yield (0, _nodeSimctl.openUrl)(this.opts.udid || this.sim.udid, url);
      return;
    }

    this.setCurrentUrl(url);
    this.curWebFrames = [];
    yield this.remote.navToUrl(url);
  });

  return function (_x8) {
    return _ref17.apply(this, arguments);
  };
}();

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
