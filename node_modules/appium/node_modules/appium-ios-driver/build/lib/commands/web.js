"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumBaseDriver = require("appium-base-driver");

var _cookies = _interopRequireDefault(require("../cookies"));

var _logger = _interopRequireDefault(require("../logger"));

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;
const ELEMENT_OFFSET = 5000;

commands.setFrame = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (frame) {
    if (!this.isWebContext()) {
      frame = frame ? frame : 'target.frontMostApp()';
      let command = `wd_frame = ${frame}`;
      return yield this.uiAutoClient.sendCommand(command);
    }

    let atom;

    if (_lodash.default.isNull(frame)) {
      this.curWebFrames = [];

      _logger.default.debug('Leaving web frame and going back to default content');

      return;
    }

    if (!_lodash.default.isUndefined(frame.ELEMENT)) {
      let atomsElement = this.useAtomsElement(frame.ELEMENT);
      let value = yield this.executeAtom('get_frame_window', [atomsElement]);

      _logger.default.debug(`Entering new web frame: '${value.WINDOW}'`);

      this.curWebFrames.unshift(value.WINDOW);
    } else {
      atom = _lodash.default.isNumber(frame) ? 'frame_by_index' : 'frame_by_id_or_name';
      let value = yield this.executeAtom(atom, [frame]);

      if (_lodash.default.isNull(value) || _lodash.default.isUndefined(value.WINDOW)) {
        throw new _appiumBaseDriver.errors.NoSuchFrameError();
      }

      _logger.default.debug(`Entering new web frame: '${value.WINDOW}'`);

      this.curWebFrames.unshift(value.WINDOW);
    }
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

commands.getCssProperty = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (propertyName, el) {
    let atomsElement = this.useAtomsElement(el);
    return yield this.executeAtom('get_value_of_css_property', [atomsElement, propertyName]);
  });

  return function (_x2, _x3) {
    return _ref2.apply(this, arguments);
  };
}();

commands.submit = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (el) {
    if (this.isWebContext()) {
      let atomsElement = this.useAtomsElement(el);
      yield this.executeAtom('submit', [atomsElement]);
    } else {
      throw new _appiumBaseDriver.errors.NotImplementedError();
    }
  });

  return function (_x4) {
    return _ref3.apply(this, arguments);
  };
}();

commands.refresh = (0, _asyncToGenerator2.default)(function* () {
  if (this.isWebContext()) {
    yield this.executeAtom('refresh', []);
  } else {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }
});
commands.getUrl = (0, _asyncToGenerator2.default)(function* () {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  let url = yield this.remote.execute('window.location.href');
  return url;
});
commands.title = (0, _asyncToGenerator2.default)(function* () {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  return yield this.executeAtom('title', [], true);
});
commands.getCookies = (0, _asyncToGenerator2.default)(function* () {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  _logger.default.debug('Retrieving all cookies');

  let script = 'return document.cookie';
  let jsCookies = yield this.executeAtom('execute_script', [script, []]);
  let cookies = [];

  try {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = _lodash.default.toPairs(_cookies.default.createJWPCookie(undefined, jsCookies))[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        let _step$value = (0, _slicedToArray2.default)(_step.value, 2),
            name = _step$value[0],
            value = _step$value[1];

        cookies.push({
          name,
          value
        });
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return cookies;
  } catch (err) {
    _logger.default.error(err);

    throw new _appiumBaseDriver.errors.UnknownError(`Error parsing cookies from result: '${jsCookies}'`);
  }
});

commands.setCookie = function () {
  var _ref8 = (0, _asyncToGenerator2.default)(function* (cookie) {
    if (!this.isWebContext()) {
      throw new _appiumBaseDriver.errors.NotImplementedError();
    }

    cookie = _lodash.default.clone(cookie);

    if (!cookie.path) {
      cookie.path = "/";
    }

    let jsCookie = _cookies.default.createJSCookie(cookie.name, cookie.value, {
      expires: _lodash.default.isNumber(cookie.expiry) ? new Date(cookie.expiry * 1000).toUTCString() : cookie.expiry,
      path: cookie.path,
      domain: cookie.domain,
      httpOnly: cookie.httpOnly,
      secure: cookie.secure
    });

    let script = `document.cookie = ${JSON.stringify(jsCookie)}`;
    yield this.executeAtom('execute_script', [script, []]);
  });

  return function (_x5) {
    return _ref8.apply(this, arguments);
  };
}();

commands.deleteCookie = function () {
  var _ref9 = (0, _asyncToGenerator2.default)(function* (cookieName) {
    if (!this.isWebContext()) {
      throw new _appiumBaseDriver.errors.NotImplementedError();
    }

    let cookies = yield this.getCookies();

    if (_lodash.default.indexOf(_lodash.default.map(cookies, 'name'), cookieName) === -1) {
      _logger.default.debug(`Cookie '${cookieName}' not found. Ignoring.`);

      return true;
    }

    return yield this._deleteCookie(cookieName);
  });

  return function (_x6) {
    return _ref9.apply(this, arguments);
  };
}();

commands.deleteCookies = (0, _asyncToGenerator2.default)(function* () {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  let cookies = yield this.getCookies();

  if (cookies.length) {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = cookies[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        let cookie = _step2.value;
        yield this._deleteCookie(cookie.name);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  }

  return true;
});

helpers._deleteCookie = function () {
  var _ref11 = (0, _asyncToGenerator2.default)(function* (cookieName) {
    _logger.default.debug(`Deleting cookie '${cookieName}'`);

    let webCookie = _cookies.default.expireCookie(cookieName, {
      path: "/"
    });

    let script = `document.cookie = ${JSON.stringify(webCookie)}`;
    yield this.executeAtom('execute_script', [script, []]);
  });

  return function (_x7) {
    return _ref11.apply(this, arguments);
  };
}();

extensions.findWebElementOrElements = function () {
  var _ref12 = (0, _asyncToGenerator2.default)(function* (strategy, selector, many, ctx) {
    var _this = this;

    let atomsElement = this.getAtomsElement(ctx);
    let element;

    let doFind = function () {
      var _ref13 = (0, _asyncToGenerator2.default)(function* () {
        element = yield _this.executeAtom(`find_element${many ? 's' : ''}`, [strategy, selector, atomsElement]);
        return !_lodash.default.isNull(element);
      });

      return function doFind() {
        return _ref13.apply(this, arguments);
      };
    }();

    try {
      yield this.implicitWaitForCondition(doFind);
    } catch (err) {
      if (err.message && _lodash.default.isFunction(err.message.match) && err.message.match(/Condition unmet/)) {
        element = [];
      } else {
        throw err;
      }
    }

    if (many) {
      return element;
    } else {
      if (!element || _lodash.default.size(element) === 0) {
        throw new _appiumBaseDriver.errors.NoSuchElementError();
      }

      return element;
    }
  });

  return function (_x8, _x9, _x10, _x11) {
    return _ref12.apply(this, arguments);
  };
}();

extensions.webFlickElement = function () {
  var _ref14 = (0, _asyncToGenerator2.default)(function* (el, xoffset, yoffset) {
    let atomsElement = yield this.useAtomsElement(el);

    let _ref15 = yield this.executeAtom('get_top_left_coordinates', [atomsElement]),
        x = _ref15.x,
        y = _ref15.y;

    let _ref16 = yield this.executeAtom('get_size', [atomsElement]),
        width = _ref16.width,
        height = _ref16.height;

    x = x + width / 2;
    y = y + height / 2;
    let from = yield this.translateWebCoords({
      x,
      y
    });
    let to = yield this.translateWebCoords({
      x: x + xoffset,
      y: y + yoffset
    });
    let args = {
      from,
      to
    };
    let command = `au.flick(${JSON.stringify(args)})`;
    yield this.uiAutoClient.sendCommand(command);
  });

  return function (_x12, _x13, _x14) {
    return _ref14.apply(this, arguments);
  };
}();

extensions.mobileWebNav = function () {
  var _ref17 = (0, _asyncToGenerator2.default)(function* (navType) {
    this.remote.allowNavigationWithoutReload();
    yield this.executeAtom('execute_script', [`history.${navType}();`, null]);
  });

  return function (_x15) {
    return _ref17.apply(this, arguments);
  };
}();

extensions.nativeWebTap = function () {
  var _ref18 = (0, _asyncToGenerator2.default)(function* (el) {
    let atomsElement = this.useAtomsElement(el);

    let _ref19 = yield this.executeAtom('get_top_left_coordinates', [atomsElement]),
        x = _ref19.x,
        y = _ref19.y;

    let _ref20 = yield this.executeAtom('get_size', [atomsElement]),
        width = _ref20.width,
        height = _ref20.height;

    x = x + width / 2;
    y = y + height / 2 + (yield this.getExtraNativeWebTapOffset());
    this.curWebCoords = {
      x,
      y
    };
    yield this.clickWebCoords();
    yield _bluebird.default.delay(500);
  });

  return function (_x16) {
    return _ref18.apply(this, arguments);
  };
}();

extensions.getExtraNativeWebTapOffset = (0, _asyncToGenerator2.default)(function* () {
  return 0;
});
extensions.clickWebCoords = (0, _asyncToGenerator2.default)(function* () {
  let coords = yield this.translateWebCoords(this.curWebCoords);
  yield this.clickCoords(coords);
});

extensions.translateWebCoords = function () {
  var _ref23 = (0, _asyncToGenerator2.default)(function* (coords) {
    _logger.default.debug(`Translating coordinates (${JSON.stringify(coords)}) to web coordinates`);

    let wvCmd = 'au.getElementsByType(\'webview\')';
    let webviewIndex = this.webContextIndex();
    let yOffset = this.opts.curOrientation === 'LANDSCAPE' ? this.landscapeWebCoordsOffset : 0;
    let webviews = yield this.uiAutoClient.sendCommand(wvCmd);

    if (webviews.length < 1) {
      throw new _appiumBaseDriver.errors.UnknownError.code('Could not find any webviews to click inside!');
    }

    if (_lodash.default.isUndefined(webviews[webviewIndex])) {
      _logger.default.warn(`Could not find webview at index ${webviewIndex}, taking ` + `last available one for clicking purposes`);

      webviewIndex = webviews.length - 1;
    }

    let wvId = webviews[webviewIndex].ELEMENT;
    let locCmd = `au.getElement('${wvId}').rect()`;
    let rect = yield this.uiAutoClient.sendCommand(locCmd);
    let wvPos = {
      x: rect.origin.x,
      y: rect.origin.y
    };
    let realDims = {
      w: rect.size.width,
      h: rect.size.height
    };
    let cmd = '(function () { return {w: document.width, h: document.height}; })()';

    let _ref24 = yield this.remote.execute(cmd),
        w = _ref24.w,
        h = _ref24.h;

    let wvDims = {
      w,
      h
    };

    if (wvDims && realDims && wvPos) {
      let xRatio = realDims.w / wvDims.w;
      let yRatio = realDims.h / wvDims.h;
      let serviceBarHeight = 20;

      if (parseFloat(this.opts.platformVersion) >= 8) {
        serviceBarHeight = 0;
      }

      let newCoords = {
        x: wvPos.x + Math.round(xRatio * coords.x),
        y: wvPos.y + yOffset + Math.round(yRatio * coords.y) - serviceBarHeight
      };

      _logger.default.debug(`Converted web coords ${JSON.stringify(coords)} ` + `into real coords ${JSON.stringify(newCoords)}`);

      return newCoords;
    }
  });

  return function (_x17) {
    return _ref23.apply(this, arguments);
  };
}();

helpers.clickCoords = function () {
  var _ref25 = (0, _asyncToGenerator2.default)(function* (coords) {
    if (this.useRobot) {
      throw new _appiumBaseDriver.errors.NotYetImplementedError();
    } else {
      let opts = coords;
      opts.tapCount = 1;
      opts.duration = 0.3;
      opts.touchCount = 1;
      let command = `au.complexTap(${JSON.stringify(opts)})`;
      yield this.uiAutoClient.sendCommand(command);
    }
  });

  return function (_x18) {
    return _ref25.apply(this, arguments);
  };
}();

helpers.executeAtom = function () {
  var _ref26 = (0, _asyncToGenerator2.default)(function* (atom, args, alwaysDefaultFrame = false) {
    let frames = alwaysDefaultFrame === true ? [] : this.curWebFrames;
    let promise = this.remote.executeAtom(atom, args, frames);
    return yield this.waitForAtom(promise);
  });

  return function (_x19, _x20) {
    return _ref26.apply(this, arguments);
  };
}();

helpers.executeAtomAsync = function () {
  var _ref27 = (0, _asyncToGenerator2.default)(function* (atom, args, responseUrl) {
    let promise = new _bluebird.default((resolve, reject) => {
      this.asyncPromise = {
        resolve,
        reject
      };
    });
    yield this.remote.executeAtomAsync(atom, args, this.curWebFrames, responseUrl);
    return yield this.waitForAtom(promise);
  });

  return function (_x21, _x22, _x23) {
    return _ref27.apply(this, arguments);
  };
}();

helpers.waitForAtom = function () {
  var _ref28 = (0, _asyncToGenerator2.default)(function* (promise) {
    let done = false;
    let error = null;
    promise.then(res => {
      done = true;
      return res;
    }).catch(err => {
      _logger.default.debug(`Error received while executing atom: ${err.message}`);

      done = true;
      error = err;
    });

    for (let i = 0; i < 10; i++) {
      if (done) break;
      yield _bluebird.default.delay(500);
      if (done) break;

      if (yield this.checkForAlert()) {
        return '';
      }
    }

    let res = yield promise;

    if (error) {
      throw error;
    }

    return this.parseExecuteResponse(res);
  });

  return function (_x24) {
    return _ref28.apply(this, arguments);
  };
}();

helpers.checkForAlert = (0, _asyncToGenerator2.default)(function* () {
  if (!_lodash.default.isNull(this.uiAutoClient)) {
    _logger.default.debug('atom did not return yet, checking to see if ' + 'we are blocked by an alert');

    let present = yield this.uiAutoClient.sendCommand('au.alertIsPresent()');

    if (!present) {
      _logger.default.debug('No alert found.');
    } else {
      _logger.default.debug('Found an alert, returning control to client');
    }

    return present;
  }
});

helpers.getAtomsElement = function (wdId) {
  let atomsId;

  try {
    atomsId = this.webElementIds[parseInt(wdId, 10) - ELEMENT_OFFSET];
  } catch (e) {
    return null;
  }

  if (_lodash.default.isUndefined(atomsId)) {
    return null;
  }

  return {
    ELEMENT: atomsId
  };
};

helpers.useAtomsElement = function (el) {
  if (parseInt(el, 10) < ELEMENT_OFFSET) {
    _logger.default.debug(`Element with id '${el}' passed in for use with ` + `atoms, but it's out of our internal scope. Adding ${ELEMENT_OFFSET}.`);

    el = (parseInt(el, 10) + ELEMENT_OFFSET).toString();
  }

  let atomsElement = this.getAtomsElement(el);

  if (atomsElement === null) {
    throw new _appiumBaseDriver.errors.UnknownError(`Error converting element ID for using in WD atoms: '${el}'`);
  }

  return atomsElement;
};

helpers.convertElementsForAtoms = function (args = []) {
  let newArgs = [];
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = args[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      let arg = _step3.value;

      if (!_lodash.default.isNull(arg) && !_lodash.default.isUndefined(arg.ELEMENT)) {
        let atomsElement = this.getAtomsElement(arg.ELEMENT);

        if (atomsElement === null) {
          throw new _appiumBaseDriver.errors.UnknownError(`Error converting element ID for using in WD atoms: '${arg.ELEMENT}'`);
        }

        newArgs.push(atomsElement);
      } else {
        newArgs.push(arg);
      }
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
        _iterator3.return();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  return newArgs;
};

helpers.parseExecuteResponse = function (res) {
  if (_lodash.default.isNull(res) || _lodash.default.isUndefined(res)) return null;
  let wdElement = null;

  if (!_lodash.default.isArray(res)) {
    if (!_lodash.default.isUndefined(res.ELEMENT)) {
      wdElement = this.parseElementResponse(res);

      if (wdElement === null) {
        throw new _appiumBaseDriver.errors.UnknownError(`Error converting element ID atom for using in WD: '${res.ELEMENT}'`);
      }

      res = wdElement;
    }
  } else {
    let args = [];
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = res[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        let arg = _step4.value;
        wdElement = arg;

        if (!_lodash.default.isNull(arg) && !_lodash.default.isUndefined(arg.ELEMENT)) {
          wdElement = this.parseElementResponse(arg);

          if (wdElement === null) {
            throw new _appiumBaseDriver.errors.UnknownError(`Error converting element ID atom for using in WD: '${arg.ELEMENT}'`);
          }

          args.push(wdElement);
        } else {
          args.push(arg);
        }
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
          _iterator4.return();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }

    res = args;
  }

  return res;
};

helpers.parseElementResponse = function (element) {
  let objId = element.ELEMENT;
  let clientId = (ELEMENT_OFFSET + this.webElementIds.length).toString();
  this.webElementIds.push(objId);
  return {
    ELEMENT: clientId
  };
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
