"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _logger = _interopRequireDefault(require("../logger"));

var _appiumSupport = require("appium-support");

var _appiumBaseDriver = require("appium-base-driver");

var _lodash = _interopRequireDefault(require("lodash"));

var _js2xmlparser = _interopRequireDefault(require("js2xmlparser2"));

var _xmldom = _interopRequireDefault(require("xmldom"));

var _xpath = _interopRequireDefault(require("xpath"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _utils = require("../utils");

const MAGIC_FIRST_VIS_CHILD_SEL = /\/\*\[@firstVisible ?= ?('|")true\1\]/;
const MAGIC_SCROLLABLE_SEL = /\/\/\*\[@scrollable ?= ?('|")true\1\]/;
let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

helpers.findElOrEls = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (strategy, selector, mult, context) {
    context = (0, _utils.unwrapEl)(context);

    if (this.isWebContext()) {
      return yield this.findWebElementOrElements(strategy, selector, mult, context);
    } else {
      return yield this.findUIElementOrElements(strategy, selector, mult, context);
    }
  });

  return function (_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();

helpers.findUIElementOrElements = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (strategy, selector, mult, context) {
    var _this = this;

    if (strategy !== "xpath") {
      selector = _appiumSupport.util.escapeSpecialChars(selector, "'");
    }

    if (typeof context === "undefined" || !context) {
      context = '';
    } else if (typeof context === "string") {
      context = _appiumSupport.util.escapeSpecialChars(context, "'");
    }

    if (strategy === 'xpath' && MAGIC_SCROLLABLE_SEL.test(selector)) {
      return yield this.findScrollableElOrEls(mult, context);
    }

    if (strategy === 'xpath' && MAGIC_FIRST_VIS_CHILD_SEL.test(selector)) {
      if (mult) {
        throw new Error("Cannot get multiple first children");
      }

      return yield this.getFirstVisibleChild(context);
    }

    if (strategy === 'class name' && selector.indexOf('UIA') !== 0) {
      throw new _appiumBaseDriver.errors.InvalidSelectorError(`The class name selector must use full UIA class names. Try 'UIA${selector}' instead.`);
    }

    if (!selector) new _appiumBaseDriver.errors.InvalidSelectorError('Missing selector');

    let createGetElementCommand = function createGetElementCommand(strategy, selector, mult, context) {
      let ext = mult ? 's' : '';
      let command = "";
      context = !context ? context : `, '${context}'`;

      switch (strategy) {
        case "name":
          command = `au.getElement${ext}ByName('${selector}'${context})`;
          break;

        case "accessibility id":
          command = `au.getElement${ext}ByAccessibilityId('${selector}'${context})`;
          break;

        case "id":
          command = `au.getElement${ext}ById('${selector}')`;
          break;

        case "-ios uiautomation":
          command = `au.getElement${ext}ByUIAutomation('${selector}'${context})`;
          break;

        default:
          command = `au.getElement${ext}ByType('${selector}'${context})`;
      }

      return command;
    };

    let getLocalizedStringForSelector = function getLocalizedStringForSelector(selector, strings) {
      let newSelector = selector;

      if (strings) {
        let localizedSelector = strings[selector];

        if (localizedSelector) {
          newSelector = localizedSelector;
        } else {
          _logger.default.debug(`Id selector, '${selector}', not found in Localizable.strings.`);
        }
      }

      return newSelector;
    };

    let res;

    let doFind = function () {
      var _ref3 = (0, _asyncToGenerator2.default)(function* () {
        if (strategy === "xpath") {
          res = yield _this.findUIElementsByXpath(selector, mult, context);
        } else if (strategy === "id") {
          let findByAxIdCmd = createGetElementCommand("accessibility id", selector, mult, context);
          res = yield _this.uiAutoClient.sendCommand(findByAxIdCmd);

          if (!(res && _lodash.default.size(res) > 0)) {
            let findByIdCmd = createGetElementCommand("id", getLocalizedStringForSelector(selector, _this.opts.localizableStrings), mult, context);
            res = yield _this.uiAutoClient.sendCommand(findByIdCmd);
          }
        } else {
          let command = createGetElementCommand(strategy, selector, mult, context);
          res = yield _this.uiAutoClient.sendCommand(command);
        }

        return _lodash.default.size(res) > 0;
      });

      return function doFind() {
        return _ref3.apply(this, arguments);
      };
    }();

    try {
      yield this.implicitWaitForCondition(doFind);
    } catch (err) {
      if (err.message && err.message.match(/Condition unmet/)) {
        res = [];
      } else {
        throw err;
      }
    }

    if (mult) {
      return res;
    } else {
      if (!res || _lodash.default.size(res) === 0) {
        throw new _appiumBaseDriver.errors.NoSuchElementError();
      }

      return res;
    }
  });

  return function (_x5, _x6, _x7, _x8) {
    return _ref2.apply(this, arguments);
  };
}();

let _pathFromDomNode = function _pathFromDomNode(node) {
  let path = null;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _lodash.default.values(node.attributes)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      let attrObj = _step.value;

      if (attrObj.name === "path") {
        path = attrObj.value;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return path;
};

let _xmlSourceFromJson = function _xmlSourceFromJson(jsonSource) {
  if (typeof jsonSource === "string") {
    jsonSource = JSON.parse(jsonSource);
  }

  return (0, _js2xmlparser.default)("AppiumAUT", jsonSource, {
    wrapArray: {
      enabled: false,
      elementName: "element"
    },
    declaration: {
      include: true
    },
    prettyPrinting: {
      indentString: "    "
    }
  });
};

let _performXpathQueryOnJson = function _performXpathQueryOnJson(selector, jsonSource) {
  let xmlSource = _xmlSourceFromJson(jsonSource);

  let dom = new _xmldom.default.DOMParser().parseFromString(xmlSource);
  return _xpath.default.select(selector, dom);
};

commands.findUIElementsByXpath = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (selector, mult, context = null, curRetry = 1) {
    let sourceXml;

    try {
      sourceXml = yield this.getSourceForElementForXML(context);
    } catch (err) {
      _logger.default.warn("Error getting source, can't continue finding element by XPath");

      throw err;
    }

    let selectedNodes = _performXpathQueryOnJson(selector, sourceXml);

    if (!mult) {
      selectedNodes = selectedNodes.slice(0, 1);
    }

    let indexPaths = [];
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = selectedNodes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        let node = _step2.value;

        let ip = _pathFromDomNode(node);

        if (ip !== null) {
          indexPaths.push(ip);
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    if (indexPaths.length < 1) {
      return [];
    }

    let methodName;
    let methodArgs = [];

    if (!mult) {
      methodName = "getElementByIndexPath";
      methodArgs[0] = `'${indexPaths[0]}'`;
    } else {
      methodName = "getElementsByIndexPaths";
      methodArgs[0] = JSON.stringify(indexPaths);
    }

    if (context) {
      methodArgs[1] = `au.getElement('${context}')`;
    }

    let proxyCmd = `au.${methodName}(${methodArgs.join(", ")})`;
    let res;

    try {
      res = yield this.uiAutoClient.sendCommand(proxyCmd);
    } catch (err) {
      if (curRetry < 3) {
        _logger.default.debug("Got a warning from uiauto that some index paths " + "could not be resolved, trying again");

        yield _bluebird.default.delay(300);
        return yield this.findUIElementsByXpath(selector, mult, context, curRetry + 1);
      }

      throw err;
    }

    return res;
  });

  return function (_x9, _x10) {
    return _ref4.apply(this, arguments);
  };
}();

helpers.findScrollableElOrEls = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (mult, context) {
    const scrollTypes = ['UIAScrollView', 'UIATableView', 'UIACollectionView', 'UIAWebView'];
    let res = [];
    const ext = mult ? 's' : '';

    for (var _i = 0; _i < scrollTypes.length; _i++) {
      const scrollType = scrollTypes[_i];
      const command = `au.getElement${ext}ByType('${scrollType}'${context})`;

      if (mult) {
        let elements = yield this.uiAutoClient.sendCommand(command);

        if (!_lodash.default.isEmpty(elements)) {
          res.push(...elements);
        }
      } else {
        let element = yield this.uiAutoClient.sendCommand(command);

        if (element) {
          return element;
        }
      }
    }

    if (mult) {
      return res;
    }

    throw new _appiumBaseDriver.errors.NoSuchElementError();
  });

  return function (_x11, _x12) {
    return _ref5.apply(this, arguments);
  };
}();

helpers.getFirstVisibleChild = function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (elementId) {
    let visibleEls = yield this.findElementsFromElement('-ios uiautomation', '.elements().withPredicate("isVisible == 1");', elementId);
    return _lodash.default.first(visibleEls);
  });

  return function (_x13) {
    return _ref6.apply(this, arguments);
  };
}();

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
