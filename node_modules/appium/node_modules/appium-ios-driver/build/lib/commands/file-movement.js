"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

var _path = _interopRequireDefault(require("path"));

var _teen_process = require("teen_process");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

helpers.getSimFileFullPath = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (remotePath) {
    let basePath = this.sim.getDir();
    let appName = null;

    if (this.opts.app) {
      let appNameRegex = new RegExp(`\\${_path.default.sep}([\\w-]+\\.app)`);
      let appNameMatches = appNameRegex.exec(this.opts.app);

      if (appNameMatches) {
        appName = appNameMatches[1];
      }
    }

    if (_appiumSupport.system.isWindows()) {
      if (remotePath.indexof("://") === 1) {
        remotePath = remotePath.slice(4);
      }
    } else {
      if (remotePath.indexOf("/") === 0) {
        remotePath = remotePath.slice(1);
      }
    }

    if (remotePath.indexOf(appName) === 0) {
      _logger.default.debug("We want an app-relative file");

      let findPath = basePath;

      if (this.opts.platformVersion >= 8) {
        findPath = _path.default.resolve(basePath, "Containers", "Bundle");
      }

      findPath = findPath.replace(/\s/g, '\\ ');

      let _ref2 = yield (0, _teen_process.exec)('find', [findPath, '-name', appName]),
          stdout = _ref2.stdout;

      let appRoot = stdout.replace(/\n$/, '');
      let subPath = remotePath.substring(appName.length + 1);
      return _path.default.resolve(appRoot, subPath);
    } else {
      _logger.default.debug("We want a sim-relative file");

      return _path.default.resolve(basePath, remotePath);
    }
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

commands.pushFile = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (remotePath, base64Data) {
    _logger.default.debug(`Pushing ${remotePath} to iOS simulator`);

    if (this.isRealDevice()) {
      _logger.default.debug("Unsupported: cannot write files to physical device");

      throw new _appiumBaseDriver.errors.NotYetImplementedError();
    }

    let fullPath = yield this.getSimFileFullPath(remotePath);

    _logger.default.debug(`Attempting to write ${fullPath}...`);

    if (yield _appiumSupport.fs.exists(fullPath)) {
      _logger.default.debug(`${fullPath} already exists, deleting...`);

      yield _appiumSupport.fs.unlink(fullPath);
    }

    yield (0, _appiumSupport.mkdirp)(_path.default.dirname(fullPath));
    let content = Buffer.from(base64Data, 'base64');
    yield _appiumSupport.fs.writeFile(fullPath, content);

    _logger.default.debug(`Wrote ${content.length} bytes to ${fullPath}`);
  });

  return function (_x2, _x3) {
    return _ref3.apply(this, arguments);
  };
}();

commands.pullFile = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (remotePath) {
    _logger.default.debug(`Pulling ${remotePath} from sim`);

    if (this.isRealDevice()) {
      throw new _appiumBaseDriver.errors.NotYetImplementedError();
    }

    let fullPath = yield this.getSimFileFullPath(remotePath);

    _logger.default.debug(`Attempting to read ${fullPath}`);

    let data = yield _appiumSupport.fs.readFile(fullPath, {
      encoding: 'base64'
    });
    return data;
  });

  return function (_x4) {
    return _ref4.apply(this, arguments);
  };
}();

commands.pullFolder = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (remotePath) {
    _logger.default.debug(`Pulling '${remotePath}' from sim`);

    if (this.isRealDevice()) {
      throw new _appiumBaseDriver.errors.NotYetImplementedError();
    }

    let fullPath = yield this.getSimFileFullPath(remotePath);

    _logger.default.debug(`Adding ${fullPath} to an in-memory zip archive`);

    let buffer = yield _appiumSupport.zip.toInMemoryZip(fullPath);

    _logger.default.debug("Converting in-memory zip file to base64 encoded string");

    let data = buffer.toString('base64');

    _logger.default.debug("Returning in-memory zip file as base54 encoded string");

    return data;
  });

  return function (_x5) {
    return _ref5.apply(this, arguments);
  };
}();

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
