"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runSimulatorReset = runSimulatorReset;
exports.isolateSimulatorDevice = isolateSimulatorDevice;
exports.checkSimulatorAvailable = checkSimulatorAvailable;
exports.moveBuiltInApp = moveBuiltInApp;
exports.getAdjustedDeviceName = getAdjustedDeviceName;
exports.endSimulator = endSimulator;
exports.runRealDeviceReset = runRealDeviceReset;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumIosSimulator = require("appium-ios-simulator");

var _path = _interopRequireDefault(require("path"));

var utils = _interopRequireWildcard(require("./utils"));

var _logger = _interopRequireDefault(require("./logger"));

function checkSimulatorAvailable(_x, _x2, _x3) {
  return _checkSimulatorAvailable.apply(this, arguments);
}

function _checkSimulatorAvailable() {
  _checkSimulatorAvailable = (0, _asyncToGenerator2.default)(function* (opts, sdkVersion, availableDevices) {
    if (sdkVersion < 7.1) {
      _logger.default.debug('Instruments v < 7.1, not checking device string support');

      return;
    }

    _logger.default.debug('Checking whether our device string is supported');

    let dString = yield getAdjustedDeviceName(opts);

    let noDevicesError = function noDevicesError() {
      let msg = `Could not find a device to launch. You requested ` + `'${dString}', but the available devices were: ` + JSON.stringify(availableDevices);

      _logger.default.errorAndThrow(msg);
    };

    if (sdkVersion >= 8) {
      let sim = utils.getSimForDeviceString(dString, availableDevices);

      if (sim[0] === null || sim[1] === null) {
        noDevicesError();
      }

      _logger.default.debug(`iOS sim UDID is ${sim[1]}`);

      return sim[1];
    } else if (!_lodash.default.includes(availableDevices, dString)) {
      noDevicesError();
    }
  });
  return _checkSimulatorAvailable.apply(this, arguments);
}

function getAdjustedDeviceName(_x4) {
  return _getAdjustedDeviceName.apply(this, arguments);
}

function _getAdjustedDeviceName() {
  _getAdjustedDeviceName = (0, _asyncToGenerator2.default)(function* (opts) {
    opts._adjustedDeviceName = opts._adjustedDeviceName || (yield (0, _appiumIosSimulator.getDeviceString)(opts));
    return opts._adjustedDeviceName;
  });
  return _getAdjustedDeviceName.apply(this, arguments);
}

function moveBuiltInApp() {
  return _moveBuiltInApp.apply(this, arguments);
}

function _moveBuiltInApp() {
  _moveBuiltInApp = (0, _asyncToGenerator2.default)(function* () {});
  return _moveBuiltInApp.apply(this, arguments);
}

function runSimulatorReset(_x5, _x6, _x7) {
  return _runSimulatorReset.apply(this, arguments);
}

function _runSimulatorReset() {
  _runSimulatorReset = (0, _asyncToGenerator2.default)(function* (sim, opts, keepApp) {
    if (!opts.reset && !opts.fullReset) {
      _logger.default.debug('Reset not set, not ending sim');

      return;
    }

    _logger.default.debug('Running ios sim reset flow');

    yield endSimulator(sim);

    if (opts.fullReset) {
      _logger.default.debug('Full reset is on, so erasing simulator');

      yield fullResetSimulator(sim);
    } else if (opts.reset) {
      yield resetSimulator(sim, opts, keepApp);
    }
  });
  return _runSimulatorReset.apply(this, arguments);
}

function fullResetSimulator(_x8) {
  return _fullResetSimulator.apply(this, arguments);
}

function _fullResetSimulator() {
  _fullResetSimulator = (0, _asyncToGenerator2.default)(function* (sim) {
    _logger.default.debug('Cleaning the simulator');

    if (sim) {
      yield sim.clean();
    }
  });
  return _fullResetSimulator.apply(this, arguments);
}

function resetSimulator(_x9, _x10, _x11) {
  return _resetSimulator.apply(this, arguments);
}

function _resetSimulator() {
  _resetSimulator = (0, _asyncToGenerator2.default)(function* (sim, opts, keepApp) {
    if (!sim) return;

    _logger.default.debug('Cleaning sim state.');

    try {
      yield clearAppData(sim, opts, keepApp);
    } catch (err) {
      _logger.default.warn(err);

      _logger.default.warn("Could not reset simulator. Leaving as is.");
    }
  });
  return _resetSimulator.apply(this, arguments);
}

function endSimulator(_x12) {
  return _endSimulator.apply(this, arguments);
}

function _endSimulator() {
  _endSimulator = (0, _asyncToGenerator2.default)(function* (sim) {
    if (!sim) return;

    _logger.default.debug('Killing the simulator');

    yield sim.shutdown();
  });
  return _endSimulator.apply(this, arguments);
}

function isolateSimulatorDevice(_x13, _x14, _x15) {
  return _isolateSimulatorDevice.apply(this, arguments);
}

function _isolateSimulatorDevice() {
  _isolateSimulatorDevice = (0, _asyncToGenerator2.default)(function* (sim, opts, sdkVersion) {
    if (opts.isolateSimDevice && sdkVersion >= 8) {
      yield sim.isolateSim();
    }
  });
  return _isolateSimulatorDevice.apply(this, arguments);
}

function clearAppData(_x16, _x17, _x18) {
  return _clearAppData.apply(this, arguments);
}

function _clearAppData() {
  _clearAppData = (0, _asyncToGenerator2.default)(function* (sim, opts, keepApp) {
    if (!keepApp && opts.app && opts.bundleId) {
      yield sim.cleanCustomApp(_path.default.basename(opts.app), opts.bundleId);
    }
  });
  return _clearAppData.apply(this, arguments);
}

function resetRealDevice(_x19, _x20) {
  return _resetRealDevice.apply(this, arguments);
}

function _resetRealDevice() {
  _resetRealDevice = (0, _asyncToGenerator2.default)(function* (device, opts) {
    if (opts.bundleId && opts.fullReset) {
      let bundleId = opts.bundleId;

      _logger.default.debug(`Full reset requested. Will try to uninstall the app '${bundleId}'.`);

      if (!(yield device.isInstalled(bundleId))) {
        _logger.default.debug('App not installed. No need to uninstall');

        return;
      }

      try {
        yield device.remove(bundleId);
      } catch (err) {
        _logger.default.error(`Could not remove '${bundleId}' from device`);

        throw err;
      }

      _logger.default.debug(`Removed ${bundleId}`);
    }
  });
  return _resetRealDevice.apply(this, arguments);
}

function runRealDeviceReset(_x21, _x22) {
  return _runRealDeviceReset.apply(this, arguments);
}

function _runRealDeviceReset() {
  _runRealDeviceReset = (0, _asyncToGenerator2.default)(function* (device, opts) {
    if (opts.reset || opts.fullReset) {
      _logger.default.debug("Running ios real device reset flow");

      if (opts.reset) {
        yield resetRealDevice(device, opts);
      }
    } else {
      _logger.default.debug("Reset not set, continuing");
    }
  });
  return _runRealDeviceReset.apply(this, arguments);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
