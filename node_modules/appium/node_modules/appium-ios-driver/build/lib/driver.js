"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.defaultServerCaps = exports.IosDriver = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumBaseDriver = require("appium-base-driver");

var utils = _interopRequireWildcard(require("./utils"));

var _logger = _interopRequireDefault(require("./logger"));

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumSupport = require("appium-support");

var _appiumIosSimulator = require("appium-ios-simulator");

var _uiauto = require("./uiauto/uiauto");

var _instruments = require("./instruments");

var _asyncbox = require("asyncbox");

var _index = _interopRequireDefault(require("./commands/index"));

var _desiredCaps = require("./desired-caps");

var _nodeIdevice = _interopRequireDefault(require("node-idevice"));

var _safari = require("./commands/safari");

var _safariLauncher = require("./safari-launcher");

var _settings = require("./settings");

var _device = require("./device");

var _iwdp = require("./iwdp");

let iDevice = function iDevice(...args) {
  let device = (0, _nodeIdevice.default)(...args);
  let promisified = {};
  var _arr = ['install', 'installAndWait', 'remove', 'isInstalled'];

  for (var _i = 0; _i < _arr.length; _i++) {
    let m = _arr[_i];
    promisified[m] = _bluebird.default.promisify(device[m].bind(device));
  }

  return promisified;
};

const defaultServerCaps = {
  webStorageEnabled: false,
  locationContextEnabled: false,
  browserName: '',
  platform: 'MAC',
  javascriptEnabled: true,
  databaseEnabled: false,
  takesScreenshot: true,
  networkConnectionEnabled: false
};
exports.defaultServerCaps = defaultServerCaps;
const LOG_LOCATIONS = [_path.default.resolve('/', 'Library', 'Caches', 'com.apple.dt.instruments')];

if (process.env.HOME) {
  LOG_LOCATIONS.push(_path.default.resolve(process.env.HOME, 'Library', 'Logs', 'CoreSimulator'));
}

class IosDriver extends _appiumBaseDriver.BaseDriver {
  resetIos() {
    this.appExt = ".app";
    this.xcodeVersion = null;
    this.iosSdkVersion = null;
    this.logs = {};
    this.instruments = null;
    this.uiAutoClient = null;

    this.onInstrumentsDie = function () {};

    this.stopping = false;
    this.cbForCurrentCmd = null;
    this.remote = null;
    this.curContext = null;
    this.curWebFrames = [];
    this.selectingNewPage = false;
    this.windowHandleCache = [];
    this.webElementIds = [];
    this.implicitWaitMs = 0;
    this.asynclibWaitMs = 0;
    this.pageLoadMs = 6000;
    this.asynclibResponseCb = null;
    this.returnedFromExecuteAtom = {};
    this.executedAtomsCounter = 0;
    this.curCoords = null;
    this.curWebCoords = null;
    this.landscapeWebCoordsOffset = 0;
    this.keepAppToRetainPrefs = false;
    this.ready = false;
    this.asyncWaitMs = 0;
    this.settings = new _appiumBaseDriver.DeviceSettings({}, _lodash.default.noop);
    this.locatorStrategies = ['xpath', 'id', 'class name', '-ios uiautomation', 'accessibility id'];
    this.webLocatorStrategies = ['link text', 'css selector', 'tag name', 'partial link text'];
  }

  constructor(opts, shouldValidateCaps) {
    super(opts, shouldValidateCaps);
    this.desiredCapConstraints = _desiredCaps.desiredCapConstraints;
    this.resetIos();
    this.getDevicePixelRatio = _lodash.default.memoize(this.getDevicePixelRatio);
  }

  validateLocatorStrategy(strategy) {
    super.validateLocatorStrategy(strategy, this.isWebContext());
  }

  start() {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (_this.isRealDevice()) {
        yield _this.startRealDevice();
      } else {
        yield _this.startSimulator();
      }

      _this.ready = true;
    })();
  }

  createSession(...args) {
    var _this2 = this,
        _superprop_callCreateSession = (..._args) => super.createSession(..._args);

    return (0, _asyncToGenerator2.default)(function* () {
      let _ref = yield _superprop_callCreateSession(...args),
          _ref2 = (0, _slicedToArray2.default)(_ref, 2),
          sessionId = _ref2[0],
          caps = _ref2[1];

      _this2.xcodeVersion = yield utils.getAndCheckXcodeVersion(_this2.opts);

      _logger.default.debug(`Xcode version set to ${_this2.xcodeVersion.versionString}`);

      if (_this2.xcodeVersion.major >= 8) {
        let msg = `Appium's IosDriver does not support Xcode version ${_this2.xcodeVersion.versionString}. ` + 'Apple has deprecated UIAutomation. Use the "XCUITest" automationName capability instead.';

        _logger.default.errorAndThrow(new _appiumBaseDriver.errors.SessionNotCreatedError(msg));
      }

      _this2.caps = Object.assign({}, defaultServerCaps, _this2.caps);
      _this2.caps.desired = caps;
      yield utils.detectUdid(_this2.opts);
      yield utils.prepareIosOpts(_this2.opts);
      _this2.realDevice = null;
      _this2.useRobot = _this2.opts.useRobot;
      _this2.safari = _this2.opts.safari;
      _this2.opts.curOrientation = _this2.opts.initialOrientation;
      _this2.sock = _path.default.resolve(_this2.opts.tmpDir || '/tmp', 'instruments_sock');

      try {
        yield _this2.configureApp();
      } catch (err) {
        _logger.default.error(`Bad app: '${_this2.opts.app}'. App paths need to ` + `be absolute, or relative to the appium server ` + `install dir, or a URL to compressed file, or a ` + `special app name.`);

        throw err;
      }

      yield _this2.start();

      _this2.startNewCommandTimeout('createSession');

      return [sessionId, _this2.caps];
    })();
  }

  stop() {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this3.ready = false;

      if (_this3.uiAutoClient) {
        yield _this3.uiAutoClient.shutdown();
      }

      if (_this3.instruments) {
        try {
          yield _this3.instruments.shutdown();
        } catch (err) {
          _logger.default.error(`Instruments didn't shut down. ${err}`);
        }
      }

      if (_this3.caps && _this3.caps.customSSLCert && !_this3.isRealDevice()) {
        _logger.default.debug(`Uninstalling ssl certificate for udid '${_this3.sim.udid}'`);

        yield (0, _appiumIosSimulator.uninstallSSLCert)(_this3.caps.customSSLCert, _this3.sim.udid);
      }

      if (_this3.opts.enableAsyncExecuteFromHttps && !_this3.isRealDevice()) {
        yield _this3.stopHttpsAsyncServer();
      }

      _this3.uiAutoClient = null;
      _this3.instruments = null;
      _this3.realDevice = null;
      _this3.curCoords = null;
      _this3.opts.curOrientation = null;

      if (!_lodash.default.isEmpty(_this3.logs)) {
        yield _this3.logs.syslog.stopCapture();
        _this3.logs = {};
      }

      if (_this3.remote) {
        yield _this3.stopRemote();
      }

      yield _this3.stopIWDP();
    })();
  }

  deleteSession() {
    var _this4 = this,
        _superprop_callDeleteSession = (..._args2) => super.deleteSession(..._args2);

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug("Deleting ios session");

      yield _this4.stop();

      if (_this4.opts.clearSystemFiles) {
        yield utils.clearLogs(LOG_LOCATIONS);
      } else {
        _logger.default.debug('Not clearing log files. Use `clearSystemFiles` capability to turn on.');
      }

      if (_this4.isRealDevice()) {
        yield (0, _device.runRealDeviceReset)(_this4.realDevice, _this4.opts);
      } else {
        yield (0, _device.runSimulatorReset)(_this4.sim, _this4.opts, _this4.keepAppToRetainPrefs);
      }

      yield _superprop_callDeleteSession();
    })();
  }

  getSession() {
    var _this5 = this,
        _superprop_callGetSession = (..._args3) => super.getSession(..._args3);

    return (0, _asyncToGenerator2.default)(function* () {
      let caps = yield _superprop_callGetSession();
      const viewportRect = yield _this5.getViewportRect();
      const pixelRatio = yield _this5.getDevicePixelRatio();
      const statBarHeight = yield _this5.getStatusBarHeight();
      caps.viewportRect = viewportRect;
      caps.pixelRatio = pixelRatio;
      caps.statBarHeight = statBarHeight;
      return caps;
    })();
  }

  executeCommand(cmd, ...args) {
    var _this6 = this,
        _superprop_callExecuteCommand = (..._args4) => super.executeCommand(..._args4);

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug(`Executing iOS command '${cmd}'`);

      if (cmd === 'receiveAsyncResponse') {
        return yield _this6.receiveAsyncResponse(...args);
      } else if (_this6.ready || _lodash.default.includes(['launchApp'], cmd)) {
        return yield _superprop_callExecuteCommand(cmd, ...args);
      }

      throw new _appiumBaseDriver.errors.NoSuchDriverError(`Driver is not ready, cannot execute ${cmd}.`);
    })();
  }

  configureApp() {
    var _this7 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      try {
        if (!_this7.opts.bundleId && utils.appIsPackageOrBundle(_this7.opts.app)) {
          _this7.opts.bundleId = _this7.opts.app;
        }

        if (_this7.opts.app && _this7.opts.app.toLowerCase() === "settings") {
          if (parseFloat(_this7.opts.platformVersion) >= 8) {
            _logger.default.debug("We are on iOS8+ so not copying preferences app");

            _this7.opts.bundleId = "com.apple.Preferences";
            _this7.opts.app = null;
          }
        } else if (_this7.opts.app && _this7.opts.app.toLowerCase() === "calendar") {
          if (parseFloat(_this7.opts.platformVersion) >= 8) {
            _logger.default.debug("We are on iOS8+ so not copying calendar app");

            _this7.opts.bundleId = "com.apple.mobilecal";
            _this7.opts.app = null;
          }
        } else if (_this7.isSafari()) {
          if (!_this7.isRealDevice()) {
            if (parseFloat(_this7.opts.platformVersion) >= 8) {
              _logger.default.debug("We are on iOS8+ so not copying Safari app");

              _this7.opts.bundleId = _safari.SAFARI_BUNDLE;
              _this7.opts.app = null;
            }
          } else {
            if (!(yield _this7.realDevice.isInstalled(_this7.opts.bundleId))) {
              if (yield (0, _safariLauncher.needsInstall)()) {
                _logger.default.debug('SafariLauncher not found, building...');

                yield (0, _safariLauncher.install)();
              }

              _this7.opts.bundleId = _safariLauncher.SAFARI_LAUNCHER_BUNDLE;
            }
          }
        } else if (_this7.opts.bundleId && utils.appIsPackageOrBundle(_this7.opts.bundleId) && (_this7.opts.app === "" || utils.appIsPackageOrBundle(_this7.opts.app))) {
          _logger.default.debug("App is an iOS bundle, will attempt to run as pre-existing");
        } else {
          _this7.opts.app = yield _this7.helpers.configureApp(_this7.opts.app, '.app');
        }
      } catch (err) {
        _logger.default.error(err);

        throw new Error(`Bad app: ${_this7.opts.app}. App paths need to be absolute, or relative to the appium ` + "server install dir, or a URL to compressed file, or a special app name.");
      }
    })();
  }

  startSimulator() {
    var _this8 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield utils.removeInstrumentsSocket(_this8.sock);

      if (!_this8.xcodeVersion) {
        _logger.default.debug("Setting Xcode version");

        _this8.xcodeVersion = yield utils.getAndCheckXcodeVersion(_this8.opts);

        _logger.default.debug(`Xcode version set to ${_this8.xcodeVersion.versionString}`);
      }

      _logger.default.debug("Setting iOS SDK Version");

      _this8.iosSdkVersion = yield utils.getAndCheckIosSdkVersion();

      _logger.default.debug(`iOS SDK Version set to ${_this8.iosSdkVersion}`);

      let timeout = _lodash.default.isObject(_this8.opts.launchTimeout) ? _this8.opts.launchTimeout.global : _this8.opts.launchTimeout;
      let availableDevices = yield (0, _asyncbox.retry)(3, _instruments.instrumentsUtils.getAvailableDevices, timeout);
      let iosSimUdid = yield (0, _device.checkSimulatorAvailable)(_this8.opts, _this8.iosSdkVersion, availableDevices);
      _this8.sim = yield (0, _appiumIosSimulator.getSimulator)(iosSimUdid, _this8.xcodeVersion.versionString);
      yield (0, _device.moveBuiltInApp)(_this8.sim);
      _this8.opts.localizableStrings = yield utils.parseLocalizableStrings(_this8.opts);
      yield utils.setBundleIdFromApp(_this8.opts);
      yield _this8.createInstruments();
      {
        _this8.shouldPrelaunchSimulator = utils.shouldPrelaunchSimulator(_this8.opts, _this8.iosSdkVersion);
        let dString = yield (0, _device.getAdjustedDeviceName)(_this8.opts);

        if (_this8.caps.app) {
          yield utils.setDeviceTypeInInfoPlist(_this8.opts.app, dString);
        }
      }
      yield (0, _device.runSimulatorReset)(_this8.sim, _this8.opts, _this8.keepAppToRetainPrefs);

      if (_this8.caps.customSSLCert && !_this8.isRealDevice()) {
        yield (0, _appiumIosSimulator.installSSLCert)(_this8.caps.customSSLCert, _this8.sim.udid);
      }

      if (_this8.opts.enableAsyncExecuteFromHttps && !_this8.isRealDevice()) {
        yield _this8.startHttpsAsyncServer();
      }

      yield (0, _device.isolateSimulatorDevice)(_this8.sim, _this8.opts);
      _this8.localConfig = yield (0, _settings.setLocaleAndPreferences)(_this8.sim, _this8.opts, _this8.isSafari(), _device.endSimulator);
      yield _this8.startLogCapture(_this8.sim);
      yield _this8.prelaunchSimulator();
      yield _this8.startInstruments();
      yield _this8.onInstrumentsLaunch();
      yield _this8.configureBootstrap();
      yield _this8.setBundleId();
      yield _this8.setInitialOrientation();
      yield _this8.initAutoWebview();
      yield _this8.waitForAppLaunched();
    })();
  }

  startRealDevice() {
    var _this9 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield utils.removeInstrumentsSocket(_this9.sock);
      _this9.opts.localizableStrings = yield utils.parseLocalizableStrings(_this9.opts);
      yield utils.setBundleIdFromApp(_this9.opts);
      yield _this9.createInstruments();
      yield (0, _device.runRealDeviceReset)(_this9.realDevice, _this9.opts);
      yield _this9.startLogCapture();
      yield _this9.installToRealDevice();
      yield _this9.startInstruments();
      yield _this9.onInstrumentsLaunch();
      yield _this9.configureBootstrap();
      yield _this9.setBundleId();
      yield _this9.setInitialOrientation();
      yield _this9.initAutoWebview();
      yield _this9.waitForAppLaunched();
    })();
  }

  installToRealDevice() {
    var _this10 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (_this10.opts.autoLaunch === false) {
        return;
      }

      if (_this10.opts.app) {
        let ext = _this10.opts.app.substring(_this10.opts.app.length - 3).toLowerCase();

        if (ext === 'ipa') {
          _this10.opts.ipa = _this10.opts.app;
        }
      }

      if (_this10.opts.udid) {
        if (yield _this10.realDevice.isInstalled(_this10.opts.bundleId)) {
          _logger.default.debug("App is installed.");

          if (_this10.opts.fullReset) {
            _logger.default.debug("fullReset requested. Forcing app install.");
          } else {
            _logger.default.debug("fullReset not requested. No need to install.");

            return;
          }
        } else {
          _logger.default.debug("App is not installed. Will try to install.");
        }

        if (_this10.opts.ipa && _this10.opts.bundleId) {
          yield _this10.installIpa();

          _logger.default.debug('App installed.');
        } else if (_this10.opts.ipa) {
          let msg = "You specified a UDID and ipa but did not include the bundle id";

          _logger.default.warn(msg);

          throw new _appiumBaseDriver.errors.UnknownError(msg);
        } else if (_this10.opts.app) {
          yield _this10.realDevice.install(_this10.opts.app);

          _logger.default.debug('App installed.');
        } else {
          _logger.default.debug("Real device specified but no ipa or app path, assuming bundle ID is " + "on device");
        }
      } else {
        _logger.default.debug("No device id or app, not installing to real device.");
      }
    })();
  }

  getIDeviceObj() {
    let idiPath = _path.default.resolve(__dirname, "../../../build/", "libimobiledevice-macosx/ideviceinstaller");

    _logger.default.debug(`Creating iDevice object with udid ${this.opts.udid}`);

    try {
      return iDevice(this.opts.udid);
    } catch (e1) {
      _logger.default.debug(`Couldn't find ideviceinstaller, trying built-in at ${idiPath}`);

      try {
        return iDevice(this.opts.udid, {
          cmd: idiPath
        });
      } catch (e2) {
        let msg = "Could not initialize ideviceinstaller; make sure it is " + "installed and works on your system";

        _logger.default.error(msg);

        throw new Error(msg);
      }
    }
  }

  installIpa() {
    var _this11 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug(`Installing ipa found at ${_this11.opts.ipa}`);

      if (yield _this11.realDevice.isInstalled(_this11.opts.bundleId)) {
        _logger.default.debug("Bundle found on device, removing before reinstalling.");

        yield _this11.realDevice.remove(_this11.opts.bundleId);
      } else {
        _logger.default.debug("Nothing found on device, going ahead and installing.");
      }

      yield _this11.realDevice.installAndWait(_this11.opts.ipa, _this11.opts.bundleId);
    })();
  }

  validateDesiredCaps(caps) {
    let res = super.validateDesiredCaps(caps);
    if (!res) return res;
    return (0, _desiredCaps.desiredCapValidation)(caps);
  }

  prelaunchSimulator() {
    var _this12 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!_this12.shouldPrelaunchSimulator) {
        _logger.default.debug("Not pre-launching simulator");

        return;
      }

      yield (0, _device.endSimulator)(_this12.sim);
    })();
  }

  onInstrumentsLaunch() {
    var _this13 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug('Instruments launched. Starting poll loop for new commands.');

      if (_this13.opts.origAppPath) {
        _logger.default.debug("Copying app back to its original place");

        return yield _appiumSupport.fs.copyFile(_this13.opts.app, _this13.opts.origAppPath);
      }
    })();
  }

  setBundleId() {
    var _this14 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (_this14.opts.bundleId) {
        return;
      } else {
        let bId = yield _this14.uiAutoClient.sendCommand('au.bundleId()');

        _logger.default.debug(`Bundle ID for open app is ${bId.value}`);

        _this14.opts.bundleId = bId.value;
      }
    })();
  }

  startIWDP() {
    var _this15 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (_this15.opts.startIWDP) {
        _this15.iwdpServer = new _iwdp.IWDP(_this15.opts.webkitDebugProxyPort, _this15.opts.udid);
        yield _this15.iwdpServer.start();
      }
    })();
  }

  stopIWDP() {
    var _this16 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (_this16.iwdpServer) {
        yield _this16.iwdpServer.stop();
        delete _this16.iwdpServer;
      }
    })();
  }

  setInitialOrientation() {
    var _this17 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (_lodash.default.isString(_this17.opts.initialOrientation) && _lodash.default.includes(["LANDSCAPE", "PORTRAIT"], _this17.opts.initialOrientation.toUpperCase())) {
        _logger.default.debug(`Setting initial orientation to ${_this17.opts.initialOrientation}`);

        let command = `au.setScreenOrientation('${_this17.opts.initialOrientation.toUpperCase()}')`;

        try {
          yield _this17.uiAutoClient.sendCommand(command);
          _this17.opts.curOrientation = _this17.opts.initialOrientation;
        } catch (err) {
          _logger.default.warn(`Setting initial orientation failed with: ${err}`);
        }
      }
    })();
  }

  isRealDevice() {
    return !!this.opts.udid;
  }

  isSafari() {
    return this.opts.safari;
  }

  waitForAppLaunched() {
    var _this18 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let condFn;

      if (_this18.opts.waitForAppScript) {
        _logger.default.debug(`Using custom script to wait for app start: ${_this18.opts.waitForAppScript}`);

        condFn = function () {
          var _ref3 = (0, _asyncToGenerator2.default)(function* () {
            let res;

            try {
              res = yield _this18.uiAutoClient.sendCommand(`try{\n${_this18.opts.waitForAppScript}` + `\n} catch(err) { $.log("waitForAppScript err: " + error); false; };`);
            } catch (err) {
              _logger.default.debug(`Cannot eval waitForAppScript script, err: ${err}`);

              return false;
            }

            if (typeof res !== 'boolean') {
              _logger.default.debug('Unexpected return type in waitForAppScript script');

              return false;
            }

            return res;
          });

          return function condFn() {
            return _ref3.apply(this, arguments);
          };
        }();
      } else if (_this18.isSafari()) {
        if (_this18.isRealDevice()) {
          yield _this18.clickButtonToLaunchSafari();
        }

        _logger.default.debug('Waiting for initial webview');

        yield _this18.navToInitialWebview();

        condFn = function () {
          var _ref4 = (0, _asyncToGenerator2.default)(function* () {
            return true;
          });

          return function condFn() {
            return _ref4.apply(this, arguments);
          };
        }();
      } else {
        _logger.default.debug("Waiting for app source to contain elements");

        condFn = function () {
          var _ref5 = (0, _asyncToGenerator2.default)(function* () {
            try {
              let source = yield _this18.getSourceForElementForXML();
              source = JSON.parse(source || "{}");
              let appEls = (source.UIAApplication || {})['>'];
              return appEls && appEls.length > 0 && !IosDriver.isSpringBoard(source.UIAApplication);
            } catch (e) {
              _logger.default.warn(`Couldn't extract app element from source, error was: ${e}`);

              return false;
            }
          });

          return function condFn() {
            return _ref5.apply(this, arguments);
          };
        }();
      }

      try {
        yield (0, _asyncbox.waitForCondition)(condFn, {
          logger: _logger.default,
          waitMs: 10000,
          intervalMs: 500
        });
      } catch (err) {
        if (err.message && err.message.match(/Condition unmet/)) {
          _logger.default.warn('Initial spin timed out, continuing but the app might not be ready.');

          _logger.default.debug(`Initial spin error was: ${err}`);
        } else {
          throw err;
        }
      }
    })();
  }

  static isSpringBoard(uiAppObj) {
    return _lodash.default.propertyOf(uiAppObj['@'])('name') === 'SpringBoard';
  }

  createInstruments() {
    var _this19 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug("Creating instruments");

      _this19.uiAutoClient = new _uiauto.UIAutoClient(_this19.sock);
      _this19.instruments = yield _this19.makeInstruments();

      _this19.instruments.onShutdown.catch((0, _asyncToGenerator2.default)(function* () {
        yield _this19.startUnexpectedShutdown(new _appiumBaseDriver.errors.UnknownError('Abnormal Instruments termination!'));
      })).done();
    })();
  }

  shouldIgnoreInstrumentsExit() {
    return this.safari && this.isRealDevice();
  }

  makeInstruments() {
    var _this20 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let bootstrapPath = yield (0, _uiauto.prepareBootstrap)({
        sock: _this20.sock,
        interKeyDelay: _this20.opts.interKeyDelay,
        justLoopInfinitely: false,
        autoAcceptAlerts: _this20.opts.autoAcceptAlerts,
        autoDismissAlerts: _this20.opts.autoDismissAlerts,
        sendKeyStrategy: _this20.opts.sendKeyStrategy || (_this20.isRealDevice() ? 'grouped' : 'oneByOne')
      });
      let instruments = new _instruments.Instruments({
        app: (!_this20.isRealDevice() ? _this20.opts.app : null) || _this20.opts.bundleId,
        udid: _this20.opts.udid,
        processArguments: _this20.opts.processArguments,
        ignoreStartupExit: _this20.shouldIgnoreInstrumentsExit(),
        bootstrap: bootstrapPath,
        template: _this20.opts.automationTraceTemplatePath,
        instrumentsPath: _this20.opts.instrumentsPath,
        withoutDelay: _this20.opts.withoutDelay,
        platformVersion: _this20.opts.platformVersion,
        webSocket: _this20.opts.webSocket,
        launchTimeout: _this20.opts.launchTimeout,
        flakeyRetries: _this20.opts.backendRetries,
        realDevice: _this20.isRealDevice(),
        simulatorSdkAndDevice: _this20.iosSdkVersion >= 7.1 ? yield (0, _device.getAdjustedDeviceName)(_this20.opts) : null,
        tmpDir: _path.default.resolve(_this20.opts.tmpDir || '/tmp', 'appium-instruments'),
        traceDir: _this20.opts.traceDir,
        locale: _this20.opts.locale,
        language: _this20.opts.language
      });
      return instruments;
    })();
  }

  startInstruments() {
    var _this21 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug("Starting UIAutoClient, and launching Instruments.");

      yield _bluebird.default.all([_this21.uiAutoClient.start().then(() => {
        _this21.instruments.registerLaunch();
      }), _this21.instruments.launch()]);
    })();
  }

  configureBootstrap() {
    var _this22 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug("Setting bootstrap config keys/values");

      let isVerbose = true;
      let cmd = 'target = $.target();\n';
      cmd += 'au = $;\n';
      cmd += `$.isVerbose = ${isVerbose};\n`;
      yield _this22.uiAutoClient.sendCommand(cmd);
    })();
  }

  getSourceForElementForXML(ctx) {
    var _this23 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let source;

      if (!ctx) {
        source = yield _this23.uiAutoClient.sendCommand("au.mainApp().getTreeForXML()");
      } else {
        source = yield _this23.uiAutoClient.sendCommand(`au.getElement('${ctx}').getTreeForXML()`);
      }

      if (source) {
        return JSON.stringify(source);
      } else {
        throw new Error(`Bad response from getTreeForXML. res was ${JSON.stringify(source)}`);
      }
    })();
  }

  get realDevice() {
    this._realDevice = this._realDevice || this.getIDeviceObj();
    return this._realDevice;
  }

  set realDevice(rd) {
    this._realDevice = rd;
  }

}

exports.IosDriver = IosDriver;
var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = _lodash.default.toPairs(_index.default)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    let _step$value = (0, _slicedToArray2.default)(_step.value, 2),
        cmd = _step$value[0],
        fn = _step$value[1];

    IosDriver.prototype[cmd] = fn;
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator.return != null) {
      _iterator.return();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

var _default = IosDriver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
