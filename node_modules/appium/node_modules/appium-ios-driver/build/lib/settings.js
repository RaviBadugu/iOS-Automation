"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setLocale = setLocale;
exports.setPreferences = setPreferences;
exports.setLocaleAndPreferences = setLocaleAndPreferences;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

const SETTINGS_CAPS = ['locationServicesEnabled', 'locationServicesAuthorized'];
const SAFARI_SETTINGS_CAPS = ['safariAllowPopups', 'safariIgnoreFraudWarning', 'safariOpenLinksInBackground'];

function launchAndQuitSimulator(_x, _x2) {
  return _launchAndQuitSimulator.apply(this, arguments);
}

function _launchAndQuitSimulator() {
  _launchAndQuitSimulator = (0, _asyncToGenerator2.default)(function* (sim, safari) {
    _logger.default.debug('No simulator directories found.');

    return yield sim.launchAndQuit(safari);
  });
  return _launchAndQuitSimulator.apply(this, arguments);
}

function checkPreferences(settings, opts = {}) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = settings[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      let setting = _step.value;

      if (_lodash.default.has(opts, setting)) {
        return true;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return false;
}

function setLocaleAndPreferences(_x3, _x4) {
  return _setLocaleAndPreferences.apply(this, arguments);
}

function _setLocaleAndPreferences() {
  _setLocaleAndPreferences = (0, _asyncToGenerator2.default)(function* (sim, opts, safari = false, shutdownFn = _lodash.default.noop) {
    const localConfig = yield setLocale(sim, opts, {}, safari);
    const prefsUpdated = yield setPreferences(sim, opts, safari);

    if (localConfig._updated || prefsUpdated) {
      _logger.default.debug("Updated settings. Rebooting the simulator if it's already open");

      yield shutdownFn(sim);
    }

    delete localConfig._updated;
    return localConfig;
  });
  return _setLocaleAndPreferences.apply(this, arguments);
}

function setLocale(_x5, _x6) {
  return _setLocale.apply(this, arguments);
}

function _setLocale() {
  _setLocale = (0, _asyncToGenerator2.default)(function* (sim, opts, localeConfig = {}, safari = false) {
    if (!opts.language && !opts.locale && !opts.calendarFormat) {
      _logger.default.debug("No reason to set locale");

      return {
        _updated: false
      };
    }

    if (yield sim.isFresh()) {
      yield launchAndQuitSimulator(sim, safari);
    }

    _logger.default.debug('Setting locale information');

    localeConfig = {
      language: opts.language || localeConfig.language,
      locale: opts.locale || localeConfig.locale,
      calendarFormat: opts.calendarFormat || localeConfig.calendarFormat,
      _updated: false
    };

    try {
      let updated = yield sim.updateLocale(opts.language, opts.locale, opts.calendarFormat);

      if (updated) {
        localeConfig._updated = true;
      }
    } catch (e) {
      _logger.default.errorAndThrow(`Appium was unable to set locale info: ${e}`);
    }

    return localeConfig;
  });
  return _setLocale.apply(this, arguments);
}

function setPreferences(_x7, _x8) {
  return _setPreferences.apply(this, arguments);
}

function _setPreferences() {
  _setPreferences = (0, _asyncToGenerator2.default)(function* (sim, opts, safari = false) {
    let needToSetPrefs = checkPreferences(SETTINGS_CAPS, opts);
    let needToSetSafariPrefs = checkPreferences(SAFARI_SETTINGS_CAPS, opts);

    if (!needToSetPrefs && !needToSetSafariPrefs) {
      _logger.default.debug("No iOS / app preferences to set");

      return false;
    }

    _logger.default.debug("Setting iOS and app preferences");

    if (yield sim.isFresh()) {
      yield launchAndQuitSimulator(sim, safari);
    }

    try {
      if (needToSetPrefs) {
        yield setLocServicesPrefs(sim, opts);
      }
    } catch (e) {
      _logger.default.error("Error setting location services preferences, prefs will not work");

      _logger.default.error(e);
    }

    try {
      if (needToSetSafariPrefs) {
        yield setSafariPrefs(sim, opts);
      }
    } catch (e) {
      _logger.default.error("Error setting safari preferences, prefs will not work");

      _logger.default.error(e);
    }

    return true;
  });
  return _setPreferences.apply(this, arguments);
}

function setLocServicesPrefs(_x9) {
  return _setLocServicesPrefs.apply(this, arguments);
}

function _setLocServicesPrefs() {
  _setLocServicesPrefs = (0, _asyncToGenerator2.default)(function* (sim, opts = {}) {
    let locServ = _lodash.default.find([opts.locationServicesEnabled, opts.locationServicesAuthorized], c => {
      return !_lodash.default.isUndefined(c);
    });

    if (!_lodash.default.isUndefined(locServ)) {
      locServ = locServ ? 1 : 0;

      _logger.default.debug(`Setting location services to ${locServ}`);

      yield sim.updateSettings('locationServices', {
        LocationServicesEnabled: locServ,
        'LocationServicesEnabledIn7.0': locServ,
        'LocationServicesEnabledIn8.0': locServ
      });
    }

    if (!_lodash.default.isUndefined(opts.locationServicesAuthorized)) {
      if (!opts.bundleId) {
        let msg = "Can't set location services for app without bundle ID";

        _logger.default.errorAndThrow(msg);
      }

      let locAuth = !!opts.locationServicesAuthorized;

      if (locAuth) {
        _logger.default.debug("Authorizing location services for app");
      } else {
        _logger.default.debug("De-authorizing location services for app");
      }

      yield sim.updateLocationSettings(opts.bundleId, locAuth);
    }
  });
  return _setLocServicesPrefs.apply(this, arguments);
}

function setSafariPrefs(_x10) {
  return _setSafariPrefs.apply(this, arguments);
}

function _setSafariPrefs() {
  _setSafariPrefs = (0, _asyncToGenerator2.default)(function* (sim, opts = {}) {
    let safariSettings = {};

    if (_lodash.default.has(opts, 'safariAllowPopups')) {
      let val = !!opts.safariAllowPopups;

      _logger.default.debug(`Setting javascript window opening to '${val}'`);

      safariSettings.WebKitJavaScriptCanOpenWindowsAutomatically = val;
      safariSettings.JavaScriptCanOpenWindowsAutomatically = val;
    }

    if (_lodash.default.has(opts, 'safariIgnoreFraudWarning')) {
      let val = !opts.safariIgnoreFraudWarning;

      _logger.default.debug(`Setting fraudulent website warning to '${val}'`);

      safariSettings.WarnAboutFraudulentWebsites = val;
    }

    if (_lodash.default.has(opts, 'safariOpenLinksInBackground')) {
      let val = opts.safariOpenLinksInBackground ? 1 : 0;

      _logger.default.debug(`Setting opening links in background to '${!!val}'`);

      safariSettings.OpenLinksInBackground = val;
    }

    if (_lodash.default.size(safariSettings) > 0) {
      yield sim.updateSafariSettings(safariSettings);
    }
  });
  return _setSafariPrefs.apply(this, arguments);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
