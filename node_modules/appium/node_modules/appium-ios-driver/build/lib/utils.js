"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeInstrumentsSocket = removeInstrumentsSocket;
exports.getAndCheckXcodeVersion = getAndCheckXcodeVersion;
exports.prepareIosOpts = prepareIosOpts;
exports.appIsPackageOrBundle = appIsPackageOrBundle;
exports.getAndCheckIosSdkVersion = getAndCheckIosSdkVersion;
exports.detectUdid = detectUdid;
exports.parseLocalizableStrings = parseLocalizableStrings;
exports.setBundleIdFromApp = setBundleIdFromApp;
exports.shouldPrelaunchSimulator = shouldPrelaunchSimulator;
exports.setDeviceTypeInInfoPlist = setDeviceTypeInInfoPlist;
exports.getSimForDeviceString = getSimForDeviceString;
exports.unwrapEl = unwrapEl;
exports.clearLogs = clearLogs;
exports.rootDir = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumSupport = require("appium-support");

var _appiumXcode = _interopRequireDefault(require("appium-xcode"));

var _appUtils = require("./app-utils");

var _logger = _interopRequireDefault(require("./logger"));

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _teen_process = require("teen_process");

var _safari = require("./commands/safari");

var _safariLauncher = require("./safari-launcher");

const rootDir = _path.default.resolve(__dirname, '..', '..');

exports.rootDir = rootDir;
const STRINGSDICT_RESOURCE = '.stringsdict';
const STRINGS_RESOURCE = '.strings';

function prepareIosOpts(_x) {
  return _prepareIosOpts.apply(this, arguments);
}

function _prepareIosOpts() {
  _prepareIosOpts = (0, _asyncToGenerator2.default)(function* (opts) {
    opts.backendRetries = 4;
    opts.withoutDelay = !opts.nativeInstrumentsLib;
    opts.reset = !opts.noReset;
    opts.initialOrientation = opts.deviceOrientation || opts.orientation || "PORTRAIT";
    opts.useRobot = opts.robotPort > 0;
    opts.robotUrl = opts.useRobot ? `http://${opts.robotAddress}:${opts.robotPort}` : null;

    if (opts.locationServicesAuthorized && !opts.bundleId) {
      throw new Error("You must set the bundleId cap if using locationServicesEnabled");
    }

    opts.platformVersion = opts.platformVersion || (yield _appiumXcode.default.getMaxIOSSDK());
    let pv = parseFloat(opts.platformVersion);

    if (pv < 8) {
      _logger.default.warn(`iOS version ${opts.platformVersion} support has been ` + `deprecated and will be removed in a future version of ` + `Appium.`);
    }

    opts.localizableStringsDir = opts.localizableStringsDir || 'en.lproj';
    opts.autoAcceptAlerts = _lodash.default.isNull(opts.autoAcceptAlerts) || _lodash.default.isUndefined(opts.autoAcceptAlerts) ? false : opts.autoAcceptAlerts;
    opts.autoDismissAlerts = _lodash.default.isNull(opts.autoDismissAlerts) || _lodash.default.isUndefined(opts.autoDismissAlerts) ? false : opts.autoDismissAlerts;

    if ((opts.browserName || '').toLowerCase() === 'safari' || (opts.app || '').toLowerCase() === 'safari' || (opts.bundleId || '').toLowerCase() === _safari.SAFARI_BUNDLE) {
      if (opts.udid) {
        opts.app = opts.app || _safariLauncher.SAFARI_LAUNCHER_APP_FILE;
        opts.bundleId = opts.bundleId || _safariLauncher.SAFARI_LAUNCHER_BUNDLE;
      } else {
        if (parseFloat(opts.platformVersion) <= 8) {
          opts.app = 'safari';
          opts.bundleId = null;
        } else {
          opts.app = null;
          opts.bundleId = _safari.SAFARI_BUNDLE;
        }
      }

      opts.safari = true;
    }
  });
  return _prepareIosOpts.apply(this, arguments);
}

function appIsPackageOrBundle(app) {
  return /^([a-zA-Z0-9\-_]+\.[a-zA-Z0-9\-_]+)+$/.test(app);
}

function removeInstrumentsSocket(_x2) {
  return _removeInstrumentsSocket.apply(this, arguments);
}

function _removeInstrumentsSocket() {
  _removeInstrumentsSocket = (0, _asyncToGenerator2.default)(function* (sock) {
    _logger.default.debug("Removing any remaining instruments sockets");

    yield _appiumSupport.fs.rimraf(sock);

    _logger.default.debug(`Cleaned up instruments socket ${sock}`);
  });
  return _removeInstrumentsSocket.apply(this, arguments);
}

function getAndCheckXcodeVersion(_x3) {
  return _getAndCheckXcodeVersion.apply(this, arguments);
}

function _getAndCheckXcodeVersion() {
  _getAndCheckXcodeVersion = (0, _asyncToGenerator2.default)(function* (caps) {
    let version;

    try {
      version = yield _appiumXcode.default.getVersion(true);
    } catch (err) {
      _logger.default.debug(err);

      _logger.default.error(`Could not determine Xcode version: ${err.message}`);

      throw err;
    }

    let minorVersion = version.versionFloat;
    let pv = parseFloat(caps.platformVersion);

    if (minorVersion < 6.3 && !(minorVersion === 6.0 && pv === 8.0)) {
      _logger.default.warn(`Xcode version '${version.versionString}'. Support for Xcode ` + `${version.versionString} has been deprecated and will be removed ` + `in a future version. Please upgrade to version 6.3 or ` + `higher (or version 6.0.1 for iOS 8.0)`);
    }

    return version;
  });
  return _getAndCheckXcodeVersion.apply(this, arguments);
}

function getAndCheckIosSdkVersion() {
  return _getAndCheckIosSdkVersion.apply(this, arguments);
}

function _getAndCheckIosSdkVersion() {
  _getAndCheckIosSdkVersion = (0, _asyncToGenerator2.default)(function* () {
    let versionNumber;

    try {
      versionNumber = yield _appiumXcode.default.getMaxIOSSDK();
    } catch (err) {
      _logger.default.error("Could not determine iOS SDK version");

      throw err;
    }

    return versionNumber;
  });
  return _getAndCheckIosSdkVersion.apply(this, arguments);
}

function getSimForDeviceString(dString, availDevices) {
  let matchedDevice = null;
  let matchedUdid = null;

  _lodash.default.each(availDevices, function (device) {
    if (device.indexOf(dString) !== -1) {
      matchedDevice = device;

      try {
        matchedUdid = /.+\[([^\]]+)\]/.exec(device)[1];
      } catch (e) {
        matchedUdid = null;
      }
    }
  });

  return [matchedDevice, matchedUdid];
}

function detectUdid(_x4) {
  return _detectUdid.apply(this, arguments);
}

function _detectUdid() {
  _detectUdid = (0, _asyncToGenerator2.default)(function* (caps) {
    if (caps.udid !== null && caps.udid === "auto") {
      _logger.default.debug("Auto-detecting iOS udid...");

      let cmd,
          args = [];

      try {
        cmd = yield _appiumSupport.fs.which('idevice_id');
        args.push('-l');
      } catch (err) {
        cmd = require.resolve('udidetect');
      }

      let udid;

      try {
        let _ref = yield (0, _teen_process.exec)(cmd, args, {
          timeout: 3000
        }),
            stdout = _ref.stdout;

        udid = stdout.split("\n")[0];
      } catch (err) {
        _logger.default.error("Error detecting udid");

        throw err;
      }

      if (udid && udid.length > 2) {
        caps.udid = udid;

        _logger.default.debug(`Detected udid as '${caps.udid}'`);
      } else {
        throw new Error("Could not detect udid.");
      }
    } else {
      _logger.default.debug("Not auto-detecting udid.");
    }
  });
  return _detectUdid.apply(this, arguments);
}

function readResource(_x5) {
  return _readResource.apply(this, arguments);
}

function _readResource() {
  _readResource = (0, _asyncToGenerator2.default)(function* (resourcePath) {
    const data = yield _appiumSupport.plist.parsePlistFile(resourcePath);
    const result = {};
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = _lodash.default.toPairs(data)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        const _step$value = (0, _slicedToArray2.default)(_step.value, 2),
              key = _step$value[0],
              value = _step$value[1];

        result[key] = _lodash.default.isString(value) ? value : JSON.stringify(value);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return result;
  });
  return _readResource.apply(this, arguments);
}

function parseLocalizableStrings(_x6) {
  return _parseLocalizableStrings.apply(this, arguments);
}

function _parseLocalizableStrings() {
  _parseLocalizableStrings = (0, _asyncToGenerator2.default)(function* (opts) {
    const app = opts.app,
          _opts$language = opts.language,
          language = _opts$language === void 0 ? 'en' : _opts$language,
          localizableStringsDir = opts.localizableStringsDir,
          stringFile = opts.stringFile,
          strictMode = opts.strictMode;

    if (!app) {
      const message = "Strings extraction is not supported if 'app' capability is not set";

      if (strictMode) {
        throw new Error(message);
      }

      _logger.default.info(message);

      return {};
    }

    let lprojRoot;
    var _arr = [`${language}.lproj`, localizableStringsDir, ''];

    for (var _i = 0; _i < _arr.length; _i++) {
      const subfolder = _arr[_i];
      lprojRoot = _path.default.resolve(app, subfolder);

      if (yield _appiumSupport.fs.exists(lprojRoot)) {
        break;
      }

      const message = `No '${lprojRoot}' resources folder has been found`;

      if (strictMode) {
        throw new Error(message);
      }

      _logger.default.debug(message);
    }

    _logger.default.info(`Will extract resource strings from '${lprojRoot}'`);

    const resourcePaths = [];

    if (stringFile) {
      const dstPath = _path.default.resolve(lprojRoot, stringFile);

      if (yield _appiumSupport.fs.exists(dstPath)) {
        resourcePaths.push(dstPath);
      } else {
        const message = `No '${dstPath}' resource file has been found for '${app}'`;

        if (strictMode) {
          throw new Error(message);
        }

        _logger.default.info(message);

        _logger.default.info(`Getting all the available strings from '${lprojRoot}'`);
      }
    }

    if (_lodash.default.isEmpty(resourcePaths) && (yield _appiumSupport.fs.exists(lprojRoot))) {
      const resourceFiles = (yield _appiumSupport.fs.readdir(lprojRoot)).filter(name => _lodash.default.some([STRINGS_RESOURCE, STRINGSDICT_RESOURCE], x => name.endsWith(x))).map(name => _path.default.resolve(lprojRoot, name));
      resourcePaths.push(...resourceFiles);
    }

    _logger.default.info(`Got ${resourcePaths.length} resource file(s) in '${lprojRoot}'`);

    if (_lodash.default.isEmpty(resourcePaths)) {
      return {};
    }

    const resultStrings = {};

    const toAbsolutePath = function toAbsolutePath(p) {
      return _path.default.isAbsolute(p) ? p : _path.default.resolve(process.cwd(), p);
    };

    for (var _i2 = 0; _i2 < resourcePaths.length; _i2++) {
      const resourcePath = resourcePaths[_i2];

      if (!_appiumSupport.util.isSubPath(toAbsolutePath(resourcePath), toAbsolutePath(app))) {
        throw new Error(`'${resourcePath}' is expected to be located under '${app}'`);
      }

      try {
        const data = yield readResource(resourcePath);

        _logger.default.debug(`Parsed ${_lodash.default.keys(data).length} string(s) from '${resourcePath}'`);

        _lodash.default.merge(resultStrings, data);
      } catch (e) {
        _logger.default.warn(`Cannot parse '${resourcePath}' resource. Original error: ${e.message}`);
      }
    }

    _logger.default.info(`Got ${_lodash.default.keys(resultStrings).length} string(s) from '${lprojRoot}'`);

    return resultStrings;
  });
  return _parseLocalizableStrings.apply(this, arguments);
}

function setBundleIdFromApp(_x7) {
  return _setBundleIdFromApp.apply(this, arguments);
}

function _setBundleIdFromApp() {
  _setBundleIdFromApp = (0, _asyncToGenerator2.default)(function* (caps) {
    if (!caps.bundleId) {
      try {
        caps.bundleId = yield (0, _appUtils.extractBundleId)(caps.app);

        _logger.default.info(`Extracted bundleID: ${caps.bundleId} from app: ${caps.app}`);
      } catch (err) {
        _logger.default.error("Could not set the bundleId from app.");

        throw err;
      }
    }
  });
  return _setBundleIdFromApp.apply(this, arguments);
}

function shouldPrelaunchSimulator(caps, iosSdkVersion) {
  let shouldPrelaunch = false;

  if (caps.defaultDevice || iosSdkVersion >= 7.1) {
    if (this.iosSdkVersion >= 7.1) {
      _logger.default.debug("We're on iOS7.1+ so forcing defaultDevice on");
    } else {
      _logger.default.debug("User specified default device, letting instruments launch it");
    }
  } else {
    shouldPrelaunch = true;
  }

  return shouldPrelaunch;
}

function setDeviceTypeInInfoPlist(_x8, _x9) {
  return _setDeviceTypeInInfoPlist.apply(this, arguments);
}

function _setDeviceTypeInInfoPlist() {
  _setDeviceTypeInInfoPlist = (0, _asyncToGenerator2.default)(function* (app, deviceString) {
    if (_lodash.default.isNull(app) || _lodash.default.isUndefined(app)) {
      return;
    }

    let plistFile = _path.default.resolve(app, "Info.plist");

    let isiPhone = deviceString.toLowerCase().indexOf("ipad") === -1;
    let deviceTypeCode = isiPhone ? 1 : 2;
    yield _appiumSupport.plist.updatePlistFile(plistFile, {
      UIDeviceFamily: [deviceTypeCode]
    });
  });
  return _setDeviceTypeInInfoPlist.apply(this, arguments);
}

function unwrapEl(el) {
  if (typeof el === 'object' && el.ELEMENT) {
    return el.ELEMENT;
  }

  return el;
}

function clearLogs(_x10) {
  return _clearLogs.apply(this, arguments);
}

function _clearLogs() {
  _clearLogs = (0, _asyncToGenerator2.default)(function* (locations) {
    _logger.default.debug('Clearing log files');

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = locations[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        let location = _step2.value;

        if (yield _appiumSupport.fs.exists(location)) {
          let size;

          try {
            let _ref2 = yield (0, _teen_process.exec)('du', ['-sh', location]),
                stdout = _ref2.stdout;

            size = stdout.trim().split(/\s+/)[0];
          } catch (ign) {}

          try {
            _logger.default.debug(`Deleting '${location}'. ${size ? `Freeing ${size}.` : ''}`);

            yield _appiumSupport.fs.rimraf(location);
          } catch (err) {
            _logger.default.warn(`Unable to delete '${location}': ${err.message}`);
          }
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    _logger.default.debug('Finished clearing log files');
  });
  return _clearLogs.apply(this, arguments);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
