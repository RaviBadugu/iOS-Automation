"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _teen_process = require("teen_process");

var _asyncbox = require("asyncbox");

var _logger = _interopRequireDefault(require("./logger"));

var _appiumSupport = require("appium-support");

var _ioAppium = require("io.appium.settings");

var _bootstrap = _interopRequireDefault(require("./bootstrap"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumAdb = _interopRequireDefault(require("appium-adb"));

var _unlockHelpers = _interopRequireWildcard(require("./unlock-helpers"));

const PACKAGE_INSTALL_TIMEOUT = 90000;
const CHROME_BROWSER_PACKAGE_ACTIVITY = {
  chrome: {
    pkg: 'com.android.chrome',
    activity: 'com.google.android.apps.chrome.Main'
  },
  chromium: {
    pkg: 'org.chromium.chrome.shell',
    activity: '.ChromeShellActivity'
  },
  chromebeta: {
    pkg: 'com.chrome.beta',
    activity: 'com.google.android.apps.chrome.Main'
  },
  browser: {
    pkg: 'com.android.browser',
    activity: 'com.android.browser.BrowserActivity'
  },
  'chromium-browser': {
    pkg: 'org.chromium.chrome',
    activity: 'com.google.android.apps.chrome.Main'
  },
  'chromium-webview': {
    pkg: 'org.chromium.webview_shell',
    activity: 'org.chromium.webview_shell.WebViewBrowserActivity'
  },
  default: {
    pkg: 'com.android.chrome',
    activity: 'com.google.android.apps.chrome.Main'
  }
};
const SETTINGS_HELPER_PKG_ID = 'io.appium.settings';
const SETTINGS_HELPER_MAIN_ACTIVITY = '.Settings';
const SETTINGS_HELPER_UNLOCK_ACTIVITY = '.Unlock';
let helpers = {};
exports.helpers = helpers;

helpers.createBaseADB = async function (opts = {}) {
  const {
    javaVersion,
    adbPort,
    suppressKillServer,
    remoteAdbHost,
    clearDeviceLogsOnStart,
    adbExecTimeout,
    useKeystore,
    keystorePath,
    keystorePassword,
    keyAlias,
    keyPassword
  } = opts;
  return await _appiumAdb.default.createADB({
    javaVersion,
    adbPort,
    suppressKillServer,
    remoteAdbHost,
    clearDeviceLogsOnStart,
    adbExecTimeout,
    useKeystore,
    keystorePath,
    keystorePassword,
    keyAlias,
    keyPassword
  });
};

helpers.parseJavaVersion = function (stderr) {
  let lines = stderr.split("\n");

  for (let line of lines) {
    if (new RegExp(/(java|openjdk) version/).test(line)) {
      return line.split(" ")[2].replace(/"/g, '');
    }
  }

  return null;
};

helpers.getJavaVersion = async function (logVersion = true) {
  let {
    stderr
  } = await (0, _teen_process.exec)('java', ['-version']);
  let javaVer = helpers.parseJavaVersion(stderr);

  if (javaVer === null) {
    throw new Error("Could not get the Java version. Is Java installed?");
  }

  if (logVersion) {
    _logger.default.info(`Java version is: ${javaVer}`);
  }

  return javaVer;
};

helpers.prepareEmulator = async function (adb, opts) {
  let {
    avd,
    avdArgs,
    language,
    locale,
    avdLaunchTimeout,
    avdReadyTimeout
  } = opts;

  if (!avd) {
    throw new Error("Cannot launch AVD without AVD name");
  }

  let avdName = avd.replace('@', '');
  let runningAVD = await adb.getRunningAVD(avdName);

  if (runningAVD !== null) {
    if (avdArgs && avdArgs.toLowerCase().indexOf("-wipe-data") > -1) {
      _logger.default.debug(`Killing '${avdName}' because it needs to be wiped at start.`);

      await adb.killEmulator(avdName);
    } else {
      _logger.default.debug("Not launching AVD because it is already running.");

      return;
    }
  }

  avdArgs = this.prepareAVDArgs(opts, adb, avdArgs);
  await adb.launchAVD(avd, avdArgs, language, locale, avdLaunchTimeout, avdReadyTimeout);
};

helpers.prepareAVDArgs = function (opts, adb, avdArgs) {
  let args = avdArgs ? [avdArgs] : [];

  if (!_lodash.default.isUndefined(opts.networkSpeed)) {
    let networkSpeed = this.ensureNetworkSpeed(adb, opts.networkSpeed);
    args.push('-netspeed', networkSpeed);
  }

  if (opts.isHeadless) {
    args.push('-no-window');
  }

  return args.join(' ');
};

helpers.ensureNetworkSpeed = function (adb, networkSpeed) {
  if (_lodash.default.values(adb.NETWORK_SPEED).indexOf(networkSpeed) !== -1) {
    return networkSpeed;
  }

  _logger.default.warn(`Wrong network speed param ${networkSpeed}, using default: full. Supported values: ${_lodash.default.values(adb.NETWORK_SPEED)}`);

  return adb.NETWORK_SPEED.FULL;
};

helpers.ensureDeviceLocale = async function (adb, language, country, script = null) {
  if (!_lodash.default.isString(language) && !_lodash.default.isString(country)) {
    _logger.default.warn(`setDeviceLanguageCountry requires language or country.`);

    _logger.default.warn(`Got language: '${language}' and country: '${country}'`);

    return;
  }

  await adb.setDeviceLanguageCountry(language, country, script);

  if (!(await adb.ensureCurrentLocale(language, country, script))) {
    const message = script ? `language: ${language}, country: ${country} and script: ${script}` : `language: ${language} and country: ${country}`;
    throw new Error(`Failed to set ${message}`);
  }
};

helpers.getDeviceInfoFromCaps = async function (opts = {}) {
  const adb = await helpers.createBaseADB(opts);
  let udid = opts.udid;
  let emPort = null;

  if (opts.avd) {
    await helpers.prepareEmulator(adb, opts);
    udid = adb.curDeviceId;
    emPort = adb.emulatorPort;
  } else {
    _logger.default.info("Retrieving device list");

    let devices = await adb.getDevicesWithRetry();

    if (udid) {
      if (!_lodash.default.includes(_lodash.default.map(devices, 'udid'), udid)) {
        _logger.default.errorAndThrow(`Device ${udid} was not in the list of connected devices`);
      }

      emPort = adb.getPortFromEmulatorString(udid);
    } else if (opts.platformVersion) {
      opts.platformVersion = `${opts.platformVersion}`.trim();

      _logger.default.info(`Looking for a device with Android '${opts.platformVersion}'`);

      let availDevicesStr = [];

      for (let device of devices) {
        await adb.setDeviceId(device.udid);
        let deviceOS = await adb.getPlatformVersion();
        availDevicesStr.push(`${device.udid} (${deviceOS})`);

        if (deviceOS.indexOf(opts.platformVersion) === 0) {
          udid = device.udid;
          break;
        }
      }

      if (!udid) {
        _logger.default.errorAndThrow(`Unable to find an active device or emulator ` + `with OS ${opts.platformVersion}. The following are available: ` + availDevicesStr.join(', '));
      }

      emPort = adb.getPortFromEmulatorString(udid);
    } else {
      udid = devices[0].udid;
      emPort = adb.getPortFromEmulatorString(udid);
    }
  }

  _logger.default.info(`Using device: ${udid}`);

  return {
    udid,
    emPort
  };
};

helpers.createADB = async function (opts = {}) {
  const {
    udid,
    emPort
  } = opts;
  const adb = await helpers.createBaseADB(opts);
  adb.setDeviceId(udid);

  if (emPort) {
    adb.setEmulatorPort(emPort);
  }

  return adb;
};

helpers.validatePackageActivityNames = function (opts) {
  for (const key of ['appPackage', 'appActivity', 'appWaitPackage', 'appWaitActivity']) {
    const name = opts[key];

    if (!name) {
      continue;
    }

    const match = /([^\w.*,])+/.exec(name);

    if (!match) {
      continue;
    }

    _logger.default.warn(`Capability '${key}' is expected to only include latin letters, digits, underscore, dot, comma and asterisk characters.`);

    _logger.default.warn(`Current value '${name}' has non-matching character at index ${match.index}: '${name.substring(0, match.index + 1)}'`);
  }
};

helpers.getLaunchInfo = async function (adb, opts) {
  let {
    app,
    appPackage,
    appActivity,
    appWaitPackage,
    appWaitActivity
  } = opts;

  if (!app) {
    _logger.default.warn("No app sent in, not parsing package/activity");

    return;
  }

  this.validatePackageActivityNames(opts);

  if (appPackage && appActivity) {
    return;
  }

  _logger.default.debug("Parsing package and activity from app manifest");

  let {
    apkPackage,
    apkActivity
  } = await adb.packageAndLaunchActivityFromManifest(app);

  if (apkPackage && !appPackage) {
    appPackage = apkPackage;
  }

  if (!appWaitPackage) {
    appWaitPackage = appPackage;
  }

  if (apkActivity && !appActivity) {
    appActivity = apkActivity;
  }

  if (!appWaitActivity) {
    appWaitActivity = appActivity;
  }

  _logger.default.debug(`Parsed package and activity are: ${apkPackage}/${apkActivity}`);

  return {
    appPackage,
    appWaitPackage,
    appActivity,
    appWaitActivity
  };
};

helpers.resetApp = async function (adb, opts = {}) {
  const {
    app,
    appPackage,
    fastReset,
    fullReset,
    androidInstallTimeout = PACKAGE_INSTALL_TIMEOUT,
    autoGrantPermissions,
    allowTestPackages
  } = opts;

  if (!appPackage) {
    throw new Error("'appPackage' option is required");
  }

  const isInstalled = await adb.isAppInstalled(appPackage);

  if (isInstalled) {
    try {
      await adb.forceStop(appPackage);
    } catch (ign) {}

    if (!fullReset && fastReset) {
      const output = await adb.clear(appPackage);

      if (_lodash.default.isString(output) && output.toLowerCase().includes('failed')) {
        throw new Error(`Cannot clear the application data of '${appPackage}'. Original error: ${output}`);
      }

      if (autoGrantPermissions) {
        try {
          await adb.grantAllPermissions(appPackage);
        } catch (error) {
          _logger.default.error(`Unable to grant permissions requested. Original error: ${error.message}`);
        }
      }

      _logger.default.debug(`Performed fast reset on the installed '${appPackage}' application (stop and clear)`);

      return;
    }
  }

  if (!app) {
    throw new Error("'app' option is required for reinstall");
  }

  _logger.default.debug(`Running full reset on '${appPackage}' (reinstall)`);

  if (isInstalled) {
    await adb.uninstallApk(appPackage);
  }

  await adb.install(app, {
    grantPermissions: autoGrantPermissions,
    timeout: androidInstallTimeout,
    allowTestPackages
  });
};

helpers.installApk = async function (adb, opts = {}) {
  const {
    app,
    appPackage,
    fastReset,
    fullReset,
    androidInstallTimeout = PACKAGE_INSTALL_TIMEOUT,
    autoGrantPermissions,
    allowTestPackages
  } = opts;

  if (!app || !appPackage) {
    throw new Error("'app' and 'appPackage' options are required");
  }

  if (fullReset) {
    await this.resetApp(adb, opts);
    return;
  }

  const shouldPerformFastReset = fastReset && (await adb.isAppInstalled(appPackage));
  await adb.installOrUpgrade(app, appPackage, {
    grantPermissions: autoGrantPermissions,
    timeout: androidInstallTimeout,
    allowTestPackages
  });

  if (shouldPerformFastReset) {
    _logger.default.info(`Performing fast reset on '${appPackage}'`);

    await this.resetApp(adb, opts);
  }
};

helpers.installOtherApks = async function (otherApps, adb, opts) {
  let {
    androidInstallTimeout = PACKAGE_INSTALL_TIMEOUT,
    autoGrantPermissions,
    allowTestPackages
  } = opts;
  await _bluebird.default.all(otherApps.map(otherApp => {
    _logger.default.debug(`Installing app: ${otherApp}`);

    return adb.installOrUpgrade(otherApp, null, {
      grantPermissions: autoGrantPermissions,
      timeout: androidInstallTimeout,
      allowTestPackages
    });
  }));
};

helpers.initUnicodeKeyboard = async function (adb) {
  _logger.default.debug('Enabling Unicode keyboard support');

  let defaultIME = await adb.defaultIME();

  _logger.default.debug(`Unsetting previous IME ${defaultIME}`);

  const appiumIME = `${SETTINGS_HELPER_PKG_ID}/.UnicodeIME`;

  _logger.default.debug(`Setting IME to '${appiumIME}'`);

  await adb.enableIME(appiumIME);
  await adb.setIME(appiumIME);
  return defaultIME;
};

helpers.setMockLocationApp = async function (adb, app) {
  try {
    if ((await adb.getApiLevel()) < 23) {
      await adb.shell(['settings', 'put', 'secure', 'mock_location', '1']);
    } else {
      await adb.shell(['appops', 'set', app, 'android:mock_location', 'allow']);
    }
  } catch (err) {
    _logger.default.warn(`Unable to set mock location for app '${app}': ${err.message}`);
  }
};

helpers.installHelperApp = async function (adb, apkPath, packageId, appName) {
  try {
    await adb.installOrUpgrade(apkPath, packageId, {
      grantPermissions: true
    });
  } catch (err) {
    _logger.default.warn(`Ignored error while installing Appium ${appName} helper: ` + `'${err.message}'. Manually uninstalling the application ` + `with package id '${packageId}' may help. Expect some Appium ` + `features may not work as expected unless this problem is ` + `fixed.`);
  }
};

helpers.pushSettingsApp = async function (adb, throwError = false) {
  _logger.default.debug("Pushing settings apk to device...");

  await helpers.installHelperApp(adb, _ioAppium.path, SETTINGS_HELPER_PKG_ID, 'Settings');

  if (await adb.processExists(SETTINGS_HELPER_PKG_ID)) {
    _logger.default.debug(`${SETTINGS_HELPER_PKG_ID} is already running. ` + `There is no need to reset its permissions.`);

    return;
  }

  if ((await adb.getApiLevel()) < 23) {
    _logger.default.info('Granting android.permission.SET_ANIMATION_SCALE, CHANGE_CONFIGURATION, ACCESS_FINE_LOCATION by pm grant');

    await adb.grantPermissions(SETTINGS_HELPER_PKG_ID, ['android.permission.SET_ANIMATION_SCALE', 'android.permission.CHANGE_CONFIGURATION', 'android.permission.ACCESS_FINE_LOCATION']);
  }

  try {
    await adb.startApp({
      pkg: SETTINGS_HELPER_PKG_ID,
      activity: SETTINGS_HELPER_MAIN_ACTIVITY,
      action: "android.intent.action.MAIN",
      category: "android.intent.category.LAUNCHER",
      flags: "0x10200000",
      stopApp: false
    });
  } catch (err) {
    _logger.default.warn(`Failed to launch settings app: ${err.message}`);

    if (throwError) {
      throw err;
    }
  }
};

helpers.pushStrings = async function (language, adb, opts) {
  const remoteDir = '/data/local/tmp';
  const stringsJson = 'strings.json';

  const remoteFile = _path.default.posix.resolve(remoteDir, stringsJson);

  await adb.rimraf(remoteFile);
  let app;

  try {
    app = opts.app || (await adb.pullApk(opts.appPackage, opts.tmpDir));
  } catch (err) {
    _logger.default.info(`Failed to pull an apk from '${opts.appPackage}' to '${opts.tmpDir}'. Original error: ${err.message}`);
  }

  if (_lodash.default.isEmpty(opts.appPackage) || !(await _appiumSupport.fs.exists(app))) {
    _logger.default.debug(`No app or package specified. Returning empty strings`);

    return {};
  }

  const stringsTmpDir = _path.default.resolve(opts.tmpDir, opts.appPackage);

  try {
    _logger.default.debug('Extracting strings from apk', app, language, stringsTmpDir);

    const {
      apkStrings,
      localPath
    } = await adb.extractStringsFromApk(app, language, stringsTmpDir);
    await adb.push(localPath, remoteDir);
    return apkStrings;
  } catch (err) {
    _logger.default.warn(`Could not get strings, continuing anyway. Original error: ${err.message}`);

    await adb.shell('echo', [`'{}' > ${remoteFile}`]);
  } finally {
    await _appiumSupport.fs.rimraf(stringsTmpDir);
  }

  return {};
};

helpers.unlockWithUIAutomation = async function (driver, adb, unlockCapabilities) {
  let unlockType = unlockCapabilities.unlockType;

  if (!_unlockHelpers.default.isValidUnlockType(unlockType)) {
    throw new Error(`Invalid unlock type ${unlockType}`);
  }

  let unlockKey = unlockCapabilities.unlockKey;

  if (!_unlockHelpers.default.isValidKey(unlockType, unlockKey)) {
    throw new Error(`Missing unlockKey ${unlockKey} capability for unlockType ${unlockType}`);
  }

  const unlockMethod = {
    [_unlockHelpers.PIN_UNLOCK]: _unlockHelpers.default.pinUnlock,
    [_unlockHelpers.PASSWORD_UNLOCK]: _unlockHelpers.default.passwordUnlock,
    [_unlockHelpers.PATTERN_UNLOCK]: _unlockHelpers.default.patternUnlock,
    [_unlockHelpers.FINGERPRINT_UNLOCK]: _unlockHelpers.default.fingerprintUnlock
  }[unlockType];
  await unlockMethod(adb, driver, unlockCapabilities);
};

helpers.unlockWithHelperApp = async function (adb) {
  _logger.default.info("Unlocking screen");

  let firstRun = true;
  await (0, _asyncbox.retry)(3, async function () {
    if (firstRun) {
      firstRun = false;
    } else {
      try {
        if (!(await adb.isScreenLocked())) {
          return;
        }
      } catch (e) {
        _logger.default.warn(`Error in isScreenLocked: ${e.message}`);

        _logger.default.warn("\"adb shell dumpsys window\" command has timed out.");

        _logger.default.warn("The reason of this timeout is the delayed adb response. Resetting adb server can improve it.");
      }
    }

    _logger.default.info(`Launching ${SETTINGS_HELPER_UNLOCK_ACTIVITY}`);

    await adb.shell(['am', 'start', '-n', `${SETTINGS_HELPER_PKG_ID}/${SETTINGS_HELPER_UNLOCK_ACTIVITY}`, '-c', 'android.intent.category.LAUNCHER', '-a', 'android.intent.action.MAIN', '-f', '0x10200000']);
    await _bluebird.default.delay(1000);
  });
};

helpers.unlock = async function (driver, adb, capabilities) {
  if (!(await adb.isScreenLocked())) {
    _logger.default.info("Screen already unlocked, doing nothing");

    return;
  }

  _logger.default.debug("Screen is locked, trying to unlock");

  if (_lodash.default.isUndefined(capabilities.unlockType)) {
    _logger.default.warn("Using app unlock, this is going to be deprecated!");

    await helpers.unlockWithHelperApp(adb);
  } else {
    await helpers.unlockWithUIAutomation(driver, adb, {
      unlockType: capabilities.unlockType,
      unlockKey: capabilities.unlockKey
    });
    await helpers.verifyUnlock(adb);
  }
};

helpers.verifyUnlock = async function (adb) {
  await (0, _asyncbox.retryInterval)(2, 1000, async () => {
    if (await adb.isScreenLocked()) {
      throw new Error("Screen did not unlock successfully, retrying");
    }

    _logger.default.debug("Screen unlocked successfully");
  });
};

helpers.initDevice = async function (adb, opts) {
  await adb.waitForDevice();
  await helpers.pushSettingsApp(adb);

  if (!opts.avd) {
    await helpers.setMockLocationApp(adb, SETTINGS_HELPER_PKG_ID);
  }

  await helpers.ensureDeviceLocale(adb, opts.language, opts.locale, opts.localeScript);
  await adb.startLogcat();

  if (opts.unicodeKeyboard) {
    return await helpers.initUnicodeKeyboard(adb);
  }
};

helpers.removeNullProperties = function (obj) {
  for (let key of _lodash.default.keys(obj)) {
    if (_lodash.default.isNull(obj[key]) || _lodash.default.isUndefined(obj[key])) {
      delete obj[key];
    }
  }
};

helpers.truncateDecimals = function (number, digits) {
  let multiplier = Math.pow(10, digits),
      adjustedNum = number * multiplier,
      truncatedNum = Math[adjustedNum < 0 ? 'ceil' : 'floor'](adjustedNum);
  return truncatedNum / multiplier;
};

helpers.isChromeBrowser = function (browser) {
  return _lodash.default.includes(Object.keys(CHROME_BROWSER_PACKAGE_ACTIVITY), (browser || '').toLowerCase());
};

helpers.getChromePkg = function (browser) {
  return CHROME_BROWSER_PACKAGE_ACTIVITY[browser.toLowerCase()] || CHROME_BROWSER_PACKAGE_ACTIVITY.default;
};

helpers.removeAllSessionWebSocketHandlers = async function (server, sessionId) {
  if (!server || !_lodash.default.isFunction(server.getWebSocketHandlers)) {
    return;
  }

  const activeHandlers = await server.getWebSocketHandlers(sessionId);

  for (const pathname of _lodash.default.keys(activeHandlers)) {
    await server.removeWebSocketHandler(pathname);
  }
};

helpers.parseArray = function (cap) {
  let parsedCaps;

  try {
    parsedCaps = JSON.parse(cap);
  } catch (ign) {}

  if (_lodash.default.isArray(parsedCaps)) {
    return parsedCaps;
  } else if (_lodash.default.isString(cap)) {
    return [cap];
  }

  throw new Error(`must provide a string or JSON Array; received ${cap}`);
};

helpers.validateDesiredCaps = function (caps) {
  if ((!caps.browserName || !this.isChromeBrowser(caps.browserName)) && !caps.app && !caps.appPackage) {
    _logger.default.errorAndThrow('The desired capabilities must include either an app, appPackage or browserName');
  }

  if (caps.browserName) {
    if (caps.app) {
      _logger.default.warn(`The desired capabilities should generally not include both an 'app' and a 'browserName'`);
    }

    if (caps.appPackage) {
      _logger.default.errorAndThrow(`The desired should not include both of an 'appPackage' and a 'browserName'`);
    }
  }

  return true;
};

helpers.bootstrap = _bootstrap.default;
helpers.unlocker = _unlockHelpers.default;
var _default = helpers;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
