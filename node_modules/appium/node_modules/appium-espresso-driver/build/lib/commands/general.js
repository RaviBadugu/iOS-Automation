"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

function assertRequiredOptions(options, requiredOptionNames) {
  if (!_lodash.default.isArray(requiredOptionNames)) {
    requiredOptionNames = [requiredOptionNames];
  }

  const presentOptionNames = _lodash.default.keys(options);

  const missingOptionNames = _lodash.default.difference(requiredOptionNames, presentOptionNames);

  if (_lodash.default.isEmpty(missingOptionNames)) {
    return options;
  }

  throw new Error(`The following options are required: ${JSON.stringify(missingOptionNames)}. ` + `You have only provided: ${JSON.stringify(presentOptionNames)}`);
}

commands.mobilePerformEditorAction = async function (opts = {}) {
  const {
    action
  } = assertRequiredOptions(opts, ['action']);
  return await this.espresso.jwproxy.command('/appium/device/perform_editor_action', 'POST', {
    action
  });
};

commands.mobileSwipe = async function (opts = {}) {
  const {
    direction,
    element
  } = assertRequiredOptions(opts, ['direction', 'element']);
  return await this.espresso.jwproxy.command(`/appium/execute_mobile/${_appiumSupport.util.unwrapElement(element)}/swipe`, 'POST', {
    direction
  });
};

commands.mobileGetDeviceInfo = async function () {
  return await this.espresso.jwproxy.command('/appium/device/info', 'GET');
};

commands.mobileIsToastVisible = async function (opts = {}) {
  const {
    text,
    isRegexp
  } = opts;

  if (!_appiumSupport.util.hasValue(text)) {
    _logger.default.errorAndThrow(`'text' argument is mandatory`);
  }

  return await this.espresso.jwproxy.command('/appium/execute_mobile/is_toast_displayed', 'POST', {
    text,
    isRegexp
  });
};

helpers.suspendChromedriverProxy = function () {
  this.chromedriver = null;
  this.proxyReqRes = this.espresso.proxyReqRes.bind(this.espresso);
  this.jwpProxyActive = true;
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9nZW5lcmFsLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJhc3NlcnRSZXF1aXJlZE9wdGlvbnMiLCJvcHRpb25zIiwicmVxdWlyZWRPcHRpb25OYW1lcyIsIl8iLCJpc0FycmF5IiwicHJlc2VudE9wdGlvbk5hbWVzIiwia2V5cyIsIm1pc3NpbmdPcHRpb25OYW1lcyIsImRpZmZlcmVuY2UiLCJpc0VtcHR5IiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwibW9iaWxlUGVyZm9ybUVkaXRvckFjdGlvbiIsIm9wdHMiLCJhY3Rpb24iLCJlc3ByZXNzbyIsImp3cHJveHkiLCJjb21tYW5kIiwibW9iaWxlU3dpcGUiLCJkaXJlY3Rpb24iLCJlbGVtZW50IiwidXRpbCIsInVud3JhcEVsZW1lbnQiLCJtb2JpbGVHZXREZXZpY2VJbmZvIiwibW9iaWxlSXNUb2FzdFZpc2libGUiLCJ0ZXh0IiwiaXNSZWdleHAiLCJoYXNWYWx1ZSIsImxvZ2dlciIsImVycm9yQW5kVGhyb3ciLCJzdXNwZW5kQ2hyb21lZHJpdmVyUHJveHkiLCJjaHJvbWVkcml2ZXIiLCJwcm94eVJlcVJlcyIsImJpbmQiLCJqd3BQcm94eUFjdGl2ZSIsIk9iamVjdCIsImFzc2lnbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQSxJQUFJQSxRQUFRLEdBQUcsRUFBZjtBQUFBLElBQW1CQyxPQUFPLEdBQUcsRUFBN0I7QUFBQSxJQUFpQ0MsVUFBVSxHQUFHLEVBQTlDOzs7O0FBRUEsU0FBU0MscUJBQVQsQ0FBZ0NDLE9BQWhDLEVBQXlDQyxtQkFBekMsRUFBOEQ7QUFDNUQsTUFBSSxDQUFDQyxnQkFBRUMsT0FBRixDQUFVRixtQkFBVixDQUFMLEVBQXFDO0FBQ25DQSxJQUFBQSxtQkFBbUIsR0FBRyxDQUFDQSxtQkFBRCxDQUF0QjtBQUNEOztBQUNELFFBQU1HLGtCQUFrQixHQUFHRixnQkFBRUcsSUFBRixDQUFPTCxPQUFQLENBQTNCOztBQUNBLFFBQU1NLGtCQUFrQixHQUFHSixnQkFBRUssVUFBRixDQUFhTixtQkFBYixFQUFrQ0csa0JBQWxDLENBQTNCOztBQUNBLE1BQUlGLGdCQUFFTSxPQUFGLENBQVVGLGtCQUFWLENBQUosRUFBbUM7QUFDakMsV0FBT04sT0FBUDtBQUNEOztBQUNELFFBQU0sSUFBSVMsS0FBSixDQUFXLHVDQUFzQ0MsSUFBSSxDQUFDQyxTQUFMLENBQWVMLGtCQUFmLENBQW1DLElBQTFFLEdBQ2IsMkJBQTBCSSxJQUFJLENBQUNDLFNBQUwsQ0FBZVAsa0JBQWYsQ0FBbUMsRUFEMUQsQ0FBTjtBQUVEOztBQUVEUixRQUFRLENBQUNnQix5QkFBVCxHQUFxQyxnQkFBZ0JDLElBQUksR0FBRyxFQUF2QixFQUEyQjtBQUM5RCxRQUFNO0FBQUNDLElBQUFBO0FBQUQsTUFBV2YscUJBQXFCLENBQUNjLElBQUQsRUFBTyxDQUFDLFFBQUQsQ0FBUCxDQUF0QztBQUNBLFNBQU8sTUFBTSxLQUFLRSxRQUFMLENBQWNDLE9BQWQsQ0FBc0JDLE9BQXRCLENBQThCLHNDQUE5QixFQUFzRSxNQUF0RSxFQUE4RTtBQUFDSCxJQUFBQTtBQUFELEdBQTlFLENBQWI7QUFDRCxDQUhEOztBQUtBbEIsUUFBUSxDQUFDc0IsV0FBVCxHQUF1QixnQkFBZ0JMLElBQUksR0FBRyxFQUF2QixFQUEyQjtBQUNoRCxRQUFNO0FBQUNNLElBQUFBLFNBQUQ7QUFBWUMsSUFBQUE7QUFBWixNQUF1QnJCLHFCQUFxQixDQUFDYyxJQUFELEVBQU8sQ0FBQyxXQUFELEVBQWMsU0FBZCxDQUFQLENBQWxEO0FBQ0EsU0FBTyxNQUFNLEtBQUtFLFFBQUwsQ0FBY0MsT0FBZCxDQUFzQkMsT0FBdEIsQ0FBK0IsMEJBQXlCSSxvQkFBS0MsYUFBTCxDQUFtQkYsT0FBbkIsQ0FBNEIsUUFBcEYsRUFBNkYsTUFBN0YsRUFBcUc7QUFBQ0QsSUFBQUE7QUFBRCxHQUFyRyxDQUFiO0FBQ0QsQ0FIRDs7QUFLQXZCLFFBQVEsQ0FBQzJCLG1CQUFULEdBQStCLGtCQUFrQjtBQUMvQyxTQUFPLE1BQU0sS0FBS1IsUUFBTCxDQUFjQyxPQUFkLENBQXNCQyxPQUF0QixDQUE4QixxQkFBOUIsRUFBcUQsS0FBckQsQ0FBYjtBQUNELENBRkQ7O0FBSUFyQixRQUFRLENBQUM0QixvQkFBVCxHQUFnQyxnQkFBZ0JYLElBQUksR0FBRyxFQUF2QixFQUEyQjtBQUN6RCxRQUFNO0FBQUNZLElBQUFBLElBQUQ7QUFBT0MsSUFBQUE7QUFBUCxNQUFtQmIsSUFBekI7O0FBQ0EsTUFBSSxDQUFDUSxvQkFBS00sUUFBTCxDQUFjRixJQUFkLENBQUwsRUFBMEI7QUFDeEJHLG9CQUFPQyxhQUFQLENBQXNCLDhCQUF0QjtBQUNEOztBQUNELFNBQU8sTUFBTSxLQUFLZCxRQUFMLENBQWNDLE9BQWQsQ0FBc0JDLE9BQXRCLENBQThCLDJDQUE5QixFQUEyRSxNQUEzRSxFQUFtRjtBQUM5RlEsSUFBQUEsSUFEOEY7QUFFOUZDLElBQUFBO0FBRjhGLEdBQW5GLENBQWI7QUFJRCxDQVREOztBQVlBN0IsT0FBTyxDQUFDaUMsd0JBQVIsR0FBbUMsWUFBWTtBQUM3QyxPQUFLQyxZQUFMLEdBQW9CLElBQXBCO0FBQ0EsT0FBS0MsV0FBTCxHQUFtQixLQUFLakIsUUFBTCxDQUFjaUIsV0FBZCxDQUEwQkMsSUFBMUIsQ0FBK0IsS0FBS2xCLFFBQXBDLENBQW5CO0FBQ0EsT0FBS21CLGNBQUwsR0FBc0IsSUFBdEI7QUFDRCxDQUpEOztBQU9BQyxNQUFNLENBQUNDLE1BQVAsQ0FBY3RDLFVBQWQsRUFBMEJGLFFBQTFCLEVBQW9DQyxPQUFwQztlQUVlQyxVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IHV0aWwgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4uL2xvZ2dlcic7XG5cbmxldCBjb21tYW5kcyA9IHt9LCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gYXNzZXJ0UmVxdWlyZWRPcHRpb25zIChvcHRpb25zLCByZXF1aXJlZE9wdGlvbk5hbWVzKSB7XG4gIGlmICghXy5pc0FycmF5KHJlcXVpcmVkT3B0aW9uTmFtZXMpKSB7XG4gICAgcmVxdWlyZWRPcHRpb25OYW1lcyA9IFtyZXF1aXJlZE9wdGlvbk5hbWVzXTtcbiAgfVxuICBjb25zdCBwcmVzZW50T3B0aW9uTmFtZXMgPSBfLmtleXMob3B0aW9ucyk7XG4gIGNvbnN0IG1pc3NpbmdPcHRpb25OYW1lcyA9IF8uZGlmZmVyZW5jZShyZXF1aXJlZE9wdGlvbk5hbWVzLCBwcmVzZW50T3B0aW9uTmFtZXMpO1xuICBpZiAoXy5pc0VtcHR5KG1pc3NpbmdPcHRpb25OYW1lcykpIHtcbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBmb2xsb3dpbmcgb3B0aW9ucyBhcmUgcmVxdWlyZWQ6ICR7SlNPTi5zdHJpbmdpZnkobWlzc2luZ09wdGlvbk5hbWVzKX0uIGAgK1xuICAgIGBZb3UgaGF2ZSBvbmx5IHByb3ZpZGVkOiAke0pTT04uc3RyaW5naWZ5KHByZXNlbnRPcHRpb25OYW1lcyl9YCk7XG59XG5cbmNvbW1hbmRzLm1vYmlsZVBlcmZvcm1FZGl0b3JBY3Rpb24gPSBhc3luYyBmdW5jdGlvbiAob3B0cyA9IHt9KSB7XG4gIGNvbnN0IHthY3Rpb259ID0gYXNzZXJ0UmVxdWlyZWRPcHRpb25zKG9wdHMsIFsnYWN0aW9uJ10pO1xuICByZXR1cm4gYXdhaXQgdGhpcy5lc3ByZXNzby5qd3Byb3h5LmNvbW1hbmQoJy9hcHBpdW0vZGV2aWNlL3BlcmZvcm1fZWRpdG9yX2FjdGlvbicsICdQT1NUJywge2FjdGlvbn0pO1xufTtcblxuY29tbWFuZHMubW9iaWxlU3dpcGUgPSBhc3luYyBmdW5jdGlvbiAob3B0cyA9IHt9KSB7XG4gIGNvbnN0IHtkaXJlY3Rpb24sIGVsZW1lbnR9ID0gYXNzZXJ0UmVxdWlyZWRPcHRpb25zKG9wdHMsIFsnZGlyZWN0aW9uJywgJ2VsZW1lbnQnXSk7XG4gIHJldHVybiBhd2FpdCB0aGlzLmVzcHJlc3NvLmp3cHJveHkuY29tbWFuZChgL2FwcGl1bS9leGVjdXRlX21vYmlsZS8ke3V0aWwudW53cmFwRWxlbWVudChlbGVtZW50KX0vc3dpcGVgLCAnUE9TVCcsIHtkaXJlY3Rpb259KTtcbn07XG5cbmNvbW1hbmRzLm1vYmlsZUdldERldmljZUluZm8gPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBhd2FpdCB0aGlzLmVzcHJlc3NvLmp3cHJveHkuY29tbWFuZCgnL2FwcGl1bS9kZXZpY2UvaW5mbycsICdHRVQnKTtcbn07XG5cbmNvbW1hbmRzLm1vYmlsZUlzVG9hc3RWaXNpYmxlID0gYXN5bmMgZnVuY3Rpb24gKG9wdHMgPSB7fSkge1xuICBjb25zdCB7dGV4dCwgaXNSZWdleHB9ID0gb3B0cztcbiAgaWYgKCF1dGlsLmhhc1ZhbHVlKHRleHQpKSB7XG4gICAgbG9nZ2VyLmVycm9yQW5kVGhyb3coYCd0ZXh0JyBhcmd1bWVudCBpcyBtYW5kYXRvcnlgKTtcbiAgfVxuICByZXR1cm4gYXdhaXQgdGhpcy5lc3ByZXNzby5qd3Byb3h5LmNvbW1hbmQoJy9hcHBpdW0vZXhlY3V0ZV9tb2JpbGUvaXNfdG9hc3RfZGlzcGxheWVkJywgJ1BPU1QnLCB7XG4gICAgdGV4dCxcbiAgICBpc1JlZ2V4cCxcbiAgfSk7XG59O1xuXG4vLyBTdG9wIHByb3h5aW5nIHRvIGFueSBDaHJvbWVkcml2ZXIgYW5kIHJlZGlyZWN0IHRvIEVzcHJlc3NvXG5oZWxwZXJzLnN1c3BlbmRDaHJvbWVkcml2ZXJQcm94eSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jaHJvbWVkcml2ZXIgPSBudWxsO1xuICB0aGlzLnByb3h5UmVxUmVzID0gdGhpcy5lc3ByZXNzby5wcm94eVJlcVJlcy5iaW5kKHRoaXMuZXNwcmVzc28pO1xuICB0aGlzLmp3cFByb3h5QWN0aXZlID0gdHJ1ZTtcbn07XG5cblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBjb21tYW5kcywgaGVscGVycyk7XG5leHBvcnQgeyBjb21tYW5kcywgaGVscGVycyB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL2dlbmVyYWwuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
